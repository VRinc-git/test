
STM32_FreeRTOS_Count_semaphore_queue.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000385c  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000c8  08003a2c  08003a2c  00013a2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003af4  08003af4  0002008c  2**0
                  CONTENTS
  4 .ARM          00000000  08003af4  08003af4  0002008c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003af4  08003af4  0002008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003af4  08003af4  00013af4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003af8  08003af8  00013af8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  08003afc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00012dd0  2000008c  08003b88  0002008c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20012e5c  08003b88  00022e5c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b1d7  00000000  00000000  000200bc  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001be1  00000000  00000000  0002b293  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000009c0  00000000  00000000  0002ce78  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  0002d838  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0000304a  00000000  00000000  0002e120  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008711  00000000  00000000  0003116a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    0007c215  00000000  00000000  0003987b  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  000b5a90  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002bb8  00000000  00000000  000b5b0c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	2000008c 	.word	0x2000008c
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08003a14 	.word	0x08003a14

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20000090 	.word	0x20000090
 800020c:	08003a14 	.word	0x08003a14

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <EXTI_Init>:
  * @param  EXTI_InitStruct: pointer to a EXTI_InitTypeDef structure
  *         that contains the configuration information for the EXTI peripheral.
  * @retval None
  */
void EXTI_Init(EXTI_InitTypeDef* EXTI_InitStruct)
{
 80002c0:	b480      	push	{r7}
 80002c2:	b085      	sub	sp, #20
 80002c4:	af00      	add	r7, sp, #0
 80002c6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0;
 80002c8:	2300      	movs	r3, #0
 80002ca:	60fb      	str	r3, [r7, #12]
  assert_param(IS_EXTI_MODE(EXTI_InitStruct->EXTI_Mode));
  assert_param(IS_EXTI_TRIGGER(EXTI_InitStruct->EXTI_Trigger));
  assert_param(IS_EXTI_LINE(EXTI_InitStruct->EXTI_Line));  
  assert_param(IS_FUNCTIONAL_STATE(EXTI_InitStruct->EXTI_LineCmd));

  tmp = (uint32_t)EXTI_BASE;
 80002cc:	4b34      	ldr	r3, [pc, #208]	; (80003a0 <EXTI_Init+0xe0>)
 80002ce:	60fb      	str	r3, [r7, #12]
     
  if (EXTI_InitStruct->EXTI_LineCmd != DISABLE)
 80002d0:	687b      	ldr	r3, [r7, #4]
 80002d2:	799b      	ldrb	r3, [r3, #6]
 80002d4:	2b00      	cmp	r3, #0
 80002d6:	d04f      	beq.n	8000378 <EXTI_Init+0xb8>
  {
    /* Clear EXTI line configuration */
    EXTI->IMR &= ~EXTI_InitStruct->EXTI_Line;
 80002d8:	4b31      	ldr	r3, [pc, #196]	; (80003a0 <EXTI_Init+0xe0>)
 80002da:	681a      	ldr	r2, [r3, #0]
 80002dc:	687b      	ldr	r3, [r7, #4]
 80002de:	681b      	ldr	r3, [r3, #0]
 80002e0:	43db      	mvns	r3, r3
 80002e2:	492f      	ldr	r1, [pc, #188]	; (80003a0 <EXTI_Init+0xe0>)
 80002e4:	4013      	ands	r3, r2
 80002e6:	600b      	str	r3, [r1, #0]
    EXTI->EMR &= ~EXTI_InitStruct->EXTI_Line;
 80002e8:	4b2d      	ldr	r3, [pc, #180]	; (80003a0 <EXTI_Init+0xe0>)
 80002ea:	685a      	ldr	r2, [r3, #4]
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	43db      	mvns	r3, r3
 80002f2:	492b      	ldr	r1, [pc, #172]	; (80003a0 <EXTI_Init+0xe0>)
 80002f4:	4013      	ands	r3, r2
 80002f6:	604b      	str	r3, [r1, #4]
    
    tmp += EXTI_InitStruct->EXTI_Mode;
 80002f8:	687b      	ldr	r3, [r7, #4]
 80002fa:	791b      	ldrb	r3, [r3, #4]
 80002fc:	461a      	mov	r2, r3
 80002fe:	68fb      	ldr	r3, [r7, #12]
 8000300:	4413      	add	r3, r2
 8000302:	60fb      	str	r3, [r7, #12]

    *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000304:	68fb      	ldr	r3, [r7, #12]
 8000306:	6819      	ldr	r1, [r3, #0]
 8000308:	687b      	ldr	r3, [r7, #4]
 800030a:	681a      	ldr	r2, [r3, #0]
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	430a      	orrs	r2, r1
 8000310:	601a      	str	r2, [r3, #0]

    /* Clear Rising Falling edge configuration */
    EXTI->RTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000312:	4b23      	ldr	r3, [pc, #140]	; (80003a0 <EXTI_Init+0xe0>)
 8000314:	689a      	ldr	r2, [r3, #8]
 8000316:	687b      	ldr	r3, [r7, #4]
 8000318:	681b      	ldr	r3, [r3, #0]
 800031a:	43db      	mvns	r3, r3
 800031c:	4920      	ldr	r1, [pc, #128]	; (80003a0 <EXTI_Init+0xe0>)
 800031e:	4013      	ands	r3, r2
 8000320:	608b      	str	r3, [r1, #8]
    EXTI->FTSR &= ~EXTI_InitStruct->EXTI_Line;
 8000322:	4b1f      	ldr	r3, [pc, #124]	; (80003a0 <EXTI_Init+0xe0>)
 8000324:	68da      	ldr	r2, [r3, #12]
 8000326:	687b      	ldr	r3, [r7, #4]
 8000328:	681b      	ldr	r3, [r3, #0]
 800032a:	43db      	mvns	r3, r3
 800032c:	491c      	ldr	r1, [pc, #112]	; (80003a0 <EXTI_Init+0xe0>)
 800032e:	4013      	ands	r3, r2
 8000330:	60cb      	str	r3, [r1, #12]
    
    /* Select the trigger for the selected external interrupts */
    if (EXTI_InitStruct->EXTI_Trigger == EXTI_Trigger_Rising_Falling)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	795b      	ldrb	r3, [r3, #5]
 8000336:	2b10      	cmp	r3, #16
 8000338:	d10e      	bne.n	8000358 <EXTI_Init+0x98>
    {
      /* Rising Falling edge */
      EXTI->RTSR |= EXTI_InitStruct->EXTI_Line;
 800033a:	4b19      	ldr	r3, [pc, #100]	; (80003a0 <EXTI_Init+0xe0>)
 800033c:	689a      	ldr	r2, [r3, #8]
 800033e:	687b      	ldr	r3, [r7, #4]
 8000340:	681b      	ldr	r3, [r3, #0]
 8000342:	4917      	ldr	r1, [pc, #92]	; (80003a0 <EXTI_Init+0xe0>)
 8000344:	4313      	orrs	r3, r2
 8000346:	608b      	str	r3, [r1, #8]
      EXTI->FTSR |= EXTI_InitStruct->EXTI_Line;
 8000348:	4b15      	ldr	r3, [pc, #84]	; (80003a0 <EXTI_Init+0xe0>)
 800034a:	68da      	ldr	r2, [r3, #12]
 800034c:	687b      	ldr	r3, [r7, #4]
 800034e:	681b      	ldr	r3, [r3, #0]
 8000350:	4913      	ldr	r1, [pc, #76]	; (80003a0 <EXTI_Init+0xe0>)
 8000352:	4313      	orrs	r3, r2
 8000354:	60cb      	str	r3, [r1, #12]
    tmp += EXTI_InitStruct->EXTI_Mode;

    /* Disable the selected external lines */
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
  }
}
 8000356:	e01d      	b.n	8000394 <EXTI_Init+0xd4>
      tmp = (uint32_t)EXTI_BASE;
 8000358:	4b11      	ldr	r3, [pc, #68]	; (80003a0 <EXTI_Init+0xe0>)
 800035a:	60fb      	str	r3, [r7, #12]
      tmp += EXTI_InitStruct->EXTI_Trigger;
 800035c:	687b      	ldr	r3, [r7, #4]
 800035e:	795b      	ldrb	r3, [r3, #5]
 8000360:	461a      	mov	r2, r3
 8000362:	68fb      	ldr	r3, [r7, #12]
 8000364:	4413      	add	r3, r2
 8000366:	60fb      	str	r3, [r7, #12]
      *(__IO uint32_t *) tmp |= EXTI_InitStruct->EXTI_Line;
 8000368:	68fb      	ldr	r3, [r7, #12]
 800036a:	6819      	ldr	r1, [r3, #0]
 800036c:	687b      	ldr	r3, [r7, #4]
 800036e:	681a      	ldr	r2, [r3, #0]
 8000370:	68fb      	ldr	r3, [r7, #12]
 8000372:	430a      	orrs	r2, r1
 8000374:	601a      	str	r2, [r3, #0]
}
 8000376:	e00d      	b.n	8000394 <EXTI_Init+0xd4>
    tmp += EXTI_InitStruct->EXTI_Mode;
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	791b      	ldrb	r3, [r3, #4]
 800037c:	461a      	mov	r2, r3
 800037e:	68fb      	ldr	r3, [r7, #12]
 8000380:	4413      	add	r3, r2
 8000382:	60fb      	str	r3, [r7, #12]
    *(__IO uint32_t *) tmp &= ~EXTI_InitStruct->EXTI_Line;
 8000384:	68fb      	ldr	r3, [r7, #12]
 8000386:	6819      	ldr	r1, [r3, #0]
 8000388:	687b      	ldr	r3, [r7, #4]
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	43da      	mvns	r2, r3
 800038e:	68fb      	ldr	r3, [r7, #12]
 8000390:	400a      	ands	r2, r1
 8000392:	601a      	str	r2, [r3, #0]
}
 8000394:	bf00      	nop
 8000396:	3714      	adds	r7, #20
 8000398:	46bd      	mov	sp, r7
 800039a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800039e:	4770      	bx	lr
 80003a0:	40013c00 	.word	0x40013c00

080003a4 <EXTI_ClearITPendingBit>:
  * @param  EXTI_Line: specifies the EXTI lines to clear.
  *          This parameter can be any combination of EXTI_Linex where x can be (0..22)
  * @retval None
  */
void EXTI_ClearITPendingBit(uint32_t EXTI_Line)
{
 80003a4:	b480      	push	{r7}
 80003a6:	b083      	sub	sp, #12
 80003a8:	af00      	add	r7, sp, #0
 80003aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(EXTI_Line));
  
  EXTI->PR = EXTI_Line;
 80003ac:	4a04      	ldr	r2, [pc, #16]	; (80003c0 <EXTI_ClearITPendingBit+0x1c>)
 80003ae:	687b      	ldr	r3, [r7, #4]
 80003b0:	6153      	str	r3, [r2, #20]
}
 80003b2:	bf00      	nop
 80003b4:	370c      	adds	r7, #12
 80003b6:	46bd      	mov	sp, r7
 80003b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80003bc:	4770      	bx	lr
 80003be:	bf00      	nop
 80003c0:	40013c00 	.word	0x40013c00

080003c4 <GPIO_Init>:
  * @param  GPIO_InitStruct: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void GPIO_Init(GPIO_TypeDef* GPIOx, GPIO_InitTypeDef* GPIO_InitStruct)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b087      	sub	sp, #28
 80003c8:	af00      	add	r7, sp, #0
 80003ca:	6078      	str	r0, [r7, #4]
 80003cc:	6039      	str	r1, [r7, #0]
  uint32_t pinpos = 0x00, pos = 0x00 , currentpin = 0x00;
 80003ce:	2300      	movs	r3, #0
 80003d0:	617b      	str	r3, [r7, #20]
 80003d2:	2300      	movs	r3, #0
 80003d4:	613b      	str	r3, [r7, #16]
 80003d6:	2300      	movs	r3, #0
 80003d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_GPIO_MODE(GPIO_InitStruct->GPIO_Mode));
  assert_param(IS_GPIO_PUPD(GPIO_InitStruct->GPIO_PuPd));

  /* ------------------------- Configure the port pins ---------------- */
  /*-- GPIO Mode Configuration --*/
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80003da:	2300      	movs	r3, #0
 80003dc:	617b      	str	r3, [r7, #20]
 80003de:	e076      	b.n	80004ce <GPIO_Init+0x10a>
  {
    pos = ((uint32_t)0x01) << pinpos;
 80003e0:	2201      	movs	r2, #1
 80003e2:	697b      	ldr	r3, [r7, #20]
 80003e4:	fa02 f303 	lsl.w	r3, r2, r3
 80003e8:	613b      	str	r3, [r7, #16]
    /* Get the port pins position */
    currentpin = (GPIO_InitStruct->GPIO_Pin) & pos;
 80003ea:	683b      	ldr	r3, [r7, #0]
 80003ec:	681b      	ldr	r3, [r3, #0]
 80003ee:	693a      	ldr	r2, [r7, #16]
 80003f0:	4013      	ands	r3, r2
 80003f2:	60fb      	str	r3, [r7, #12]

    if (currentpin == pos)
 80003f4:	68fa      	ldr	r2, [r7, #12]
 80003f6:	693b      	ldr	r3, [r7, #16]
 80003f8:	429a      	cmp	r2, r3
 80003fa:	d165      	bne.n	80004c8 <GPIO_Init+0x104>
    {
      GPIOx->MODER  &= ~(GPIO_MODER_MODER0 << (pinpos * 2));
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	681a      	ldr	r2, [r3, #0]
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	005b      	lsls	r3, r3, #1
 8000404:	2103      	movs	r1, #3
 8000406:	fa01 f303 	lsl.w	r3, r1, r3
 800040a:	43db      	mvns	r3, r3
 800040c:	401a      	ands	r2, r3
 800040e:	687b      	ldr	r3, [r7, #4]
 8000410:	601a      	str	r2, [r3, #0]
      GPIOx->MODER |= (((uint32_t)GPIO_InitStruct->GPIO_Mode) << (pinpos * 2));
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681a      	ldr	r2, [r3, #0]
 8000416:	683b      	ldr	r3, [r7, #0]
 8000418:	791b      	ldrb	r3, [r3, #4]
 800041a:	4619      	mov	r1, r3
 800041c:	697b      	ldr	r3, [r7, #20]
 800041e:	005b      	lsls	r3, r3, #1
 8000420:	fa01 f303 	lsl.w	r3, r1, r3
 8000424:	431a      	orrs	r2, r3
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	601a      	str	r2, [r3, #0]

      if ((GPIO_InitStruct->GPIO_Mode == GPIO_Mode_OUT) || (GPIO_InitStruct->GPIO_Mode == GPIO_Mode_AF))
 800042a:	683b      	ldr	r3, [r7, #0]
 800042c:	791b      	ldrb	r3, [r3, #4]
 800042e:	2b01      	cmp	r3, #1
 8000430:	d003      	beq.n	800043a <GPIO_Init+0x76>
 8000432:	683b      	ldr	r3, [r7, #0]
 8000434:	791b      	ldrb	r3, [r3, #4]
 8000436:	2b02      	cmp	r3, #2
 8000438:	d12e      	bne.n	8000498 <GPIO_Init+0xd4>
      {
        /* Check Speed mode parameters */
        assert_param(IS_GPIO_SPEED(GPIO_InitStruct->GPIO_Speed));

        /* Speed mode configuration */
        GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (pinpos * 2));
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	689a      	ldr	r2, [r3, #8]
 800043e:	697b      	ldr	r3, [r7, #20]
 8000440:	005b      	lsls	r3, r3, #1
 8000442:	2103      	movs	r1, #3
 8000444:	fa01 f303 	lsl.w	r3, r1, r3
 8000448:	43db      	mvns	r3, r3
 800044a:	401a      	ands	r2, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	609a      	str	r2, [r3, #8]
        GPIOx->OSPEEDR |= ((uint32_t)(GPIO_InitStruct->GPIO_Speed) << (pinpos * 2));
 8000450:	687b      	ldr	r3, [r7, #4]
 8000452:	689a      	ldr	r2, [r3, #8]
 8000454:	683b      	ldr	r3, [r7, #0]
 8000456:	795b      	ldrb	r3, [r3, #5]
 8000458:	4619      	mov	r1, r3
 800045a:	697b      	ldr	r3, [r7, #20]
 800045c:	005b      	lsls	r3, r3, #1
 800045e:	fa01 f303 	lsl.w	r3, r1, r3
 8000462:	431a      	orrs	r2, r3
 8000464:	687b      	ldr	r3, [r7, #4]
 8000466:	609a      	str	r2, [r3, #8]

        /* Check Output mode parameters */
        assert_param(IS_GPIO_OTYPE(GPIO_InitStruct->GPIO_OType));

        /* Output mode configuration*/
        GPIOx->OTYPER  &= ~((GPIO_OTYPER_OT_0) << ((uint16_t)pinpos)) ;
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	685a      	ldr	r2, [r3, #4]
 800046c:	697b      	ldr	r3, [r7, #20]
 800046e:	b29b      	uxth	r3, r3
 8000470:	4619      	mov	r1, r3
 8000472:	2301      	movs	r3, #1
 8000474:	408b      	lsls	r3, r1
 8000476:	43db      	mvns	r3, r3
 8000478:	401a      	ands	r2, r3
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	605a      	str	r2, [r3, #4]
        GPIOx->OTYPER |= (uint16_t)(((uint16_t)GPIO_InitStruct->GPIO_OType) << ((uint16_t)pinpos));
 800047e:	687b      	ldr	r3, [r7, #4]
 8000480:	685b      	ldr	r3, [r3, #4]
 8000482:	683a      	ldr	r2, [r7, #0]
 8000484:	7992      	ldrb	r2, [r2, #6]
 8000486:	4611      	mov	r1, r2
 8000488:	697a      	ldr	r2, [r7, #20]
 800048a:	b292      	uxth	r2, r2
 800048c:	fa01 f202 	lsl.w	r2, r1, r2
 8000490:	b292      	uxth	r2, r2
 8000492:	431a      	orrs	r2, r3
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	605a      	str	r2, [r3, #4]
      }

      /* Pull-up Pull down resistor configuration*/
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << ((uint16_t)pinpos * 2));
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	68da      	ldr	r2, [r3, #12]
 800049c:	697b      	ldr	r3, [r7, #20]
 800049e:	b29b      	uxth	r3, r3
 80004a0:	005b      	lsls	r3, r3, #1
 80004a2:	2103      	movs	r1, #3
 80004a4:	fa01 f303 	lsl.w	r3, r1, r3
 80004a8:	43db      	mvns	r3, r3
 80004aa:	401a      	ands	r2, r3
 80004ac:	687b      	ldr	r3, [r7, #4]
 80004ae:	60da      	str	r2, [r3, #12]
      GPIOx->PUPDR |= (((uint32_t)GPIO_InitStruct->GPIO_PuPd) << (pinpos * 2));
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	68da      	ldr	r2, [r3, #12]
 80004b4:	683b      	ldr	r3, [r7, #0]
 80004b6:	79db      	ldrb	r3, [r3, #7]
 80004b8:	4619      	mov	r1, r3
 80004ba:	697b      	ldr	r3, [r7, #20]
 80004bc:	005b      	lsls	r3, r3, #1
 80004be:	fa01 f303 	lsl.w	r3, r1, r3
 80004c2:	431a      	orrs	r2, r3
 80004c4:	687b      	ldr	r3, [r7, #4]
 80004c6:	60da      	str	r2, [r3, #12]
  for (pinpos = 0x00; pinpos < 0x10; pinpos++)
 80004c8:	697b      	ldr	r3, [r7, #20]
 80004ca:	3301      	adds	r3, #1
 80004cc:	617b      	str	r3, [r7, #20]
 80004ce:	697b      	ldr	r3, [r7, #20]
 80004d0:	2b0f      	cmp	r3, #15
 80004d2:	d985      	bls.n	80003e0 <GPIO_Init+0x1c>
    }
  }
}
 80004d4:	bf00      	nop
 80004d6:	371c      	adds	r7, #28
 80004d8:	46bd      	mov	sp, r7
 80004da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004de:	4770      	bx	lr

080004e0 <GPIO_PinAFConfig>:
  *            @arg GPIO_AF_LTDC: Connect LTDC pins to AF14 for STM32F429xx/439xx devices. 
  *            @arg GPIO_AF_EVENTOUT: Connect EVENTOUT pins to AF15
  * @retval None
  */
void GPIO_PinAFConfig(GPIO_TypeDef* GPIOx, uint16_t GPIO_PinSource, uint8_t GPIO_AF)
{
 80004e0:	b480      	push	{r7}
 80004e2:	b085      	sub	sp, #20
 80004e4:	af00      	add	r7, sp, #0
 80004e6:	6078      	str	r0, [r7, #4]
 80004e8:	460b      	mov	r3, r1
 80004ea:	807b      	strh	r3, [r7, #2]
 80004ec:	4613      	mov	r3, r2
 80004ee:	707b      	strb	r3, [r7, #1]
  uint32_t temp = 0x00;
 80004f0:	2300      	movs	r3, #0
 80004f2:	60fb      	str	r3, [r7, #12]
  uint32_t temp_2 = 0x00;
 80004f4:	2300      	movs	r3, #0
 80004f6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_PERIPH(GPIOx));
  assert_param(IS_GPIO_PIN_SOURCE(GPIO_PinSource));
  assert_param(IS_GPIO_AF(GPIO_AF));
  
  temp = ((uint32_t)(GPIO_AF) << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 80004f8:	787a      	ldrb	r2, [r7, #1]
 80004fa:	887b      	ldrh	r3, [r7, #2]
 80004fc:	f003 0307 	and.w	r3, r3, #7
 8000500:	009b      	lsls	r3, r3, #2
 8000502:	fa02 f303 	lsl.w	r3, r2, r3
 8000506:	60fb      	str	r3, [r7, #12]
  GPIOx->AFR[GPIO_PinSource >> 0x03] &= ~((uint32_t)0xF << ((uint32_t)((uint32_t)GPIO_PinSource & (uint32_t)0x07) * 4)) ;
 8000508:	887b      	ldrh	r3, [r7, #2]
 800050a:	08db      	lsrs	r3, r3, #3
 800050c:	b29b      	uxth	r3, r3
 800050e:	461a      	mov	r2, r3
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	3208      	adds	r2, #8
 8000514:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8000518:	887b      	ldrh	r3, [r7, #2]
 800051a:	f003 0307 	and.w	r3, r3, #7
 800051e:	009b      	lsls	r3, r3, #2
 8000520:	210f      	movs	r1, #15
 8000522:	fa01 f303 	lsl.w	r3, r1, r3
 8000526:	43db      	mvns	r3, r3
 8000528:	8879      	ldrh	r1, [r7, #2]
 800052a:	08c9      	lsrs	r1, r1, #3
 800052c:	b289      	uxth	r1, r1
 800052e:	4608      	mov	r0, r1
 8000530:	ea02 0103 	and.w	r1, r2, r3
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f100 0208 	add.w	r2, r0, #8
 800053a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  temp_2 = GPIOx->AFR[GPIO_PinSource >> 0x03] | temp;
 800053e:	887b      	ldrh	r3, [r7, #2]
 8000540:	08db      	lsrs	r3, r3, #3
 8000542:	b29b      	uxth	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	3208      	adds	r2, #8
 800054a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800054e:	68fa      	ldr	r2, [r7, #12]
 8000550:	4313      	orrs	r3, r2
 8000552:	60bb      	str	r3, [r7, #8]
  GPIOx->AFR[GPIO_PinSource >> 0x03] = temp_2;
 8000554:	887b      	ldrh	r3, [r7, #2]
 8000556:	08db      	lsrs	r3, r3, #3
 8000558:	b29b      	uxth	r3, r3
 800055a:	461a      	mov	r2, r3
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	3208      	adds	r2, #8
 8000560:	68b9      	ldr	r1, [r7, #8]
 8000562:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
}
 8000566:	bf00      	nop
 8000568:	3714      	adds	r7, #20
 800056a:	46bd      	mov	sp, r7
 800056c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000570:	4770      	bx	lr
	...

08000574 <RCC_DeInit>:
  *            - LSI, LSE and RTC clocks 
  * @param  None
  * @retval None
  */
void RCC_DeInit(void)
{
 8000574:	b480      	push	{r7}
 8000576:	af00      	add	r7, sp, #0
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8000578:	4b16      	ldr	r3, [pc, #88]	; (80005d4 <RCC_DeInit+0x60>)
 800057a:	681b      	ldr	r3, [r3, #0]
 800057c:	4a15      	ldr	r2, [pc, #84]	; (80005d4 <RCC_DeInit+0x60>)
 800057e:	f043 0301 	orr.w	r3, r3, #1
 8000582:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8000584:	4b13      	ldr	r3, [pc, #76]	; (80005d4 <RCC_DeInit+0x60>)
 8000586:	2200      	movs	r2, #0
 8000588:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON, PLLON, PLLI2S and PLLSAI(STM32F42xxx/43xxx/446xx/469xx/479xx devices) bits */
  RCC->CR &= (uint32_t)0xEAF6FFFF;
 800058a:	4b12      	ldr	r3, [pc, #72]	; (80005d4 <RCC_DeInit+0x60>)
 800058c:	681b      	ldr	r3, [r3, #0]
 800058e:	4a11      	ldr	r2, [pc, #68]	; (80005d4 <RCC_DeInit+0x60>)
 8000590:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000594:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000598:	6013      	str	r3, [r2, #0]
  
  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800059a:	4b0e      	ldr	r3, [pc, #56]	; (80005d4 <RCC_DeInit+0x60>)
 800059c:	4a0e      	ldr	r2, [pc, #56]	; (80005d8 <RCC_DeInit+0x64>)
 800059e:	605a      	str	r2, [r3, #4]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F411xE) || defined(STM32F446xx) || defined(STM32F413_423xx) || defined(STM32F469_479xx)  
  /* Reset PLLI2SCFGR register */
  RCC->PLLI2SCFGR = 0x20003000;
 80005a0:	4b0c      	ldr	r3, [pc, #48]	; (80005d4 <RCC_DeInit+0x60>)
 80005a2:	4a0e      	ldr	r2, [pc, #56]	; (80005dc <RCC_DeInit+0x68>)
 80005a4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F411xE || STM32F446xx || STM32F413_423xx || STM32F469_479xx */

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx) 
  /* Reset PLLSAICFGR register, only available for STM32F42xxx/43xxx/446xx/469xx/479xx devices */
  RCC->PLLSAICFGR = 0x24003000;
 80005a8:	4b0a      	ldr	r3, [pc, #40]	; (80005d4 <RCC_DeInit+0x60>)
 80005aa:	4a0d      	ldr	r2, [pc, #52]	; (80005e0 <RCC_DeInit+0x6c>)
 80005ac:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F446xx || STM32F469_479xx */
  
  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 80005b0:	4b08      	ldr	r3, [pc, #32]	; (80005d4 <RCC_DeInit+0x60>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a07      	ldr	r2, [pc, #28]	; (80005d4 <RCC_DeInit+0x60>)
 80005b6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80005ba:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 80005bc:	4b05      	ldr	r3, [pc, #20]	; (80005d4 <RCC_DeInit+0x60>)
 80005be:	2200      	movs	r2, #0
 80005c0:	60da      	str	r2, [r3, #12]

  /* Disable Timers clock prescalers selection, only available for STM32F42/43xxx and STM32F413_423xx devices */
  RCC->DCKCFGR = 0x00000000;
 80005c2:	4b04      	ldr	r3, [pc, #16]	; (80005d4 <RCC_DeInit+0x60>)
 80005c4:	2200      	movs	r2, #0
 80005c6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  
#if defined(STM32F410xx) || defined(STM32F413_423xx)
  /* Disable LPTIM and FMPI2C clock prescalers selection, only available for STM32F410xx and STM32F413_423xx devices */
  RCC->DCKCFGR2 = 0x00000000;
#endif /* STM32F410xx || STM32F413_423xx */  
}
 80005ca:	bf00      	nop
 80005cc:	46bd      	mov	sp, r7
 80005ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d2:	4770      	bx	lr
 80005d4:	40023800 	.word	0x40023800
 80005d8:	24003010 	.word	0x24003010
 80005dc:	20003000 	.word	0x20003000
 80005e0:	24003000 	.word	0x24003000

080005e4 <RCC_HSEConfig>:
  *            @arg RCC_HSE_ON: turn ON the HSE oscillator
  *            @arg RCC_HSE_Bypass: HSE oscillator bypassed with external clock
  * @retval None
  */
void RCC_HSEConfig(uint8_t RCC_HSE)
{
 80005e4:	b480      	push	{r7}
 80005e6:	b083      	sub	sp, #12
 80005e8:	af00      	add	r7, sp, #0
 80005ea:	4603      	mov	r3, r0
 80005ec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_RCC_HSE(RCC_HSE));

  /* Reset HSEON and HSEBYP bits before configuring the HSE ------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE_OFF;
 80005ee:	4b06      	ldr	r3, [pc, #24]	; (8000608 <RCC_HSEConfig+0x24>)
 80005f0:	2200      	movs	r2, #0
 80005f2:	701a      	strb	r2, [r3, #0]

  /* Set the new HSE configuration -------------------------------------------*/
  *(__IO uint8_t *) CR_BYTE3_ADDRESS = RCC_HSE;
 80005f4:	4a04      	ldr	r2, [pc, #16]	; (8000608 <RCC_HSEConfig+0x24>)
 80005f6:	79fb      	ldrb	r3, [r7, #7]
 80005f8:	7013      	strb	r3, [r2, #0]
}
 80005fa:	bf00      	nop
 80005fc:	370c      	adds	r7, #12
 80005fe:	46bd      	mov	sp, r7
 8000600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000604:	4770      	bx	lr
 8000606:	bf00      	nop
 8000608:	40023802 	.word	0x40023802

0800060c <RCC_WaitForHSEStartUp>:
  * @retval An ErrorStatus enumeration value:
  *          - SUCCESS: HSE oscillator is stable and ready to use
  *          - ERROR: HSE oscillator not yet ready
  */
ErrorStatus RCC_WaitForHSEStartUp(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b082      	sub	sp, #8
 8000610:	af00      	add	r7, sp, #0
  __IO uint32_t startupcounter = 0;
 8000612:	2300      	movs	r3, #0
 8000614:	603b      	str	r3, [r7, #0]
  ErrorStatus status = ERROR;
 8000616:	2300      	movs	r3, #0
 8000618:	71fb      	strb	r3, [r7, #7]
  FlagStatus hsestatus = RESET;
 800061a:	2300      	movs	r3, #0
 800061c:	71bb      	strb	r3, [r7, #6]
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    hsestatus = RCC_GetFlagStatus(RCC_FLAG_HSERDY);
 800061e:	2031      	movs	r0, #49	; 0x31
 8000620:	f000 fa08 	bl	8000a34 <RCC_GetFlagStatus>
 8000624:	4603      	mov	r3, r0
 8000626:	71bb      	strb	r3, [r7, #6]
    startupcounter++;
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	3301      	adds	r3, #1
 800062c:	603b      	str	r3, [r7, #0]
  } while((startupcounter != HSE_STARTUP_TIMEOUT) && (hsestatus == RESET));
 800062e:	683b      	ldr	r3, [r7, #0]
 8000630:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8000634:	d002      	beq.n	800063c <RCC_WaitForHSEStartUp+0x30>
 8000636:	79bb      	ldrb	r3, [r7, #6]
 8000638:	2b00      	cmp	r3, #0
 800063a:	d0f0      	beq.n	800061e <RCC_WaitForHSEStartUp+0x12>

  if (RCC_GetFlagStatus(RCC_FLAG_HSERDY) != RESET)
 800063c:	2031      	movs	r0, #49	; 0x31
 800063e:	f000 f9f9 	bl	8000a34 <RCC_GetFlagStatus>
 8000642:	4603      	mov	r3, r0
 8000644:	2b00      	cmp	r3, #0
 8000646:	d002      	beq.n	800064e <RCC_WaitForHSEStartUp+0x42>
  {
    status = SUCCESS;
 8000648:	2301      	movs	r3, #1
 800064a:	71fb      	strb	r3, [r7, #7]
 800064c:	e001      	b.n	8000652 <RCC_WaitForHSEStartUp+0x46>
  }
  else
  {
    status = ERROR;
 800064e:	2300      	movs	r3, #0
 8000650:	71fb      	strb	r3, [r7, #7]
  }
  return (status);
 8000652:	79fb      	ldrb	r3, [r7, #7]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3708      	adds	r7, #8
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <RCC_HSICmd>:
  * @note   When the HSI is stopped, HSIRDY flag goes low after 6 HSI oscillator
  *         clock cycles.  
  * @retval None
  */
void RCC_HSICmd(FunctionalState NewState)
{
 800065c:	b480      	push	{r7}
 800065e:	b083      	sub	sp, #12
 8000660:	af00      	add	r7, sp, #0
 8000662:	4603      	mov	r3, r0
 8000664:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  *(__IO uint32_t *) CR_HSION_BB = (uint32_t)NewState;
 8000666:	4a04      	ldr	r2, [pc, #16]	; (8000678 <RCC_HSICmd+0x1c>)
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	6013      	str	r3, [r2, #0]
}
 800066c:	bf00      	nop
 800066e:	370c      	adds	r7, #12
 8000670:	46bd      	mov	sp, r7
 8000672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000676:	4770      	bx	lr
 8000678:	42470000 	.word	0x42470000

0800067c <RCC_ClockSecuritySystemCmd>:
  * @param  NewState: new state of the Clock Security System.
  *         This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_ClockSecuritySystemCmd(FunctionalState NewState)
{
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  *(__IO uint32_t *) CR_CSSON_BB = (uint32_t)NewState;
 8000686:	4a04      	ldr	r2, [pc, #16]	; (8000698 <RCC_ClockSecuritySystemCmd+0x1c>)
 8000688:	79fb      	ldrb	r3, [r7, #7]
 800068a:	6013      	str	r3, [r2, #0]
}
 800068c:	bf00      	nop
 800068e:	370c      	adds	r7, #12
 8000690:	46bd      	mov	sp, r7
 8000692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000696:	4770      	bx	lr
 8000698:	4247004c 	.word	0x4247004c

0800069c <RCC_SYSCLKConfig>:
  *            @arg RCC_SYSCLKSource_PLLCLK: PLL selected as system clock source (RCC_SYSCLKSource_PLLPCLK for STM32F446xx devices)
  *            @arg RCC_SYSCLKSource_PLLRCLK: PLL R selected as system clock source only for STM32F412xG, STM32F413_423xx and STM32F446xx devices
  * @retval None
  */
void RCC_SYSCLKConfig(uint32_t RCC_SYSCLKSource)
{
 800069c:	b480      	push	{r7}
 800069e:	b085      	sub	sp, #20
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80006a4:	2300      	movs	r3, #0
 80006a6:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_SYSCLK_SOURCE(RCC_SYSCLKSource));

  tmpreg = RCC->CFGR;
 80006a8:	4b09      	ldr	r3, [pc, #36]	; (80006d0 <RCC_SYSCLKConfig+0x34>)
 80006aa:	689b      	ldr	r3, [r3, #8]
 80006ac:	60fb      	str	r3, [r7, #12]

  /* Clear SW[1:0] bits */
  tmpreg &= ~RCC_CFGR_SW;
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	f023 0303 	bic.w	r3, r3, #3
 80006b4:	60fb      	str	r3, [r7, #12]

  /* Set SW[1:0] bits according to RCC_SYSCLKSource value */
  tmpreg |= RCC_SYSCLKSource;
 80006b6:	68fa      	ldr	r2, [r7, #12]
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	4313      	orrs	r3, r2
 80006bc:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006be:	4a04      	ldr	r2, [pc, #16]	; (80006d0 <RCC_SYSCLKConfig+0x34>)
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	6093      	str	r3, [r2, #8]
}
 80006c4:	bf00      	nop
 80006c6:	3714      	adds	r7, #20
 80006c8:	46bd      	mov	sp, r7
 80006ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006ce:	4770      	bx	lr
 80006d0:	40023800 	.word	0x40023800

080006d4 <RCC_HCLKConfig>:
  *            @arg RCC_SYSCLK_Div256: AHB clock = SYSCLK/256
  *            @arg RCC_SYSCLK_Div512: AHB clock = SYSCLK/512
  * @retval None
  */
void RCC_HCLKConfig(uint32_t RCC_SYSCLK)
{
 80006d4:	b480      	push	{r7}
 80006d6:	b085      	sub	sp, #20
 80006d8:	af00      	add	r7, sp, #0
 80006da:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 80006dc:	2300      	movs	r3, #0
 80006de:	60fb      	str	r3, [r7, #12]
  
  /* Check the parameters */
  assert_param(IS_RCC_HCLK(RCC_SYSCLK));

  tmpreg = RCC->CFGR;
 80006e0:	4b09      	ldr	r3, [pc, #36]	; (8000708 <RCC_HCLKConfig+0x34>)
 80006e2:	689b      	ldr	r3, [r3, #8]
 80006e4:	60fb      	str	r3, [r7, #12]

  /* Clear HPRE[3:0] bits */
  tmpreg &= ~RCC_CFGR_HPRE;
 80006e6:	68fb      	ldr	r3, [r7, #12]
 80006e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80006ec:	60fb      	str	r3, [r7, #12]

  /* Set HPRE[3:0] bits according to RCC_SYSCLK value */
  tmpreg |= RCC_SYSCLK;
 80006ee:	68fa      	ldr	r2, [r7, #12]
 80006f0:	687b      	ldr	r3, [r7, #4]
 80006f2:	4313      	orrs	r3, r2
 80006f4:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 80006f6:	4a04      	ldr	r2, [pc, #16]	; (8000708 <RCC_HCLKConfig+0x34>)
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	6093      	str	r3, [r2, #8]
}
 80006fc:	bf00      	nop
 80006fe:	3714      	adds	r7, #20
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr
 8000708:	40023800 	.word	0x40023800

0800070c <RCC_PCLK1Config>:
  *            @arg RCC_HCLK_Div8:  APB1 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB1 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK1Config(uint32_t RCC_HCLK)
{
 800070c:	b480      	push	{r7}
 800070e:	b085      	sub	sp, #20
 8000710:	af00      	add	r7, sp, #0
 8000712:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 8000714:	2300      	movs	r3, #0
 8000716:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000718:	4b09      	ldr	r3, [pc, #36]	; (8000740 <RCC_PCLK1Config+0x34>)
 800071a:	689b      	ldr	r3, [r3, #8]
 800071c:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE1[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE1;
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 8000724:	60fb      	str	r3, [r7, #12]

  /* Set PPRE1[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK;
 8000726:	68fa      	ldr	r2, [r7, #12]
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	4313      	orrs	r3, r2
 800072c:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 800072e:	4a04      	ldr	r2, [pc, #16]	; (8000740 <RCC_PCLK1Config+0x34>)
 8000730:	68fb      	ldr	r3, [r7, #12]
 8000732:	6093      	str	r3, [r2, #8]
}
 8000734:	bf00      	nop
 8000736:	3714      	adds	r7, #20
 8000738:	46bd      	mov	sp, r7
 800073a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800073e:	4770      	bx	lr
 8000740:	40023800 	.word	0x40023800

08000744 <RCC_PCLK2Config>:
  *            @arg RCC_HCLK_Div8:  APB2 clock = HCLK/8
  *            @arg RCC_HCLK_Div16: APB2 clock = HCLK/16
  * @retval None
  */
void RCC_PCLK2Config(uint32_t RCC_HCLK)
{
 8000744:	b480      	push	{r7}
 8000746:	b085      	sub	sp, #20
 8000748:	af00      	add	r7, sp, #0
 800074a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg = 0;
 800074c:	2300      	movs	r3, #0
 800074e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PCLK(RCC_HCLK));

  tmpreg = RCC->CFGR;
 8000750:	4b0a      	ldr	r3, [pc, #40]	; (800077c <RCC_PCLK2Config+0x38>)
 8000752:	689b      	ldr	r3, [r3, #8]
 8000754:	60fb      	str	r3, [r7, #12]

  /* Clear PPRE2[2:0] bits */
  tmpreg &= ~RCC_CFGR_PPRE2;
 8000756:	68fb      	ldr	r3, [r7, #12]
 8000758:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800075c:	60fb      	str	r3, [r7, #12]

  /* Set PPRE2[2:0] bits according to RCC_HCLK value */
  tmpreg |= RCC_HCLK << 3;
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	00db      	lsls	r3, r3, #3
 8000762:	68fa      	ldr	r2, [r7, #12]
 8000764:	4313      	orrs	r3, r2
 8000766:	60fb      	str	r3, [r7, #12]

  /* Store the new value */
  RCC->CFGR = tmpreg;
 8000768:	4a04      	ldr	r2, [pc, #16]	; (800077c <RCC_PCLK2Config+0x38>)
 800076a:	68fb      	ldr	r3, [r7, #12]
 800076c:	6093      	str	r3, [r2, #8]
}
 800076e:	bf00      	nop
 8000770:	3714      	adds	r7, #20
 8000772:	46bd      	mov	sp, r7
 8000774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000778:	4770      	bx	lr
 800077a:	bf00      	nop
 800077c:	40023800 	.word	0x40023800

08000780 <RCC_GetClocksFreq>:
  *         configuration based on this function will be incorrect.
  *    
  * @retval None
  */
void RCC_GetClocksFreq(RCC_ClocksTypeDef* RCC_Clocks)
{
 8000780:	b480      	push	{r7}
 8000782:	b08b      	sub	sp, #44	; 0x2c
 8000784:	af00      	add	r7, sp, #0
 8000786:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0, presc = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8000788:	2300      	movs	r3, #0
 800078a:	623b      	str	r3, [r7, #32]
 800078c:	2300      	movs	r3, #0
 800078e:	61fb      	str	r3, [r7, #28]
 8000790:	2300      	movs	r3, #0
 8000792:	627b      	str	r3, [r7, #36]	; 0x24
 8000794:	2302      	movs	r3, #2
 8000796:	61bb      	str	r3, [r7, #24]
 8000798:	2300      	movs	r3, #0
 800079a:	617b      	str	r3, [r7, #20]
 800079c:	2302      	movs	r3, #2
 800079e:	613b      	str	r3, [r7, #16]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 80007a0:	2302      	movs	r3, #2
 80007a2:	60fb      	str	r3, [r7, #12]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 80007a4:	4b6f      	ldr	r3, [pc, #444]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 80007a6:	689b      	ldr	r3, [r3, #8]
 80007a8:	f003 030c 	and.w	r3, r3, #12
 80007ac:	623b      	str	r3, [r7, #32]
  
  switch (tmp)
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	2b0c      	cmp	r3, #12
 80007b2:	f200 8091 	bhi.w	80008d8 <RCC_GetClocksFreq+0x158>
 80007b6:	a201      	add	r2, pc, #4	; (adr r2, 80007bc <RCC_GetClocksFreq+0x3c>)
 80007b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80007bc:	080007f1 	.word	0x080007f1
 80007c0:	080008d9 	.word	0x080008d9
 80007c4:	080008d9 	.word	0x080008d9
 80007c8:	080008d9 	.word	0x080008d9
 80007cc:	080007f9 	.word	0x080007f9
 80007d0:	080008d9 	.word	0x080008d9
 80007d4:	080008d9 	.word	0x080008d9
 80007d8:	080008d9 	.word	0x080008d9
 80007dc:	08000801 	.word	0x08000801
 80007e0:	080008d9 	.word	0x080008d9
 80007e4:	080008d9 	.word	0x080008d9
 80007e8:	080008d9 	.word	0x080008d9
 80007ec:	0800086d 	.word	0x0800086d
  {
  case 0x00:  /* HSI used as system clock source */
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	4a5d      	ldr	r2, [pc, #372]	; (8000968 <RCC_GetClocksFreq+0x1e8>)
 80007f4:	601a      	str	r2, [r3, #0]
    break;
 80007f6:	e073      	b.n	80008e0 <RCC_GetClocksFreq+0x160>
  case 0x04:  /* HSE used as system clock  source */
    RCC_Clocks->SYSCLK_Frequency = HSE_VALUE;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	4a5c      	ldr	r2, [pc, #368]	; (800096c <RCC_GetClocksFreq+0x1ec>)
 80007fc:	601a      	str	r2, [r3, #0]
    break;
 80007fe:	e06f      	b.n	80008e0 <RCC_GetClocksFreq+0x160>
  case 0x08:  /* PLL P used as system clock  source */
    
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLP
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8000800:	4b58      	ldr	r3, [pc, #352]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 8000802:	685b      	ldr	r3, [r3, #4]
 8000804:	0d9b      	lsrs	r3, r3, #22
 8000806:	f003 0301 	and.w	r3, r3, #1
 800080a:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800080c:	4b55      	ldr	r3, [pc, #340]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 800080e:	685b      	ldr	r3, [r3, #4]
 8000810:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000814:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000816:	697b      	ldr	r3, [r7, #20]
 8000818:	2b00      	cmp	r3, #0
 800081a:	d00c      	beq.n	8000836 <RCC_GetClocksFreq+0xb6>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 800081c:	4a53      	ldr	r2, [pc, #332]	; (800096c <RCC_GetClocksFreq+0x1ec>)
 800081e:	693b      	ldr	r3, [r7, #16]
 8000820:	fbb2 f3f3 	udiv	r3, r2, r3
 8000824:	4a4f      	ldr	r2, [pc, #316]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 8000826:	6852      	ldr	r2, [r2, #4]
 8000828:	0992      	lsrs	r2, r2, #6
 800082a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800082e:	fb02 f303 	mul.w	r3, r2, r3
 8000832:	627b      	str	r3, [r7, #36]	; 0x24
 8000834:	e00b      	b.n	800084e <RCC_GetClocksFreq+0xce>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8000836:	4a4c      	ldr	r2, [pc, #304]	; (8000968 <RCC_GetClocksFreq+0x1e8>)
 8000838:	693b      	ldr	r3, [r7, #16]
 800083a:	fbb2 f3f3 	udiv	r3, r2, r3
 800083e:	4a49      	ldr	r2, [pc, #292]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 8000840:	6852      	ldr	r2, [r2, #4]
 8000842:	0992      	lsrs	r2, r2, #6
 8000844:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000848:	fb02 f303 	mul.w	r3, r2, r3
 800084c:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 800084e:	4b45      	ldr	r3, [pc, #276]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 8000850:	685b      	ldr	r3, [r3, #4]
 8000852:	0c1b      	lsrs	r3, r3, #16
 8000854:	f003 0303 	and.w	r3, r3, #3
 8000858:	3301      	adds	r3, #1
 800085a:	005b      	lsls	r3, r3, #1
 800085c:	61bb      	str	r3, [r7, #24]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllp;
 800085e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000860:	69bb      	ldr	r3, [r7, #24]
 8000862:	fbb2 f2f3 	udiv	r2, r2, r3
 8000866:	687b      	ldr	r3, [r7, #4]
 8000868:	601a      	str	r2, [r3, #0]
    break;
 800086a:	e039      	b.n	80008e0 <RCC_GetClocksFreq+0x160>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
  case 0x0C:  /* PLL R used as system clock  source */
    /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */    
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 800086c:	4b3d      	ldr	r3, [pc, #244]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 800086e:	685b      	ldr	r3, [r3, #4]
 8000870:	0d9b      	lsrs	r3, r3, #22
 8000872:	f003 0301 	and.w	r3, r3, #1
 8000876:	617b      	str	r3, [r7, #20]
    pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8000878:	4b3a      	ldr	r3, [pc, #232]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 800087a:	685b      	ldr	r3, [r3, #4]
 800087c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8000880:	613b      	str	r3, [r7, #16]
    
    if (pllsource != 0)
 8000882:	697b      	ldr	r3, [r7, #20]
 8000884:	2b00      	cmp	r3, #0
 8000886:	d00c      	beq.n	80008a2 <RCC_GetClocksFreq+0x122>
    {
      /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8000888:	4a38      	ldr	r2, [pc, #224]	; (800096c <RCC_GetClocksFreq+0x1ec>)
 800088a:	693b      	ldr	r3, [r7, #16]
 800088c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000890:	4a34      	ldr	r2, [pc, #208]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 8000892:	6852      	ldr	r2, [r2, #4]
 8000894:	0992      	lsrs	r2, r2, #6
 8000896:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800089a:	fb02 f303 	mul.w	r3, r2, r3
 800089e:	627b      	str	r3, [r7, #36]	; 0x24
 80008a0:	e00b      	b.n	80008ba <RCC_GetClocksFreq+0x13a>
    }
    else
    {
      /* HSI used as PLL clock source */
      pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 80008a2:	4a31      	ldr	r2, [pc, #196]	; (8000968 <RCC_GetClocksFreq+0x1e8>)
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	fbb2 f3f3 	udiv	r3, r2, r3
 80008aa:	4a2e      	ldr	r2, [pc, #184]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 80008ac:	6852      	ldr	r2, [r2, #4]
 80008ae:	0992      	lsrs	r2, r2, #6
 80008b0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80008b4:	fb02 f303 	mul.w	r3, r2, r3
 80008b8:	627b      	str	r3, [r7, #36]	; 0x24
    }
    
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 80008ba:	4b2a      	ldr	r3, [pc, #168]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 80008bc:	685b      	ldr	r3, [r3, #4]
 80008be:	0f1b      	lsrs	r3, r3, #28
 80008c0:	f003 0307 	and.w	r3, r3, #7
 80008c4:	3301      	adds	r3, #1
 80008c6:	005b      	lsls	r3, r3, #1
 80008c8:	60fb      	str	r3, [r7, #12]
    RCC_Clocks->SYSCLK_Frequency = pllvco/pllr;    
 80008ca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80008cc:	68fb      	ldr	r3, [r7, #12]
 80008ce:	fbb2 f2f3 	udiv	r2, r2, r3
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	601a      	str	r2, [r3, #0]
    break;
 80008d6:	e003      	b.n	80008e0 <RCC_GetClocksFreq+0x160>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    
  default:
    RCC_Clocks->SYSCLK_Frequency = HSI_VALUE;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	4a23      	ldr	r2, [pc, #140]	; (8000968 <RCC_GetClocksFreq+0x1e8>)
 80008dc:	601a      	str	r2, [r3, #0]
    break;
 80008de:	bf00      	nop
  }
  /* Compute HCLK, PCLK1 and PCLK2 clocks frequencies ------------------------*/
  
  /* Get HCLK prescaler */
  tmp = RCC->CFGR & RCC_CFGR_HPRE;
 80008e0:	4b20      	ldr	r3, [pc, #128]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 80008e2:	689b      	ldr	r3, [r3, #8]
 80008e4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80008e8:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 4;
 80008ea:	6a3b      	ldr	r3, [r7, #32]
 80008ec:	091b      	lsrs	r3, r3, #4
 80008ee:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 80008f0:	4a1f      	ldr	r2, [pc, #124]	; (8000970 <RCC_GetClocksFreq+0x1f0>)
 80008f2:	6a3b      	ldr	r3, [r7, #32]
 80008f4:	4413      	add	r3, r2
 80008f6:	781b      	ldrb	r3, [r3, #0]
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	61fb      	str	r3, [r7, #28]
  /* HCLK clock frequency */
  RCC_Clocks->HCLK_Frequency = RCC_Clocks->SYSCLK_Frequency >> presc;
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	681a      	ldr	r2, [r3, #0]
 8000900:	69fb      	ldr	r3, [r7, #28]
 8000902:	40da      	lsrs	r2, r3
 8000904:	687b      	ldr	r3, [r7, #4]
 8000906:	605a      	str	r2, [r3, #4]

  /* Get PCLK1 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE1;
 8000908:	4b16      	ldr	r3, [pc, #88]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 800090a:	689b      	ldr	r3, [r3, #8]
 800090c:	f403 53e0 	and.w	r3, r3, #7168	; 0x1c00
 8000910:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 10;
 8000912:	6a3b      	ldr	r3, [r7, #32]
 8000914:	0a9b      	lsrs	r3, r3, #10
 8000916:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000918:	4a15      	ldr	r2, [pc, #84]	; (8000970 <RCC_GetClocksFreq+0x1f0>)
 800091a:	6a3b      	ldr	r3, [r7, #32]
 800091c:	4413      	add	r3, r2
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	b2db      	uxtb	r3, r3
 8000922:	61fb      	str	r3, [r7, #28]
  /* PCLK1 clock frequency */
  RCC_Clocks->PCLK1_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	685a      	ldr	r2, [r3, #4]
 8000928:	69fb      	ldr	r3, [r7, #28]
 800092a:	40da      	lsrs	r2, r3
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	609a      	str	r2, [r3, #8]

  /* Get PCLK2 prescaler */
  tmp = RCC->CFGR & RCC_CFGR_PPRE2;
 8000930:	4b0c      	ldr	r3, [pc, #48]	; (8000964 <RCC_GetClocksFreq+0x1e4>)
 8000932:	689b      	ldr	r3, [r3, #8]
 8000934:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 8000938:	623b      	str	r3, [r7, #32]
  tmp = tmp >> 13;
 800093a:	6a3b      	ldr	r3, [r7, #32]
 800093c:	0b5b      	lsrs	r3, r3, #13
 800093e:	623b      	str	r3, [r7, #32]
  presc = APBAHBPrescTable[tmp];
 8000940:	4a0b      	ldr	r2, [pc, #44]	; (8000970 <RCC_GetClocksFreq+0x1f0>)
 8000942:	6a3b      	ldr	r3, [r7, #32]
 8000944:	4413      	add	r3, r2
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	b2db      	uxtb	r3, r3
 800094a:	61fb      	str	r3, [r7, #28]
  /* PCLK2 clock frequency */
  RCC_Clocks->PCLK2_Frequency = RCC_Clocks->HCLK_Frequency >> presc;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	685a      	ldr	r2, [r3, #4]
 8000950:	69fb      	ldr	r3, [r7, #28]
 8000952:	40da      	lsrs	r2, r3
 8000954:	687b      	ldr	r3, [r7, #4]
 8000956:	60da      	str	r2, [r3, #12]
}
 8000958:	bf00      	nop
 800095a:	372c      	adds	r7, #44	; 0x2c
 800095c:	46bd      	mov	sp, r7
 800095e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000962:	4770      	bx	lr
 8000964:	40023800 	.word	0x40023800
 8000968:	00f42400 	.word	0x00f42400
 800096c:	007a1200 	.word	0x007a1200
 8000970:	20000000 	.word	0x20000000

08000974 <RCC_AHB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_AHB1PeriphClockCmd(uint32_t RCC_AHB1Periph, FunctionalState NewState)
{
 8000974:	b480      	push	{r7}
 8000976:	b083      	sub	sp, #12
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_AHB1_CLOCK_PERIPH(RCC_AHB1Periph));

  assert_param(IS_FUNCTIONAL_STATE(NewState));
  if (NewState != DISABLE)
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b00      	cmp	r3, #0
 8000984:	d006      	beq.n	8000994 <RCC_AHB1PeriphClockCmd+0x20>
  {
    RCC->AHB1ENR |= RCC_AHB1Periph;
 8000986:	4b0a      	ldr	r3, [pc, #40]	; (80009b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000988:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800098a:	4909      	ldr	r1, [pc, #36]	; (80009b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	4313      	orrs	r3, r2
 8000990:	630b      	str	r3, [r1, #48]	; 0x30
  }
  else
  {
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
  }
}
 8000992:	e006      	b.n	80009a2 <RCC_AHB1PeriphClockCmd+0x2e>
    RCC->AHB1ENR &= ~RCC_AHB1Periph;
 8000994:	4b06      	ldr	r3, [pc, #24]	; (80009b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 8000996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	43db      	mvns	r3, r3
 800099c:	4904      	ldr	r1, [pc, #16]	; (80009b0 <RCC_AHB1PeriphClockCmd+0x3c>)
 800099e:	4013      	ands	r3, r2
 80009a0:	630b      	str	r3, [r1, #48]	; 0x30
}
 80009a2:	bf00      	nop
 80009a4:	370c      	adds	r7, #12
 80009a6:	46bd      	mov	sp, r7
 80009a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ac:	4770      	bx	lr
 80009ae:	bf00      	nop
 80009b0:	40023800 	.word	0x40023800

080009b4 <RCC_APB1PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB1PeriphClockCmd(uint32_t RCC_APB1Periph, FunctionalState NewState)
{
 80009b4:	b480      	push	{r7}
 80009b6:	b083      	sub	sp, #12
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
 80009bc:	460b      	mov	r3, r1
 80009be:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB1_PERIPH(RCC_APB1Periph));  
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 80009c0:	78fb      	ldrb	r3, [r7, #3]
 80009c2:	2b00      	cmp	r3, #0
 80009c4:	d006      	beq.n	80009d4 <RCC_APB1PeriphClockCmd+0x20>
  {
    RCC->APB1ENR |= RCC_APB1Periph;
 80009c6:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <RCC_APB1PeriphClockCmd+0x3c>)
 80009c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ca:	4909      	ldr	r1, [pc, #36]	; (80009f0 <RCC_APB1PeriphClockCmd+0x3c>)
 80009cc:	687b      	ldr	r3, [r7, #4]
 80009ce:	4313      	orrs	r3, r2
 80009d0:	640b      	str	r3, [r1, #64]	; 0x40
  }
  else
  {
    RCC->APB1ENR &= ~RCC_APB1Periph;
  }
}
 80009d2:	e006      	b.n	80009e2 <RCC_APB1PeriphClockCmd+0x2e>
    RCC->APB1ENR &= ~RCC_APB1Periph;
 80009d4:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <RCC_APB1PeriphClockCmd+0x3c>)
 80009d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	43db      	mvns	r3, r3
 80009dc:	4904      	ldr	r1, [pc, #16]	; (80009f0 <RCC_APB1PeriphClockCmd+0x3c>)
 80009de:	4013      	ands	r3, r2
 80009e0:	640b      	str	r3, [r1, #64]	; 0x40
}
 80009e2:	bf00      	nop
 80009e4:	370c      	adds	r7, #12
 80009e6:	46bd      	mov	sp, r7
 80009e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ec:	4770      	bx	lr
 80009ee:	bf00      	nop
 80009f0:	40023800 	.word	0x40023800

080009f4 <RCC_APB2PeriphClockCmd>:
  * @param  NewState: new state of the specified peripheral clock.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void RCC_APB2PeriphClockCmd(uint32_t RCC_APB2Periph, FunctionalState NewState)
{
 80009f4:	b480      	push	{r7}
 80009f6:	b083      	sub	sp, #12
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
 80009fc:	460b      	mov	r3, r1
 80009fe:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_RCC_APB2_PERIPH(RCC_APB2Periph));
  assert_param(IS_FUNCTIONAL_STATE(NewState));

  if (NewState != DISABLE)
 8000a00:	78fb      	ldrb	r3, [r7, #3]
 8000a02:	2b00      	cmp	r3, #0
 8000a04:	d006      	beq.n	8000a14 <RCC_APB2PeriphClockCmd+0x20>
  {
    RCC->APB2ENR |= RCC_APB2Periph;
 8000a06:	4b0a      	ldr	r3, [pc, #40]	; (8000a30 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a08:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a0a:	4909      	ldr	r1, [pc, #36]	; (8000a30 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a0c:	687b      	ldr	r3, [r7, #4]
 8000a0e:	4313      	orrs	r3, r2
 8000a10:	644b      	str	r3, [r1, #68]	; 0x44
  }
  else
  {
    RCC->APB2ENR &= ~RCC_APB2Periph;
  }
}
 8000a12:	e006      	b.n	8000a22 <RCC_APB2PeriphClockCmd+0x2e>
    RCC->APB2ENR &= ~RCC_APB2Periph;
 8000a14:	4b06      	ldr	r3, [pc, #24]	; (8000a30 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a16:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8000a18:	687b      	ldr	r3, [r7, #4]
 8000a1a:	43db      	mvns	r3, r3
 8000a1c:	4904      	ldr	r1, [pc, #16]	; (8000a30 <RCC_APB2PeriphClockCmd+0x3c>)
 8000a1e:	4013      	ands	r3, r2
 8000a20:	644b      	str	r3, [r1, #68]	; 0x44
}
 8000a22:	bf00      	nop
 8000a24:	370c      	adds	r7, #12
 8000a26:	46bd      	mov	sp, r7
 8000a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop
 8000a30:	40023800 	.word	0x40023800

08000a34 <RCC_GetFlagStatus>:
  *            @arg RCC_FLAG_WWDGRST: Window Watchdog reset
  *            @arg RCC_FLAG_LPWRRST: Low Power reset
  * @retval The new state of RCC_FLAG (SET or RESET).
  */
FlagStatus RCC_GetFlagStatus(uint8_t RCC_FLAG)
{
 8000a34:	b480      	push	{r7}
 8000a36:	b087      	sub	sp, #28
 8000a38:	af00      	add	r7, sp, #0
 8000a3a:	4603      	mov	r3, r0
 8000a3c:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	60fb      	str	r3, [r7, #12]
  uint32_t statusreg = 0;
 8000a42:	2300      	movs	r3, #0
 8000a44:	617b      	str	r3, [r7, #20]
  FlagStatus bitstatus = RESET;
 8000a46:	2300      	movs	r3, #0
 8000a48:	74fb      	strb	r3, [r7, #19]

  /* Check the parameters */
  assert_param(IS_RCC_FLAG(RCC_FLAG));

  /* Get the RCC register index */
  tmp = RCC_FLAG >> 5;
 8000a4a:	79fb      	ldrb	r3, [r7, #7]
 8000a4c:	095b      	lsrs	r3, r3, #5
 8000a4e:	b2db      	uxtb	r3, r3
 8000a50:	60fb      	str	r3, [r7, #12]
  if (tmp == 1)               /* The flag to check is in CR register */
 8000a52:	68fb      	ldr	r3, [r7, #12]
 8000a54:	2b01      	cmp	r3, #1
 8000a56:	d103      	bne.n	8000a60 <RCC_GetFlagStatus+0x2c>
  {
    statusreg = RCC->CR;
 8000a58:	4b12      	ldr	r3, [pc, #72]	; (8000aa4 <RCC_GetFlagStatus+0x70>)
 8000a5a:	681b      	ldr	r3, [r3, #0]
 8000a5c:	617b      	str	r3, [r7, #20]
 8000a5e:	e009      	b.n	8000a74 <RCC_GetFlagStatus+0x40>
  }
  else if (tmp == 2)          /* The flag to check is in BDCR register */
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2b02      	cmp	r3, #2
 8000a64:	d103      	bne.n	8000a6e <RCC_GetFlagStatus+0x3a>
  {
    statusreg = RCC->BDCR;
 8000a66:	4b0f      	ldr	r3, [pc, #60]	; (8000aa4 <RCC_GetFlagStatus+0x70>)
 8000a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8000a6a:	617b      	str	r3, [r7, #20]
 8000a6c:	e002      	b.n	8000a74 <RCC_GetFlagStatus+0x40>
  }
  else                       /* The flag to check is in CSR register */
  {
    statusreg = RCC->CSR;
 8000a6e:	4b0d      	ldr	r3, [pc, #52]	; (8000aa4 <RCC_GetFlagStatus+0x70>)
 8000a70:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8000a72:	617b      	str	r3, [r7, #20]
  }

  /* Get the flag position */
  tmp = RCC_FLAG & FLAG_MASK;
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	f003 031f 	and.w	r3, r3, #31
 8000a7a:	60fb      	str	r3, [r7, #12]
  if ((statusreg & ((uint32_t)1 << tmp)) != (uint32_t)RESET)
 8000a7c:	697a      	ldr	r2, [r7, #20]
 8000a7e:	68fb      	ldr	r3, [r7, #12]
 8000a80:	fa22 f303 	lsr.w	r3, r2, r3
 8000a84:	f003 0301 	and.w	r3, r3, #1
 8000a88:	2b00      	cmp	r3, #0
 8000a8a:	d002      	beq.n	8000a92 <RCC_GetFlagStatus+0x5e>
  {
    bitstatus = SET;
 8000a8c:	2301      	movs	r3, #1
 8000a8e:	74fb      	strb	r3, [r7, #19]
 8000a90:	e001      	b.n	8000a96 <RCC_GetFlagStatus+0x62>
  }
  else
  {
    bitstatus = RESET;
 8000a92:	2300      	movs	r3, #0
 8000a94:	74fb      	strb	r3, [r7, #19]
  }
  /* Return the flag status */
  return bitstatus;
 8000a96:	7cfb      	ldrb	r3, [r7, #19]
}
 8000a98:	4618      	mov	r0, r3
 8000a9a:	371c      	adds	r7, #28
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa2:	4770      	bx	lr
 8000aa4:	40023800 	.word	0x40023800

08000aa8 <SYSCFG_EXTILineConfig>:
  *           be (0..7) for STM32F42xxx/43xxx devices. 
  *             
  * @retval None
  */
void SYSCFG_EXTILineConfig(uint8_t EXTI_PortSourceGPIOx, uint8_t EXTI_PinSourcex)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4603      	mov	r3, r0
 8000ab0:	460a      	mov	r2, r1
 8000ab2:	71fb      	strb	r3, [r7, #7]
 8000ab4:	4613      	mov	r3, r2
 8000ab6:	71bb      	strb	r3, [r7, #6]
  uint32_t tmp = 0x00;
 8000ab8:	2300      	movs	r3, #0
 8000aba:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_EXTI_PORT_SOURCE(EXTI_PortSourceGPIOx));
  assert_param(IS_EXTI_PIN_SOURCE(EXTI_PinSourcex));

  tmp = ((uint32_t)0x0F) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03));
 8000abc:	79bb      	ldrb	r3, [r7, #6]
 8000abe:	f003 0303 	and.w	r3, r3, #3
 8000ac2:	009b      	lsls	r3, r3, #2
 8000ac4:	220f      	movs	r2, #15
 8000ac6:	fa02 f303 	lsl.w	r3, r2, r3
 8000aca:	60fb      	str	r3, [r7, #12]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] &= ~tmp;
 8000acc:	4a16      	ldr	r2, [pc, #88]	; (8000b28 <SYSCFG_EXTILineConfig+0x80>)
 8000ace:	79bb      	ldrb	r3, [r7, #6]
 8000ad0:	089b      	lsrs	r3, r3, #2
 8000ad2:	b2db      	uxtb	r3, r3
 8000ad4:	3302      	adds	r3, #2
 8000ad6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ada:	68fb      	ldr	r3, [r7, #12]
 8000adc:	43db      	mvns	r3, r3
 8000ade:	4812      	ldr	r0, [pc, #72]	; (8000b28 <SYSCFG_EXTILineConfig+0x80>)
 8000ae0:	79b9      	ldrb	r1, [r7, #6]
 8000ae2:	0889      	lsrs	r1, r1, #2
 8000ae4:	b2c9      	uxtb	r1, r1
 8000ae6:	401a      	ands	r2, r3
 8000ae8:	1c8b      	adds	r3, r1, #2
 8000aea:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
  SYSCFG->EXTICR[EXTI_PinSourcex >> 0x02] |= (((uint32_t)EXTI_PortSourceGPIOx) << (0x04 * (EXTI_PinSourcex & (uint8_t)0x03)));
 8000aee:	4a0e      	ldr	r2, [pc, #56]	; (8000b28 <SYSCFG_EXTILineConfig+0x80>)
 8000af0:	79bb      	ldrb	r3, [r7, #6]
 8000af2:	089b      	lsrs	r3, r3, #2
 8000af4:	b2db      	uxtb	r3, r3
 8000af6:	3302      	adds	r3, #2
 8000af8:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000afc:	79f9      	ldrb	r1, [r7, #7]
 8000afe:	79bb      	ldrb	r3, [r7, #6]
 8000b00:	f003 0303 	and.w	r3, r3, #3
 8000b04:	009b      	lsls	r3, r3, #2
 8000b06:	fa01 f303 	lsl.w	r3, r1, r3
 8000b0a:	4807      	ldr	r0, [pc, #28]	; (8000b28 <SYSCFG_EXTILineConfig+0x80>)
 8000b0c:	79b9      	ldrb	r1, [r7, #6]
 8000b0e:	0889      	lsrs	r1, r1, #2
 8000b10:	b2c9      	uxtb	r1, r1
 8000b12:	431a      	orrs	r2, r3
 8000b14:	1c8b      	adds	r3, r1, #2
 8000b16:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
}
 8000b1a:	bf00      	nop
 8000b1c:	3714      	adds	r7, #20
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b24:	4770      	bx	lr
 8000b26:	bf00      	nop
 8000b28:	40013800 	.word	0x40013800

08000b2c <USART_Init>:
  * @param  USART_InitStruct: pointer to a USART_InitTypeDef structure that contains
  *         the configuration information for the specified USART peripheral.
  * @retval None
  */
void USART_Init(USART_TypeDef* USARTx, USART_InitTypeDef* USART_InitStruct)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b08a      	sub	sp, #40	; 0x28
 8000b30:	af00      	add	r7, sp, #0
 8000b32:	6078      	str	r0, [r7, #4]
 8000b34:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0x00, apbclock = 0x00;
 8000b36:	2300      	movs	r3, #0
 8000b38:	627b      	str	r3, [r7, #36]	; 0x24
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	623b      	str	r3, [r7, #32]
  uint32_t integerdivider = 0x00;
 8000b3e:	2300      	movs	r3, #0
 8000b40:	61fb      	str	r3, [r7, #28]
  uint32_t fractionaldivider = 0x00;
 8000b42:	2300      	movs	r3, #0
 8000b44:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  }

/*---------------------------- USART CR2 Configuration -----------------------*/
  tmpreg = USARTx->CR2;
 8000b46:	687b      	ldr	r3, [r7, #4]
 8000b48:	8a1b      	ldrh	r3, [r3, #16]
 8000b4a:	b29b      	uxth	r3, r3
 8000b4c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear STOP[13:12] bits */
  tmpreg &= (uint32_t)~((uint32_t)USART_CR2_STOP);
 8000b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b50:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000b54:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Stop Bits, Clock, CPOL, CPHA and LastBit :
      Set STOP[13:12] bits according to USART_StopBits value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_StopBits;
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	88db      	ldrh	r3, [r3, #6]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b5e:	4313      	orrs	r3, r2
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  
  /* Write to USART CR2 */
  USARTx->CR2 = (uint16_t)tmpreg;
 8000b62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b64:	b29a      	uxth	r2, r3
 8000b66:	687b      	ldr	r3, [r7, #4]
 8000b68:	821a      	strh	r2, [r3, #16]

/*---------------------------- USART CR1 Configuration -----------------------*/
  tmpreg = USARTx->CR1;
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	899b      	ldrh	r3, [r3, #12]
 8000b6e:	b29b      	uxth	r3, r3
 8000b70:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear M, PCE, PS, TE and RE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR1_CLEAR_MASK);
 8000b72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b74:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8000b78:	f023 030c 	bic.w	r3, r3, #12
 8000b7c:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART Word Length, Parity and mode: 
     Set the M bits according to USART_WordLength value 
     Set PCE and PS bits according to USART_Parity value
     Set TE and RE bits according to USART_Mode value */
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b7e:	683b      	ldr	r3, [r7, #0]
 8000b80:	889a      	ldrh	r2, [r3, #4]
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	891b      	ldrh	r3, [r3, #8]
 8000b86:	4313      	orrs	r3, r2
 8000b88:	b29a      	uxth	r2, r3
            USART_InitStruct->USART_Mode;
 8000b8a:	683b      	ldr	r3, [r7, #0]
 8000b8c:	895b      	ldrh	r3, [r3, #10]
  tmpreg |= (uint32_t)USART_InitStruct->USART_WordLength | USART_InitStruct->USART_Parity |
 8000b8e:	4313      	orrs	r3, r2
 8000b90:	b29b      	uxth	r3, r3
 8000b92:	461a      	mov	r2, r3
 8000b94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b96:	4313      	orrs	r3, r2
 8000b98:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR1 */
  USARTx->CR1 = (uint16_t)tmpreg;
 8000b9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000b9c:	b29a      	uxth	r2, r3
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	819a      	strh	r2, [r3, #12]

/*---------------------------- USART CR3 Configuration -----------------------*/  
  tmpreg = USARTx->CR3;
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	8a9b      	ldrh	r3, [r3, #20]
 8000ba6:	b29b      	uxth	r3, r3
 8000ba8:	627b      	str	r3, [r7, #36]	; 0x24

  /* Clear CTSE and RTSE bits */
  tmpreg &= (uint32_t)~((uint32_t)CR3_CLEAR_MASK);
 8000baa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8000bb0:	627b      	str	r3, [r7, #36]	; 0x24

  /* Configure the USART HFC : 
      Set CTSE and RTSE bits according to USART_HardwareFlowControl value */
  tmpreg |= USART_InitStruct->USART_HardwareFlowControl;
 8000bb2:	683b      	ldr	r3, [r7, #0]
 8000bb4:	899b      	ldrh	r3, [r3, #12]
 8000bb6:	461a      	mov	r2, r3
 8000bb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bba:	4313      	orrs	r3, r2
 8000bbc:	627b      	str	r3, [r7, #36]	; 0x24

  /* Write to USART CR3 */
  USARTx->CR3 = (uint16_t)tmpreg;
 8000bbe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000bc0:	b29a      	uxth	r2, r3
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	829a      	strh	r2, [r3, #20]

/*---------------------------- USART BRR Configuration -----------------------*/
  /* Configure the USART Baud Rate */
  RCC_GetClocksFreq(&RCC_ClocksStatus);
 8000bc6:	f107 0308 	add.w	r3, r7, #8
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f7ff fdd8 	bl	8000780 <RCC_GetClocksFreq>

  if ((USARTx == USART1) || (USARTx == USART6))
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	4a30      	ldr	r2, [pc, #192]	; (8000c94 <USART_Init+0x168>)
 8000bd4:	4293      	cmp	r3, r2
 8000bd6:	d003      	beq.n	8000be0 <USART_Init+0xb4>
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	4a2f      	ldr	r2, [pc, #188]	; (8000c98 <USART_Init+0x16c>)
 8000bdc:	4293      	cmp	r3, r2
 8000bde:	d102      	bne.n	8000be6 <USART_Init+0xba>
  {
    apbclock = RCC_ClocksStatus.PCLK2_Frequency;
 8000be0:	697b      	ldr	r3, [r7, #20]
 8000be2:	623b      	str	r3, [r7, #32]
 8000be4:	e001      	b.n	8000bea <USART_Init+0xbe>
  }
  else
  {
    apbclock = RCC_ClocksStatus.PCLK1_Frequency;
 8000be6:	693b      	ldr	r3, [r7, #16]
 8000be8:	623b      	str	r3, [r7, #32]
  }
  
  /* Determine the integer part */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	899b      	ldrh	r3, [r3, #12]
 8000bee:	b29b      	uxth	r3, r3
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	da0c      	bge.n	8000c10 <USART_Init+0xe4>
  {
    /* Integer part computing in case Oversampling mode is 8 Samples */
    integerdivider = ((25 * apbclock) / (2 * (USART_InitStruct->USART_BaudRate)));    
 8000bf6:	6a3a      	ldr	r2, [r7, #32]
 8000bf8:	4613      	mov	r3, r2
 8000bfa:	009b      	lsls	r3, r3, #2
 8000bfc:	4413      	add	r3, r2
 8000bfe:	009a      	lsls	r2, r3, #2
 8000c00:	441a      	add	r2, r3
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	005b      	lsls	r3, r3, #1
 8000c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0c:	61fb      	str	r3, [r7, #28]
 8000c0e:	e00b      	b.n	8000c28 <USART_Init+0xfc>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    /* Integer part computing in case Oversampling mode is 16 Samples */
    integerdivider = ((25 * apbclock) / (4 * (USART_InitStruct->USART_BaudRate)));    
 8000c10:	6a3a      	ldr	r2, [r7, #32]
 8000c12:	4613      	mov	r3, r2
 8000c14:	009b      	lsls	r3, r3, #2
 8000c16:	4413      	add	r3, r2
 8000c18:	009a      	lsls	r2, r3, #2
 8000c1a:	441a      	add	r2, r3
 8000c1c:	683b      	ldr	r3, [r7, #0]
 8000c1e:	681b      	ldr	r3, [r3, #0]
 8000c20:	009b      	lsls	r3, r3, #2
 8000c22:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c26:	61fb      	str	r3, [r7, #28]
  }
  tmpreg = (integerdivider / 100) << 4;
 8000c28:	69fb      	ldr	r3, [r7, #28]
 8000c2a:	4a1c      	ldr	r2, [pc, #112]	; (8000c9c <USART_Init+0x170>)
 8000c2c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c30:	095b      	lsrs	r3, r3, #5
 8000c32:	011b      	lsls	r3, r3, #4
 8000c34:	627b      	str	r3, [r7, #36]	; 0x24

  /* Determine the fractional part */
  fractionaldivider = integerdivider - (100 * (tmpreg >> 4));
 8000c36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c38:	091b      	lsrs	r3, r3, #4
 8000c3a:	2264      	movs	r2, #100	; 0x64
 8000c3c:	fb02 f303 	mul.w	r3, r2, r3
 8000c40:	69fa      	ldr	r2, [r7, #28]
 8000c42:	1ad3      	subs	r3, r2, r3
 8000c44:	61bb      	str	r3, [r7, #24]

  /* Implement the fractional part in the register */
  if ((USARTx->CR1 & USART_CR1_OVER8) != 0)
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	899b      	ldrh	r3, [r3, #12]
 8000c4a:	b29b      	uxth	r3, r3
 8000c4c:	b21b      	sxth	r3, r3
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	da0c      	bge.n	8000c6c <USART_Init+0x140>
  {
    tmpreg |= ((((fractionaldivider * 8) + 50) / 100)) & ((uint8_t)0x07);
 8000c52:	69bb      	ldr	r3, [r7, #24]
 8000c54:	00db      	lsls	r3, r3, #3
 8000c56:	3332      	adds	r3, #50	; 0x32
 8000c58:	4a10      	ldr	r2, [pc, #64]	; (8000c9c <USART_Init+0x170>)
 8000c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8000c5e:	095b      	lsrs	r3, r3, #5
 8000c60:	f003 0307 	and.w	r3, r3, #7
 8000c64:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c66:	4313      	orrs	r3, r2
 8000c68:	627b      	str	r3, [r7, #36]	; 0x24
 8000c6a:	e00b      	b.n	8000c84 <USART_Init+0x158>
  }
  else /* if ((USARTx->CR1 & USART_CR1_OVER8) == 0) */
  {
    tmpreg |= ((((fractionaldivider * 16) + 50) / 100)) & ((uint8_t)0x0F);
 8000c6c:	69bb      	ldr	r3, [r7, #24]
 8000c6e:	011b      	lsls	r3, r3, #4
 8000c70:	3332      	adds	r3, #50	; 0x32
 8000c72:	4a0a      	ldr	r2, [pc, #40]	; (8000c9c <USART_Init+0x170>)
 8000c74:	fba2 2303 	umull	r2, r3, r2, r3
 8000c78:	095b      	lsrs	r3, r3, #5
 8000c7a:	f003 030f 	and.w	r3, r3, #15
 8000c7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000c80:	4313      	orrs	r3, r2
 8000c82:	627b      	str	r3, [r7, #36]	; 0x24
  }
  
  /* Write to USART BRR register */
  USARTx->BRR = (uint16_t)tmpreg;
 8000c84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000c86:	b29a      	uxth	r2, r3
 8000c88:	687b      	ldr	r3, [r7, #4]
 8000c8a:	811a      	strh	r2, [r3, #8]
}
 8000c8c:	bf00      	nop
 8000c8e:	3728      	adds	r7, #40	; 0x28
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	40011000 	.word	0x40011000
 8000c98:	40011400 	.word	0x40011400
 8000c9c:	51eb851f 	.word	0x51eb851f

08000ca0 <USART_Cmd>:
  * @param  NewState: new state of the USARTx peripheral.
  *          This parameter can be: ENABLE or DISABLE.
  * @retval None
  */
void USART_Cmd(USART_TypeDef* USARTx, FunctionalState NewState)
{
 8000ca0:	b480      	push	{r7}
 8000ca2:	b083      	sub	sp, #12
 8000ca4:	af00      	add	r7, sp, #0
 8000ca6:	6078      	str	r0, [r7, #4]
 8000ca8:	460b      	mov	r3, r1
 8000caa:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_FUNCTIONAL_STATE(NewState));
  
  if (NewState != DISABLE)
 8000cac:	78fb      	ldrb	r3, [r7, #3]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d008      	beq.n	8000cc4 <USART_Cmd+0x24>
  {
    /* Enable the selected USART by setting the UE bit in the CR1 register */
    USARTx->CR1 |= USART_CR1_UE;
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	899b      	ldrh	r3, [r3, #12]
 8000cb6:	b29b      	uxth	r3, r3
 8000cb8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000cbc:	b29a      	uxth	r2, r3
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	819a      	strh	r2, [r3, #12]
  else
  {
    /* Disable the selected USART by clearing the UE bit in the CR1 register */
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
  }
}
 8000cc2:	e007      	b.n	8000cd4 <USART_Cmd+0x34>
    USARTx->CR1 &= (uint16_t)~((uint16_t)USART_CR1_UE);
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	899b      	ldrh	r3, [r3, #12]
 8000cc8:	b29b      	uxth	r3, r3
 8000cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8000cce:	b29a      	uxth	r2, r3
 8000cd0:	687b      	ldr	r3, [r7, #4]
 8000cd2:	819a      	strh	r2, [r3, #12]
}
 8000cd4:	bf00      	nop
 8000cd6:	370c      	adds	r7, #12
 8000cd8:	46bd      	mov	sp, r7
 8000cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cde:	4770      	bx	lr

08000ce0 <USART_SendData>:
  *         UART peripheral.
  * @param  Data: the data to transmit.
  * @retval None
  */
void USART_SendData(USART_TypeDef* USARTx, uint16_t Data)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	b083      	sub	sp, #12
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	460b      	mov	r3, r1
 8000cea:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_USART_ALL_PERIPH(USARTx));
  assert_param(IS_USART_DATA(Data)); 
    
  /* Transmit Data */
  USARTx->DR = (Data & (uint16_t)0x01FF);
 8000cec:	887b      	ldrh	r3, [r7, #2]
 8000cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000cf2:	b29a      	uxth	r2, r3
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	809a      	strh	r2, [r3, #4]
}
 8000cf8:	bf00      	nop
 8000cfa:	370c      	adds	r7, #12
 8000cfc:	46bd      	mov	sp, r7
 8000cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d02:	4770      	bx	lr

08000d04 <USART_GetFlagStatus>:
  *            @arg USART_FLAG_FE:   Framing Error flag
  *            @arg USART_FLAG_PE:   Parity Error flag
  * @retval The new state of USART_FLAG (SET or RESET).
  */
FlagStatus USART_GetFlagStatus(USART_TypeDef* USARTx, uint16_t USART_FLAG)
{
 8000d04:	b480      	push	{r7}
 8000d06:	b085      	sub	sp, #20
 8000d08:	af00      	add	r7, sp, #0
 8000d0a:	6078      	str	r0, [r7, #4]
 8000d0c:	460b      	mov	r3, r1
 8000d0e:	807b      	strh	r3, [r7, #2]
  FlagStatus bitstatus = RESET;
 8000d10:	2300      	movs	r3, #0
 8000d12:	73fb      	strb	r3, [r7, #15]
  if (USART_FLAG == USART_FLAG_CTS)
  {
    assert_param(IS_USART_1236_PERIPH(USARTx));
  } 
    
  if ((USARTx->SR & USART_FLAG) != (uint16_t)RESET)
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	881b      	ldrh	r3, [r3, #0]
 8000d18:	b29a      	uxth	r2, r3
 8000d1a:	887b      	ldrh	r3, [r7, #2]
 8000d1c:	4013      	ands	r3, r2
 8000d1e:	b29b      	uxth	r3, r3
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d002      	beq.n	8000d2a <USART_GetFlagStatus+0x26>
  {
    bitstatus = SET;
 8000d24:	2301      	movs	r3, #1
 8000d26:	73fb      	strb	r3, [r7, #15]
 8000d28:	e001      	b.n	8000d2e <USART_GetFlagStatus+0x2a>
  }
  else
  {
    bitstatus = RESET;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8000d2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3714      	adds	r7, #20
 8000d34:	46bd      	mov	sp, r7
 8000d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3a:	4770      	bx	lr

08000d3c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	b083      	sub	sp, #12
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	f103 0208 	add.w	r2, r3, #8
 8000d4a:	687b      	ldr	r3, [r7, #4]
 8000d4c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	f04f 32ff 	mov.w	r2, #4294967295
 8000d54:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f103 0208 	add.w	r2, r3, #8
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	f103 0208 	add.w	r2, r3, #8
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8000d70:	bf00      	nop
 8000d72:	370c      	adds	r7, #12
 8000d74:	46bd      	mov	sp, r7
 8000d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7a:	4770      	bx	lr

08000d7c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	b083      	sub	sp, #12
 8000d80:	af00      	add	r7, sp, #0
 8000d82:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	2200      	movs	r2, #0
 8000d88:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8000d8a:	bf00      	nop
 8000d8c:	370c      	adds	r7, #12
 8000d8e:	46bd      	mov	sp, r7
 8000d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d94:	4770      	bx	lr

08000d96 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000d96:	b480      	push	{r7}
 8000d98:	b085      	sub	sp, #20
 8000d9a:	af00      	add	r7, sp, #0
 8000d9c:	6078      	str	r0, [r7, #4]
 8000d9e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	685b      	ldr	r3, [r3, #4]
 8000da4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8000da6:	683b      	ldr	r3, [r7, #0]
 8000da8:	68fa      	ldr	r2, [r7, #12]
 8000daa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8000dac:	68fb      	ldr	r3, [r7, #12]
 8000dae:	689a      	ldr	r2, [r3, #8]
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	689b      	ldr	r3, [r3, #8]
 8000db8:	683a      	ldr	r2, [r7, #0]
 8000dba:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	683a      	ldr	r2, [r7, #0]
 8000dc0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8000dc2:	683b      	ldr	r3, [r7, #0]
 8000dc4:	687a      	ldr	r2, [r7, #4]
 8000dc6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000dc8:	687b      	ldr	r3, [r7, #4]
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	1c5a      	adds	r2, r3, #1
 8000dce:	687b      	ldr	r3, [r7, #4]
 8000dd0:	601a      	str	r2, [r3, #0]
}
 8000dd2:	bf00      	nop
 8000dd4:	3714      	adds	r7, #20
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr

08000dde <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8000dde:	b480      	push	{r7}
 8000de0:	b085      	sub	sp, #20
 8000de2:	af00      	add	r7, sp, #0
 8000de4:	6078      	str	r0, [r7, #4]
 8000de6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8000de8:	683b      	ldr	r3, [r7, #0]
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8000dee:	68bb      	ldr	r3, [r7, #8]
 8000df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000df4:	d103      	bne.n	8000dfe <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	691b      	ldr	r3, [r3, #16]
 8000dfa:	60fb      	str	r3, [r7, #12]
 8000dfc:	e00c      	b.n	8000e18 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8000dfe:	687b      	ldr	r3, [r7, #4]
 8000e00:	3308      	adds	r3, #8
 8000e02:	60fb      	str	r3, [r7, #12]
 8000e04:	e002      	b.n	8000e0c <vListInsert+0x2e>
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	685b      	ldr	r3, [r3, #4]
 8000e0a:	60fb      	str	r3, [r7, #12]
 8000e0c:	68fb      	ldr	r3, [r7, #12]
 8000e0e:	685b      	ldr	r3, [r3, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68ba      	ldr	r2, [r7, #8]
 8000e14:	429a      	cmp	r2, r3
 8000e16:	d2f6      	bcs.n	8000e06 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	685a      	ldr	r2, [r3, #4]
 8000e1c:	683b      	ldr	r3, [r7, #0]
 8000e1e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	685b      	ldr	r3, [r3, #4]
 8000e24:	683a      	ldr	r2, [r7, #0]
 8000e26:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8000e28:	683b      	ldr	r3, [r7, #0]
 8000e2a:	68fa      	ldr	r2, [r7, #12]
 8000e2c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	683a      	ldr	r2, [r7, #0]
 8000e32:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	687a      	ldr	r2, [r7, #4]
 8000e38:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	1c5a      	adds	r2, r3, #1
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	601a      	str	r2, [r3, #0]
}
 8000e44:	bf00      	nop
 8000e46:	3714      	adds	r7, #20
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8000e50:	b480      	push	{r7}
 8000e52:	b085      	sub	sp, #20
 8000e54:	af00      	add	r7, sp, #0
 8000e56:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	691b      	ldr	r3, [r3, #16]
 8000e5c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	685b      	ldr	r3, [r3, #4]
 8000e62:	687a      	ldr	r2, [r7, #4]
 8000e64:	6892      	ldr	r2, [r2, #8]
 8000e66:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	689b      	ldr	r3, [r3, #8]
 8000e6c:	687a      	ldr	r2, [r7, #4]
 8000e6e:	6852      	ldr	r2, [r2, #4]
 8000e70:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	685b      	ldr	r3, [r3, #4]
 8000e76:	687a      	ldr	r2, [r7, #4]
 8000e78:	429a      	cmp	r2, r3
 8000e7a:	d103      	bne.n	8000e84 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	689a      	ldr	r2, [r3, #8]
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8000e84:	687b      	ldr	r3, [r7, #4]
 8000e86:	2200      	movs	r2, #0
 8000e88:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	1e5a      	subs	r2, r3, #1
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
}
 8000e98:	4618      	mov	r0, r3
 8000e9a:	3714      	adds	r7, #20
 8000e9c:	46bd      	mov	sp, r7
 8000e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ea2:	4770      	bx	lr

08000ea4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8000ea4:	b580      	push	{r7, lr}
 8000ea6:	b084      	sub	sp, #16
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
 8000eac:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d109      	bne.n	8000ecc <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8000eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000ebc:	f383 8811 	msr	BASEPRI, r3
 8000ec0:	f3bf 8f6f 	isb	sy
 8000ec4:	f3bf 8f4f 	dsb	sy
 8000ec8:	60bb      	str	r3, [r7, #8]
 8000eca:	e7fe      	b.n	8000eca <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8000ecc:	f001 faa6 	bl	800241c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	681a      	ldr	r2, [r3, #0]
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000ed8:	68f9      	ldr	r1, [r7, #12]
 8000eda:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000edc:	fb01 f303 	mul.w	r3, r1, r3
 8000ee0:	441a      	add	r2, r3
 8000ee2:	68fb      	ldr	r3, [r7, #12]
 8000ee4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	2200      	movs	r2, #0
 8000eea:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8000eec:	68fb      	ldr	r3, [r7, #12]
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	68fb      	ldr	r3, [r7, #12]
 8000ef2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000ef4:	68fb      	ldr	r3, [r7, #12]
 8000ef6:	681a      	ldr	r2, [r3, #0]
 8000ef8:	68fb      	ldr	r3, [r7, #12]
 8000efa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000efc:	3b01      	subs	r3, #1
 8000efe:	68f9      	ldr	r1, [r7, #12]
 8000f00:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000f02:	fb01 f303 	mul.w	r3, r1, r3
 8000f06:	441a      	add	r2, r3
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8000f0c:	68fb      	ldr	r3, [r7, #12]
 8000f0e:	22ff      	movs	r2, #255	; 0xff
 8000f10:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8000f14:	68fb      	ldr	r3, [r7, #12]
 8000f16:	22ff      	movs	r2, #255	; 0xff
 8000f18:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d114      	bne.n	8000f4c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8000f22:	68fb      	ldr	r3, [r7, #12]
 8000f24:	691b      	ldr	r3, [r3, #16]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d01a      	beq.n	8000f60 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	3310      	adds	r3, #16
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 fe3a 	bl	8001ba8 <xTaskRemoveFromEventList>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d012      	beq.n	8000f60 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8000f3a:	4b0d      	ldr	r3, [pc, #52]	; (8000f70 <xQueueGenericReset+0xcc>)
 8000f3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	f3bf 8f4f 	dsb	sy
 8000f46:	f3bf 8f6f 	isb	sy
 8000f4a:	e009      	b.n	8000f60 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	3310      	adds	r3, #16
 8000f50:	4618      	mov	r0, r3
 8000f52:	f7ff fef3 	bl	8000d3c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8000f56:	68fb      	ldr	r3, [r7, #12]
 8000f58:	3324      	adds	r3, #36	; 0x24
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f7ff feee 	bl	8000d3c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8000f60:	f001 fa8a 	bl	8002478 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8000f64:	2301      	movs	r3, #1
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	e000ed04 	.word	0xe000ed04

08000f74 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b08a      	sub	sp, #40	; 0x28
 8000f78:	af02      	add	r7, sp, #8
 8000f7a:	60f8      	str	r0, [r7, #12]
 8000f7c:	60b9      	str	r1, [r7, #8]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8000f82:	68fb      	ldr	r3, [r7, #12]
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d109      	bne.n	8000f9c <xQueueGenericCreate+0x28>
 8000f88:	f04f 0350 	mov.w	r3, #80	; 0x50
 8000f8c:	f383 8811 	msr	BASEPRI, r3
 8000f90:	f3bf 8f6f 	isb	sy
 8000f94:	f3bf 8f4f 	dsb	sy
 8000f98:	613b      	str	r3, [r7, #16]
 8000f9a:	e7fe      	b.n	8000f9a <xQueueGenericCreate+0x26>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8000f9c:	68fb      	ldr	r3, [r7, #12]
 8000f9e:	68ba      	ldr	r2, [r7, #8]
 8000fa0:	fb02 f303 	mul.w	r3, r2, r3
 8000fa4:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8000fa6:	69fb      	ldr	r3, [r7, #28]
 8000fa8:	3350      	adds	r3, #80	; 0x50
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 fb50 	bl	8002650 <pvPortMalloc>
 8000fb0:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d00d      	beq.n	8000fd4 <xQueueGenericCreate+0x60>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8000fb8:	69bb      	ldr	r3, [r7, #24]
 8000fba:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8000fbc:	697b      	ldr	r3, [r7, #20]
 8000fbe:	3350      	adds	r3, #80	; 0x50
 8000fc0:	617b      	str	r3, [r7, #20]
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8000fc2:	79fa      	ldrb	r2, [r7, #7]
 8000fc4:	69bb      	ldr	r3, [r7, #24]
 8000fc6:	9300      	str	r3, [sp, #0]
 8000fc8:	4613      	mov	r3, r2
 8000fca:	697a      	ldr	r2, [r7, #20]
 8000fcc:	68b9      	ldr	r1, [r7, #8]
 8000fce:	68f8      	ldr	r0, [r7, #12]
 8000fd0:	f000 f805 	bl	8000fde <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8000fd4:	69bb      	ldr	r3, [r7, #24]
	}
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	3720      	adds	r7, #32
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	60f8      	str	r0, [r7, #12]
 8000fe6:	60b9      	str	r1, [r7, #8]
 8000fe8:	607a      	str	r2, [r7, #4]
 8000fea:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d103      	bne.n	8000ffa <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	69ba      	ldr	r2, [r7, #24]
 8000ff6:	601a      	str	r2, [r3, #0]
 8000ff8:	e002      	b.n	8001000 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8000ffa:	69bb      	ldr	r3, [r7, #24]
 8000ffc:	687a      	ldr	r2, [r7, #4]
 8000ffe:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8001000:	69bb      	ldr	r3, [r7, #24]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8001006:	69bb      	ldr	r3, [r7, #24]
 8001008:	68ba      	ldr	r2, [r7, #8]
 800100a:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800100c:	2101      	movs	r1, #1
 800100e:	69b8      	ldr	r0, [r7, #24]
 8001010:	f7ff ff48 	bl	8000ea4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8001014:	69bb      	ldr	r3, [r7, #24]
 8001016:	78fa      	ldrb	r2, [r7, #3]
 8001018:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800101c:	bf00      	nop
 800101e:	3710      	adds	r7, #16
 8001020:	46bd      	mov	sp, r7
 8001022:	bd80      	pop	{r7, pc}

08001024 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 8001024:	b580      	push	{r7, lr}
 8001026:	b086      	sub	sp, #24
 8001028:	af00      	add	r7, sp, #0
 800102a:	6078      	str	r0, [r7, #4]
 800102c:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b00      	cmp	r3, #0
 8001032:	d109      	bne.n	8001048 <xQueueCreateCountingSemaphore+0x24>
 8001034:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001038:	f383 8811 	msr	BASEPRI, r3
 800103c:	f3bf 8f6f 	isb	sy
 8001040:	f3bf 8f4f 	dsb	sy
 8001044:	613b      	str	r3, [r7, #16]
 8001046:	e7fe      	b.n	8001046 <xQueueCreateCountingSemaphore+0x22>
		configASSERT( uxInitialCount <= uxMaxCount );
 8001048:	683a      	ldr	r2, [r7, #0]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	429a      	cmp	r2, r3
 800104e:	d909      	bls.n	8001064 <xQueueCreateCountingSemaphore+0x40>
 8001050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001054:	f383 8811 	msr	BASEPRI, r3
 8001058:	f3bf 8f6f 	isb	sy
 800105c:	f3bf 8f4f 	dsb	sy
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	e7fe      	b.n	8001062 <xQueueCreateCountingSemaphore+0x3e>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8001064:	2202      	movs	r2, #2
 8001066:	2100      	movs	r1, #0
 8001068:	6878      	ldr	r0, [r7, #4]
 800106a:	f7ff ff83 	bl	8000f74 <xQueueGenericCreate>
 800106e:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	2b00      	cmp	r3, #0
 8001074:	d002      	beq.n	800107c <xQueueCreateCountingSemaphore+0x58>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 8001076:	697b      	ldr	r3, [r7, #20]
 8001078:	683a      	ldr	r2, [r7, #0]
 800107a:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 800107c:	697b      	ldr	r3, [r7, #20]
	}
 800107e:	4618      	mov	r0, r3
 8001080:	3718      	adds	r7, #24
 8001082:	46bd      	mov	sp, r7
 8001084:	bd80      	pop	{r7, pc}

08001086 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8001086:	b580      	push	{r7, lr}
 8001088:	b08e      	sub	sp, #56	; 0x38
 800108a:	af00      	add	r7, sp, #0
 800108c:	6078      	str	r0, [r7, #4]
 800108e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8001094:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001096:	2b00      	cmp	r3, #0
 8001098:	d109      	bne.n	80010ae <xQueueGiveFromISR+0x28>
 800109a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800109e:	f383 8811 	msr	BASEPRI, r3
 80010a2:	f3bf 8f6f 	isb	sy
 80010a6:	f3bf 8f4f 	dsb	sy
 80010aa:	623b      	str	r3, [r7, #32]
 80010ac:	e7fe      	b.n	80010ac <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80010ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	2b00      	cmp	r3, #0
 80010b4:	d009      	beq.n	80010ca <xQueueGiveFromISR+0x44>
 80010b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010ba:	f383 8811 	msr	BASEPRI, r3
 80010be:	f3bf 8f6f 	isb	sy
 80010c2:	f3bf 8f4f 	dsb	sy
 80010c6:	61fb      	str	r3, [r7, #28]
 80010c8:	e7fe      	b.n	80010c8 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 80010ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	2b00      	cmp	r3, #0
 80010d0:	d103      	bne.n	80010da <xQueueGiveFromISR+0x54>
 80010d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80010d4:	689b      	ldr	r3, [r3, #8]
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d101      	bne.n	80010de <xQueueGiveFromISR+0x58>
 80010da:	2301      	movs	r3, #1
 80010dc:	e000      	b.n	80010e0 <xQueueGiveFromISR+0x5a>
 80010de:	2300      	movs	r3, #0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d109      	bne.n	80010f8 <xQueueGiveFromISR+0x72>
 80010e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80010e8:	f383 8811 	msr	BASEPRI, r3
 80010ec:	f3bf 8f6f 	isb	sy
 80010f0:	f3bf 8f4f 	dsb	sy
 80010f4:	61bb      	str	r3, [r7, #24]
 80010f6:	e7fe      	b.n	80010f6 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80010f8:	f001 fa6c 	bl	80025d4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80010fc:	f3ef 8211 	mrs	r2, BASEPRI
 8001100:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001104:	f383 8811 	msr	BASEPRI, r3
 8001108:	f3bf 8f6f 	isb	sy
 800110c:	f3bf 8f4f 	dsb	sy
 8001110:	617a      	str	r2, [r7, #20]
 8001112:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8001114:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8001116:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8001118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800111a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800111c:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800111e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001120:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001122:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8001124:	429a      	cmp	r2, r3
 8001126:	d22b      	bcs.n	8001180 <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8001128:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800112a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800112e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8001132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001134:	1c5a      	adds	r2, r3, #1
 8001136:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001138:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800113a:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800113e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001142:	d112      	bne.n	800116a <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8001144:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001146:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001148:	2b00      	cmp	r3, #0
 800114a:	d016      	beq.n	800117a <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800114c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800114e:	3324      	adds	r3, #36	; 0x24
 8001150:	4618      	mov	r0, r3
 8001152:	f000 fd29 	bl	8001ba8 <xTaskRemoveFromEventList>
 8001156:	4603      	mov	r3, r0
 8001158:	2b00      	cmp	r3, #0
 800115a:	d00e      	beq.n	800117a <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d00b      	beq.n	800117a <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	2201      	movs	r2, #1
 8001166:	601a      	str	r2, [r3, #0]
 8001168:	e007      	b.n	800117a <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800116a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800116e:	3301      	adds	r3, #1
 8001170:	b2db      	uxtb	r3, r3
 8001172:	b25a      	sxtb	r2, r3
 8001174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001176:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800117a:	2301      	movs	r3, #1
 800117c:	637b      	str	r3, [r7, #52]	; 0x34
 800117e:	e001      	b.n	8001184 <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8001180:	2300      	movs	r3, #0
 8001182:	637b      	str	r3, [r7, #52]	; 0x34
 8001184:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001186:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8001188:	68fb      	ldr	r3, [r7, #12]
 800118a:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800118e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8001190:	4618      	mov	r0, r3
 8001192:	3738      	adds	r7, #56	; 0x38
 8001194:	46bd      	mov	sp, r7
 8001196:	bd80      	pop	{r7, pc}

08001198 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08c      	sub	sp, #48	; 0x30
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]
 80011a0:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80011a2:	2300      	movs	r3, #0
 80011a4:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	627b      	str	r3, [r7, #36]	; 0x24

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80011aa:	2300      	movs	r3, #0
 80011ac:	62bb      	str	r3, [r7, #40]	; 0x28
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80011ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d109      	bne.n	80011c8 <xQueueSemaphoreTake+0x30>
	__asm volatile
 80011b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011b8:	f383 8811 	msr	BASEPRI, r3
 80011bc:	f3bf 8f6f 	isb	sy
 80011c0:	f3bf 8f4f 	dsb	sy
 80011c4:	61bb      	str	r3, [r7, #24]
 80011c6:	e7fe      	b.n	80011c6 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 80011c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d009      	beq.n	80011e4 <xQueueSemaphoreTake+0x4c>
 80011d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80011d4:	f383 8811 	msr	BASEPRI, r3
 80011d8:	f3bf 8f6f 	isb	sy
 80011dc:	f3bf 8f4f 	dsb	sy
 80011e0:	617b      	str	r3, [r7, #20]
 80011e2:	e7fe      	b.n	80011e2 <xQueueSemaphoreTake+0x4a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80011e4:	f001 f91a 	bl	800241c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 80011e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80011ec:	623b      	str	r3, [r7, #32]

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 80011ee:	6a3b      	ldr	r3, [r7, #32]
 80011f0:	2b00      	cmp	r3, #0
 80011f2:	d024      	beq.n	800123e <xQueueSemaphoreTake+0xa6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 80011f4:	6a3b      	ldr	r3, [r7, #32]
 80011f6:	1e5a      	subs	r2, r3, #1
 80011f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fa:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80011fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	2b00      	cmp	r3, #0
 8001202:	d104      	bne.n	800120e <xQueueSemaphoreTake+0x76>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8001204:	f000 ff6a 	bl	80020dc <pvTaskIncrementMutexHeldCount>
 8001208:	4602      	mov	r2, r0
 800120a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800120c:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800120e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001210:	691b      	ldr	r3, [r3, #16]
 8001212:	2b00      	cmp	r3, #0
 8001214:	d00f      	beq.n	8001236 <xQueueSemaphoreTake+0x9e>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001218:	3310      	adds	r3, #16
 800121a:	4618      	mov	r0, r3
 800121c:	f000 fcc4 	bl	8001ba8 <xTaskRemoveFromEventList>
 8001220:	4603      	mov	r3, r0
 8001222:	2b00      	cmp	r3, #0
 8001224:	d007      	beq.n	8001236 <xQueueSemaphoreTake+0x9e>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8001226:	4b53      	ldr	r3, [pc, #332]	; (8001374 <xQueueSemaphoreTake+0x1dc>)
 8001228:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800122c:	601a      	str	r2, [r3, #0]
 800122e:	f3bf 8f4f 	dsb	sy
 8001232:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8001236:	f001 f91f 	bl	8002478 <vPortExitCritical>
				return pdPASS;
 800123a:	2301      	movs	r3, #1
 800123c:	e096      	b.n	800136c <xQueueSemaphoreTake+0x1d4>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800123e:	683b      	ldr	r3, [r7, #0]
 8001240:	2b00      	cmp	r3, #0
 8001242:	d110      	bne.n	8001266 <xQueueSemaphoreTake+0xce>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8001244:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001246:	2b00      	cmp	r3, #0
 8001248:	d009      	beq.n	800125e <xQueueSemaphoreTake+0xc6>
 800124a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800124e:	f383 8811 	msr	BASEPRI, r3
 8001252:	f3bf 8f6f 	isb	sy
 8001256:	f3bf 8f4f 	dsb	sy
 800125a:	613b      	str	r3, [r7, #16]
 800125c:	e7fe      	b.n	800125c <xQueueSemaphoreTake+0xc4>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800125e:	f001 f90b 	bl	8002478 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8001262:	2300      	movs	r3, #0
 8001264:	e082      	b.n	800136c <xQueueSemaphoreTake+0x1d4>
				}
				else if( xEntryTimeSet == pdFALSE )
 8001266:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001268:	2b00      	cmp	r3, #0
 800126a:	d106      	bne.n	800127a <xQueueSemaphoreTake+0xe2>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800126c:	f107 0308 	add.w	r3, r7, #8
 8001270:	4618      	mov	r0, r3
 8001272:	f000 fcfb 	bl	8001c6c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8001276:	2301      	movs	r3, #1
 8001278:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800127a:	f001 f8fd 	bl	8002478 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800127e:	f000 fab3 	bl	80017e8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8001282:	f001 f8cb 	bl	800241c <vPortEnterCritical>
 8001286:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001288:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800128c:	b25b      	sxtb	r3, r3
 800128e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001292:	d103      	bne.n	800129c <xQueueSemaphoreTake+0x104>
 8001294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001296:	2200      	movs	r2, #0
 8001298:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800129c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800129e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80012a2:	b25b      	sxtb	r3, r3
 80012a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012a8:	d103      	bne.n	80012b2 <xQueueSemaphoreTake+0x11a>
 80012aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012ac:	2200      	movs	r2, #0
 80012ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80012b2:	f001 f8e1 	bl	8002478 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80012b6:	463a      	mov	r2, r7
 80012b8:	f107 0308 	add.w	r3, r7, #8
 80012bc:	4611      	mov	r1, r2
 80012be:	4618      	mov	r0, r3
 80012c0:	f000 fcea 	bl	8001c98 <xTaskCheckForTimeOut>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d132      	bne.n	8001330 <xQueueSemaphoreTake+0x198>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80012ca:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80012cc:	f000 f8be 	bl	800144c <prvIsQueueEmpty>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d026      	beq.n	8001324 <xQueueSemaphoreTake+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80012d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d109      	bne.n	80012f2 <xQueueSemaphoreTake+0x15a>
					{
						taskENTER_CRITICAL();
 80012de:	f001 f89d 	bl	800241c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 80012e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012e4:	689b      	ldr	r3, [r3, #8]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f000 fdf6 	bl	8001ed8 <xTaskPriorityInherit>
 80012ec:	62b8      	str	r0, [r7, #40]	; 0x28
						}
						taskEXIT_CRITICAL();
 80012ee:	f001 f8c3 	bl	8002478 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80012f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80012f4:	3324      	adds	r3, #36	; 0x24
 80012f6:	683a      	ldr	r2, [r7, #0]
 80012f8:	4611      	mov	r1, r2
 80012fa:	4618      	mov	r0, r3
 80012fc:	f000 fc30 	bl	8001b60 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8001300:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001302:	f000 f851 	bl	80013a8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8001306:	f000 fa7d 	bl	8001804 <xTaskResumeAll>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	f47f af69 	bne.w	80011e4 <xQueueSemaphoreTake+0x4c>
				{
					portYIELD_WITHIN_API();
 8001312:	4b18      	ldr	r3, [pc, #96]	; (8001374 <xQueueSemaphoreTake+0x1dc>)
 8001314:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001318:	601a      	str	r2, [r3, #0]
 800131a:	f3bf 8f4f 	dsb	sy
 800131e:	f3bf 8f6f 	isb	sy
 8001322:	e75f      	b.n	80011e4 <xQueueSemaphoreTake+0x4c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8001324:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001326:	f000 f83f 	bl	80013a8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800132a:	f000 fa6b 	bl	8001804 <xTaskResumeAll>
 800132e:	e759      	b.n	80011e4 <xQueueSemaphoreTake+0x4c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8001330:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001332:	f000 f839 	bl	80013a8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8001336:	f000 fa65 	bl	8001804 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800133a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800133c:	f000 f886 	bl	800144c <prvIsQueueEmpty>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	f43f af4e 	beq.w	80011e4 <xQueueSemaphoreTake+0x4c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8001348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800134a:	2b00      	cmp	r3, #0
 800134c:	d00d      	beq.n	800136a <xQueueSemaphoreTake+0x1d2>
					{
						taskENTER_CRITICAL();
 800134e:	f001 f865 	bl	800241c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8001352:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8001354:	f000 f810 	bl	8001378 <prvGetDisinheritPriorityAfterTimeout>
 8001358:	61f8      	str	r0, [r7, #28]
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800135a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800135c:	689b      	ldr	r3, [r3, #8]
 800135e:	69f9      	ldr	r1, [r7, #28]
 8001360:	4618      	mov	r0, r3
 8001362:	f000 fe2f 	bl	8001fc4 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8001366:	f001 f887 	bl	8002478 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800136a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800136c:	4618      	mov	r0, r3
 800136e:	3730      	adds	r7, #48	; 0x30
 8001370:	46bd      	mov	sp, r7
 8001372:	bd80      	pop	{r7, pc}
 8001374:	e000ed04 	.word	0xe000ed04

08001378 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8001378:	b480      	push	{r7}
 800137a:	b085      	sub	sp, #20
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001384:	2b00      	cmp	r3, #0
 8001386:	d006      	beq.n	8001396 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800138c:	681b      	ldr	r3, [r3, #0]
 800138e:	f1c3 0305 	rsb	r3, r3, #5
 8001392:	60fb      	str	r3, [r7, #12]
 8001394:	e001      	b.n	800139a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8001396:	2300      	movs	r3, #0
 8001398:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800139a:	68fb      	ldr	r3, [r7, #12]
	}
 800139c:	4618      	mov	r0, r3
 800139e:	3714      	adds	r7, #20
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80013a8:	b580      	push	{r7, lr}
 80013aa:	b084      	sub	sp, #16
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80013b0:	f001 f834 	bl	800241c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80013ba:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013bc:	e011      	b.n	80013e2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80013be:	687b      	ldr	r3, [r7, #4]
 80013c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	d012      	beq.n	80013ec <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	3324      	adds	r3, #36	; 0x24
 80013ca:	4618      	mov	r0, r3
 80013cc:	f000 fbec 	bl	8001ba8 <xTaskRemoveFromEventList>
 80013d0:	4603      	mov	r3, r0
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d001      	beq.n	80013da <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80013d6:	f000 fcbf 	bl	8001d58 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80013da:	7bfb      	ldrb	r3, [r7, #15]
 80013dc:	3b01      	subs	r3, #1
 80013de:	b2db      	uxtb	r3, r3
 80013e0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80013e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	dce9      	bgt.n	80013be <prvUnlockQueue+0x16>
 80013ea:	e000      	b.n	80013ee <prvUnlockQueue+0x46>
					break;
 80013ec:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	22ff      	movs	r2, #255	; 0xff
 80013f2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80013f6:	f001 f83f 	bl	8002478 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80013fa:	f001 f80f 	bl	800241c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80013fe:	687b      	ldr	r3, [r7, #4]
 8001400:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8001404:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8001406:	e011      	b.n	800142c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	691b      	ldr	r3, [r3, #16]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d012      	beq.n	8001436 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	3310      	adds	r3, #16
 8001414:	4618      	mov	r0, r3
 8001416:	f000 fbc7 	bl	8001ba8 <xTaskRemoveFromEventList>
 800141a:	4603      	mov	r3, r0
 800141c:	2b00      	cmp	r3, #0
 800141e:	d001      	beq.n	8001424 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8001420:	f000 fc9a 	bl	8001d58 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8001424:	7bbb      	ldrb	r3, [r7, #14]
 8001426:	3b01      	subs	r3, #1
 8001428:	b2db      	uxtb	r3, r3
 800142a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800142c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8001430:	2b00      	cmp	r3, #0
 8001432:	dce9      	bgt.n	8001408 <prvUnlockQueue+0x60>
 8001434:	e000      	b.n	8001438 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8001436:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	22ff      	movs	r2, #255	; 0xff
 800143c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8001440:	f001 f81a 	bl	8002478 <vPortExitCritical>
}
 8001444:	bf00      	nop
 8001446:	3710      	adds	r7, #16
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b084      	sub	sp, #16
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8001454:	f000 ffe2 	bl	800241c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8001460:	2301      	movs	r3, #1
 8001462:	60fb      	str	r3, [r7, #12]
 8001464:	e001      	b.n	800146a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8001466:	2300      	movs	r3, #0
 8001468:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800146a:	f001 f805 	bl	8002478 <vPortExitCritical>

	return xReturn;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3710      	adds	r7, #16
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}

08001478 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8001478:	b580      	push	{r7, lr}
 800147a:	b08c      	sub	sp, #48	; 0x30
 800147c:	af04      	add	r7, sp, #16
 800147e:	60f8      	str	r0, [r7, #12]
 8001480:	60b9      	str	r1, [r7, #8]
 8001482:	603b      	str	r3, [r7, #0]
 8001484:	4613      	mov	r3, r2
 8001486:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8001488:	88fb      	ldrh	r3, [r7, #6]
 800148a:	009b      	lsls	r3, r3, #2
 800148c:	4618      	mov	r0, r3
 800148e:	f001 f8df 	bl	8002650 <pvPortMalloc>
 8001492:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8001494:	697b      	ldr	r3, [r7, #20]
 8001496:	2b00      	cmp	r3, #0
 8001498:	d00e      	beq.n	80014b8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800149a:	2058      	movs	r0, #88	; 0x58
 800149c:	f001 f8d8 	bl	8002650 <pvPortMalloc>
 80014a0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80014a2:	69fb      	ldr	r3, [r7, #28]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d003      	beq.n	80014b0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80014a8:	69fb      	ldr	r3, [r7, #28]
 80014aa:	697a      	ldr	r2, [r7, #20]
 80014ac:	631a      	str	r2, [r3, #48]	; 0x30
 80014ae:	e005      	b.n	80014bc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80014b0:	6978      	ldr	r0, [r7, #20]
 80014b2:	f001 f995 	bl	80027e0 <vPortFree>
 80014b6:	e001      	b.n	80014bc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80014b8:	2300      	movs	r3, #0
 80014ba:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80014bc:	69fb      	ldr	r3, [r7, #28]
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d013      	beq.n	80014ea <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80014c2:	88fa      	ldrh	r2, [r7, #6]
 80014c4:	2300      	movs	r3, #0
 80014c6:	9303      	str	r3, [sp, #12]
 80014c8:	69fb      	ldr	r3, [r7, #28]
 80014ca:	9302      	str	r3, [sp, #8]
 80014cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80014ce:	9301      	str	r3, [sp, #4]
 80014d0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80014d2:	9300      	str	r3, [sp, #0]
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	68b9      	ldr	r1, [r7, #8]
 80014d8:	68f8      	ldr	r0, [r7, #12]
 80014da:	f000 f80e 	bl	80014fa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80014de:	69f8      	ldr	r0, [r7, #28]
 80014e0:	f000 f89a 	bl	8001618 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80014e4:	2301      	movs	r3, #1
 80014e6:	61bb      	str	r3, [r7, #24]
 80014e8:	e002      	b.n	80014f0 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80014ea:	f04f 33ff 	mov.w	r3, #4294967295
 80014ee:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80014f0:	69bb      	ldr	r3, [r7, #24]
	}
 80014f2:	4618      	mov	r0, r3
 80014f4:	3720      	adds	r7, #32
 80014f6:	46bd      	mov	sp, r7
 80014f8:	bd80      	pop	{r7, pc}

080014fa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80014fa:	b580      	push	{r7, lr}
 80014fc:	b088      	sub	sp, #32
 80014fe:	af00      	add	r7, sp, #0
 8001500:	60f8      	str	r0, [r7, #12]
 8001502:	60b9      	str	r1, [r7, #8]
 8001504:	607a      	str	r2, [r7, #4]
 8001506:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8001508:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800150a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	009b      	lsls	r3, r3, #2
 8001510:	461a      	mov	r2, r3
 8001512:	21a5      	movs	r1, #165	; 0xa5
 8001514:	f001 fe79 	bl	800320a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8001518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800151a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8001522:	3b01      	subs	r3, #1
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800152a:	69bb      	ldr	r3, [r7, #24]
 800152c:	f023 0307 	bic.w	r3, r3, #7
 8001530:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8001532:	69bb      	ldr	r3, [r7, #24]
 8001534:	f003 0307 	and.w	r3, r3, #7
 8001538:	2b00      	cmp	r3, #0
 800153a:	d009      	beq.n	8001550 <prvInitialiseNewTask+0x56>
 800153c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001540:	f383 8811 	msr	BASEPRI, r3
 8001544:	f3bf 8f6f 	isb	sy
 8001548:	f3bf 8f4f 	dsb	sy
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	e7fe      	b.n	800154e <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	d01f      	beq.n	8001596 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8001556:	2300      	movs	r3, #0
 8001558:	61fb      	str	r3, [r7, #28]
 800155a:	e012      	b.n	8001582 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800155c:	68ba      	ldr	r2, [r7, #8]
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	4413      	add	r3, r2
 8001562:	7819      	ldrb	r1, [r3, #0]
 8001564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001566:	69fb      	ldr	r3, [r7, #28]
 8001568:	4413      	add	r3, r2
 800156a:	3334      	adds	r3, #52	; 0x34
 800156c:	460a      	mov	r2, r1
 800156e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8001570:	68ba      	ldr	r2, [r7, #8]
 8001572:	69fb      	ldr	r3, [r7, #28]
 8001574:	4413      	add	r3, r2
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d006      	beq.n	800158a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	3301      	adds	r3, #1
 8001580:	61fb      	str	r3, [r7, #28]
 8001582:	69fb      	ldr	r3, [r7, #28]
 8001584:	2b09      	cmp	r3, #9
 8001586:	d9e9      	bls.n	800155c <prvInitialiseNewTask+0x62>
 8001588:	e000      	b.n	800158c <prvInitialiseNewTask+0x92>
			{
				break;
 800158a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800158c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800158e:	2200      	movs	r2, #0
 8001590:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8001594:	e003      	b.n	800159e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8001596:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001598:	2200      	movs	r2, #0
 800159a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800159e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015a0:	2b04      	cmp	r3, #4
 80015a2:	d901      	bls.n	80015a8 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80015a4:	2304      	movs	r3, #4
 80015a6:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80015a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015aa:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015ac:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80015ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b0:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80015b2:	649a      	str	r2, [r3, #72]	; 0x48
		pxNewTCB->uxMutexesHeld = 0;
 80015b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015b6:	2200      	movs	r2, #0
 80015b8:	64da      	str	r2, [r3, #76]	; 0x4c
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80015ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015bc:	3304      	adds	r3, #4
 80015be:	4618      	mov	r0, r3
 80015c0:	f7ff fbdc 	bl	8000d7c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80015c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015c6:	3318      	adds	r3, #24
 80015c8:	4618      	mov	r0, r3
 80015ca:	f7ff fbd7 	bl	8000d7c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80015ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015d2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80015d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80015d6:	f1c3 0205 	rsb	r2, r3, #5
 80015da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015dc:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80015de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80015e2:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80015e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015e6:	2200      	movs	r2, #0
 80015e8:	651a      	str	r2, [r3, #80]	; 0x50
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80015ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80015ec:	2200      	movs	r2, #0
 80015ee:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80015f2:	683a      	ldr	r2, [r7, #0]
 80015f4:	68f9      	ldr	r1, [r7, #12]
 80015f6:	69b8      	ldr	r0, [r7, #24]
 80015f8:	f000 fdea 	bl	80021d0 <pxPortInitialiseStack>
 80015fc:	4602      	mov	r2, r0
 80015fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001600:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8001602:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001604:	2b00      	cmp	r3, #0
 8001606:	d002      	beq.n	800160e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8001608:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800160a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800160c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800160e:	bf00      	nop
 8001610:	3720      	adds	r7, #32
 8001612:	46bd      	mov	sp, r7
 8001614:	bd80      	pop	{r7, pc}
	...

08001618 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8001620:	f000 fefc 	bl	800241c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8001624:	4b2c      	ldr	r3, [pc, #176]	; (80016d8 <prvAddNewTaskToReadyList+0xc0>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	3301      	adds	r3, #1
 800162a:	4a2b      	ldr	r2, [pc, #172]	; (80016d8 <prvAddNewTaskToReadyList+0xc0>)
 800162c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800162e:	4b2b      	ldr	r3, [pc, #172]	; (80016dc <prvAddNewTaskToReadyList+0xc4>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d109      	bne.n	800164a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8001636:	4a29      	ldr	r2, [pc, #164]	; (80016dc <prvAddNewTaskToReadyList+0xc4>)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <prvAddNewTaskToReadyList+0xc0>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d110      	bne.n	8001666 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8001644:	f000 fbac 	bl	8001da0 <prvInitialiseTaskLists>
 8001648:	e00d      	b.n	8001666 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800164a:	4b25      	ldr	r3, [pc, #148]	; (80016e0 <prvAddNewTaskToReadyList+0xc8>)
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d109      	bne.n	8001666 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8001652:	4b22      	ldr	r3, [pc, #136]	; (80016dc <prvAddNewTaskToReadyList+0xc4>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800165c:	429a      	cmp	r2, r3
 800165e:	d802      	bhi.n	8001666 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8001660:	4a1e      	ldr	r2, [pc, #120]	; (80016dc <prvAddNewTaskToReadyList+0xc4>)
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8001666:	4b1f      	ldr	r3, [pc, #124]	; (80016e4 <prvAddNewTaskToReadyList+0xcc>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	3301      	adds	r3, #1
 800166c:	4a1d      	ldr	r2, [pc, #116]	; (80016e4 <prvAddNewTaskToReadyList+0xcc>)
 800166e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8001670:	4b1c      	ldr	r3, [pc, #112]	; (80016e4 <prvAddNewTaskToReadyList+0xcc>)
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	641a      	str	r2, [r3, #64]	; 0x40
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800167c:	2201      	movs	r2, #1
 800167e:	409a      	lsls	r2, r3
 8001680:	4b19      	ldr	r3, [pc, #100]	; (80016e8 <prvAddNewTaskToReadyList+0xd0>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	4313      	orrs	r3, r2
 8001686:	4a18      	ldr	r2, [pc, #96]	; (80016e8 <prvAddNewTaskToReadyList+0xd0>)
 8001688:	6013      	str	r3, [r2, #0]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800168e:	4613      	mov	r3, r2
 8001690:	009b      	lsls	r3, r3, #2
 8001692:	4413      	add	r3, r2
 8001694:	009b      	lsls	r3, r3, #2
 8001696:	4a15      	ldr	r2, [pc, #84]	; (80016ec <prvAddNewTaskToReadyList+0xd4>)
 8001698:	441a      	add	r2, r3
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	3304      	adds	r3, #4
 800169e:	4619      	mov	r1, r3
 80016a0:	4610      	mov	r0, r2
 80016a2:	f7ff fb78 	bl	8000d96 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80016a6:	f000 fee7 	bl	8002478 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80016aa:	4b0d      	ldr	r3, [pc, #52]	; (80016e0 <prvAddNewTaskToReadyList+0xc8>)
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d00e      	beq.n	80016d0 <prvAddNewTaskToReadyList+0xb8>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80016b2:	4b0a      	ldr	r3, [pc, #40]	; (80016dc <prvAddNewTaskToReadyList+0xc4>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	429a      	cmp	r2, r3
 80016be:	d207      	bcs.n	80016d0 <prvAddNewTaskToReadyList+0xb8>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80016c0:	4b0b      	ldr	r3, [pc, #44]	; (80016f0 <prvAddNewTaskToReadyList+0xd8>)
 80016c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80016c6:	601a      	str	r2, [r3, #0]
 80016c8:	f3bf 8f4f 	dsb	sy
 80016cc:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80016d0:	bf00      	nop
 80016d2:	3708      	adds	r7, #8
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	20000180 	.word	0x20000180
 80016dc:	200000a8 	.word	0x200000a8
 80016e0:	2000018c 	.word	0x2000018c
 80016e4:	2000019c 	.word	0x2000019c
 80016e8:	20000188 	.word	0x20000188
 80016ec:	200000ac 	.word	0x200000ac
 80016f0:	e000ed04 	.word	0xe000ed04

080016f4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b084      	sub	sp, #16
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80016fc:	2300      	movs	r3, #0
 80016fe:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	2b00      	cmp	r3, #0
 8001704:	d016      	beq.n	8001734 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8001706:	4b13      	ldr	r3, [pc, #76]	; (8001754 <vTaskDelay+0x60>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	2b00      	cmp	r3, #0
 800170c:	d009      	beq.n	8001722 <vTaskDelay+0x2e>
 800170e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001712:	f383 8811 	msr	BASEPRI, r3
 8001716:	f3bf 8f6f 	isb	sy
 800171a:	f3bf 8f4f 	dsb	sy
 800171e:	60bb      	str	r3, [r7, #8]
 8001720:	e7fe      	b.n	8001720 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 8001722:	f000 f861 	bl	80017e8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8001726:	2100      	movs	r1, #0
 8001728:	6878      	ldr	r0, [r7, #4]
 800172a:	f000 fceb 	bl	8002104 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800172e:	f000 f869 	bl	8001804 <xTaskResumeAll>
 8001732:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8001734:	68fb      	ldr	r3, [r7, #12]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d107      	bne.n	800174a <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800173a:	4b07      	ldr	r3, [pc, #28]	; (8001758 <vTaskDelay+0x64>)
 800173c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001740:	601a      	str	r2, [r3, #0]
 8001742:	f3bf 8f4f 	dsb	sy
 8001746:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800174a:	bf00      	nop
 800174c:	3710      	adds	r7, #16
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
 8001752:	bf00      	nop
 8001754:	200001a8 	.word	0x200001a8
 8001758:	e000ed04 	.word	0xe000ed04

0800175c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800175c:	b580      	push	{r7, lr}
 800175e:	b086      	sub	sp, #24
 8001760:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8001762:	4b1b      	ldr	r3, [pc, #108]	; (80017d0 <vTaskStartScheduler+0x74>)
 8001764:	9301      	str	r3, [sp, #4]
 8001766:	2300      	movs	r3, #0
 8001768:	9300      	str	r3, [sp, #0]
 800176a:	2300      	movs	r3, #0
 800176c:	2282      	movs	r2, #130	; 0x82
 800176e:	4919      	ldr	r1, [pc, #100]	; (80017d4 <vTaskStartScheduler+0x78>)
 8001770:	4819      	ldr	r0, [pc, #100]	; (80017d8 <vTaskStartScheduler+0x7c>)
 8001772:	f7ff fe81 	bl	8001478 <xTaskCreate>
 8001776:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8001778:	68fb      	ldr	r3, [r7, #12]
 800177a:	2b01      	cmp	r3, #1
 800177c:	d115      	bne.n	80017aa <vTaskStartScheduler+0x4e>
 800177e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001782:	f383 8811 	msr	BASEPRI, r3
 8001786:	f3bf 8f6f 	isb	sy
 800178a:	f3bf 8f4f 	dsb	sy
 800178e:	60bb      	str	r3, [r7, #8]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8001790:	4b12      	ldr	r3, [pc, #72]	; (80017dc <vTaskStartScheduler+0x80>)
 8001792:	f04f 32ff 	mov.w	r2, #4294967295
 8001796:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8001798:	4b11      	ldr	r3, [pc, #68]	; (80017e0 <vTaskStartScheduler+0x84>)
 800179a:	2201      	movs	r2, #1
 800179c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800179e:	4b11      	ldr	r3, [pc, #68]	; (80017e4 <vTaskStartScheduler+0x88>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80017a4:	f000 fd9c 	bl	80022e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80017a8:	e00d      	b.n	80017c6 <vTaskStartScheduler+0x6a>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80017aa:	68fb      	ldr	r3, [r7, #12]
 80017ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017b0:	d109      	bne.n	80017c6 <vTaskStartScheduler+0x6a>
 80017b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80017b6:	f383 8811 	msr	BASEPRI, r3
 80017ba:	f3bf 8f6f 	isb	sy
 80017be:	f3bf 8f4f 	dsb	sy
 80017c2:	607b      	str	r3, [r7, #4]
 80017c4:	e7fe      	b.n	80017c4 <vTaskStartScheduler+0x68>
}
 80017c6:	bf00      	nop
 80017c8:	3710      	adds	r7, #16
 80017ca:	46bd      	mov	sp, r7
 80017cc:	bd80      	pop	{r7, pc}
 80017ce:	bf00      	nop
 80017d0:	200001a4 	.word	0x200001a4
 80017d4:	08003a2c 	.word	0x08003a2c
 80017d8:	08001d71 	.word	0x08001d71
 80017dc:	200001a0 	.word	0x200001a0
 80017e0:	2000018c 	.word	0x2000018c
 80017e4:	20000184 	.word	0x20000184

080017e8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80017ec:	4b04      	ldr	r3, [pc, #16]	; (8001800 <vTaskSuspendAll+0x18>)
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	3301      	adds	r3, #1
 80017f2:	4a03      	ldr	r2, [pc, #12]	; (8001800 <vTaskSuspendAll+0x18>)
 80017f4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80017f6:	bf00      	nop
 80017f8:	46bd      	mov	sp, r7
 80017fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017fe:	4770      	bx	lr
 8001800:	200001a8 	.word	0x200001a8

08001804 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800180a:	2300      	movs	r3, #0
 800180c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800180e:	2300      	movs	r3, #0
 8001810:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8001812:	4b41      	ldr	r3, [pc, #260]	; (8001918 <xTaskResumeAll+0x114>)
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d109      	bne.n	800182e <xTaskResumeAll+0x2a>
 800181a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800181e:	f383 8811 	msr	BASEPRI, r3
 8001822:	f3bf 8f6f 	isb	sy
 8001826:	f3bf 8f4f 	dsb	sy
 800182a:	603b      	str	r3, [r7, #0]
 800182c:	e7fe      	b.n	800182c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800182e:	f000 fdf5 	bl	800241c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8001832:	4b39      	ldr	r3, [pc, #228]	; (8001918 <xTaskResumeAll+0x114>)
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	3b01      	subs	r3, #1
 8001838:	4a37      	ldr	r2, [pc, #220]	; (8001918 <xTaskResumeAll+0x114>)
 800183a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800183c:	4b36      	ldr	r3, [pc, #216]	; (8001918 <xTaskResumeAll+0x114>)
 800183e:	681b      	ldr	r3, [r3, #0]
 8001840:	2b00      	cmp	r3, #0
 8001842:	d161      	bne.n	8001908 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8001844:	4b35      	ldr	r3, [pc, #212]	; (800191c <xTaskResumeAll+0x118>)
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b00      	cmp	r3, #0
 800184a:	d05d      	beq.n	8001908 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800184c:	e02e      	b.n	80018ac <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800184e:	4b34      	ldr	r3, [pc, #208]	; (8001920 <xTaskResumeAll+0x11c>)
 8001850:	68db      	ldr	r3, [r3, #12]
 8001852:	68db      	ldr	r3, [r3, #12]
 8001854:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	3318      	adds	r3, #24
 800185a:	4618      	mov	r0, r3
 800185c:	f7ff faf8 	bl	8000e50 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001860:	68fb      	ldr	r3, [r7, #12]
 8001862:	3304      	adds	r3, #4
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff faf3 	bl	8000e50 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800186e:	2201      	movs	r2, #1
 8001870:	409a      	lsls	r2, r3
 8001872:	4b2c      	ldr	r3, [pc, #176]	; (8001924 <xTaskResumeAll+0x120>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	4313      	orrs	r3, r2
 8001878:	4a2a      	ldr	r2, [pc, #168]	; (8001924 <xTaskResumeAll+0x120>)
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001880:	4613      	mov	r3, r2
 8001882:	009b      	lsls	r3, r3, #2
 8001884:	4413      	add	r3, r2
 8001886:	009b      	lsls	r3, r3, #2
 8001888:	4a27      	ldr	r2, [pc, #156]	; (8001928 <xTaskResumeAll+0x124>)
 800188a:	441a      	add	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	3304      	adds	r3, #4
 8001890:	4619      	mov	r1, r3
 8001892:	4610      	mov	r0, r2
 8001894:	f7ff fa7f 	bl	8000d96 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800189c:	4b23      	ldr	r3, [pc, #140]	; (800192c <xTaskResumeAll+0x128>)
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	429a      	cmp	r2, r3
 80018a4:	d302      	bcc.n	80018ac <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80018a6:	4b22      	ldr	r3, [pc, #136]	; (8001930 <xTaskResumeAll+0x12c>)
 80018a8:	2201      	movs	r2, #1
 80018aa:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80018ac:	4b1c      	ldr	r3, [pc, #112]	; (8001920 <xTaskResumeAll+0x11c>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d1cc      	bne.n	800184e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80018ba:	f000 faed 	bl	8001e98 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80018be:	4b1d      	ldr	r3, [pc, #116]	; (8001934 <xTaskResumeAll+0x130>)
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d010      	beq.n	80018ec <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80018ca:	f000 f837 	bl	800193c <xTaskIncrementTick>
 80018ce:	4603      	mov	r3, r0
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d002      	beq.n	80018da <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80018d4:	4b16      	ldr	r3, [pc, #88]	; (8001930 <xTaskResumeAll+0x12c>)
 80018d6:	2201      	movs	r2, #1
 80018d8:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	3b01      	subs	r3, #1
 80018de:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d1f1      	bne.n	80018ca <xTaskResumeAll+0xc6>

						xPendedTicks = 0;
 80018e6:	4b13      	ldr	r3, [pc, #76]	; (8001934 <xTaskResumeAll+0x130>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80018ec:	4b10      	ldr	r3, [pc, #64]	; (8001930 <xTaskResumeAll+0x12c>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d009      	beq.n	8001908 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80018f4:	2301      	movs	r3, #1
 80018f6:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80018f8:	4b0f      	ldr	r3, [pc, #60]	; (8001938 <xTaskResumeAll+0x134>)
 80018fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80018fe:	601a      	str	r2, [r3, #0]
 8001900:	f3bf 8f4f 	dsb	sy
 8001904:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8001908:	f000 fdb6 	bl	8002478 <vPortExitCritical>

	return xAlreadyYielded;
 800190c:	68bb      	ldr	r3, [r7, #8]
}
 800190e:	4618      	mov	r0, r3
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}
 8001916:	bf00      	nop
 8001918:	200001a8 	.word	0x200001a8
 800191c:	20000180 	.word	0x20000180
 8001920:	20000140 	.word	0x20000140
 8001924:	20000188 	.word	0x20000188
 8001928:	200000ac 	.word	0x200000ac
 800192c:	200000a8 	.word	0x200000a8
 8001930:	20000194 	.word	0x20000194
 8001934:	20000190 	.word	0x20000190
 8001938:	e000ed04 	.word	0xe000ed04

0800193c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800193c:	b580      	push	{r7, lr}
 800193e:	b086      	sub	sp, #24
 8001940:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8001942:	2300      	movs	r3, #0
 8001944:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001946:	4b4e      	ldr	r3, [pc, #312]	; (8001a80 <xTaskIncrementTick+0x144>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2b00      	cmp	r3, #0
 800194c:	f040 808d 	bne.w	8001a6a <xTaskIncrementTick+0x12e>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8001950:	4b4c      	ldr	r3, [pc, #304]	; (8001a84 <xTaskIncrementTick+0x148>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	3301      	adds	r3, #1
 8001956:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8001958:	4a4a      	ldr	r2, [pc, #296]	; (8001a84 <xTaskIncrementTick+0x148>)
 800195a:	693b      	ldr	r3, [r7, #16]
 800195c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800195e:	693b      	ldr	r3, [r7, #16]
 8001960:	2b00      	cmp	r3, #0
 8001962:	d11f      	bne.n	80019a4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 8001964:	4b48      	ldr	r3, [pc, #288]	; (8001a88 <xTaskIncrementTick+0x14c>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	681b      	ldr	r3, [r3, #0]
 800196a:	2b00      	cmp	r3, #0
 800196c:	d009      	beq.n	8001982 <xTaskIncrementTick+0x46>
 800196e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001972:	f383 8811 	msr	BASEPRI, r3
 8001976:	f3bf 8f6f 	isb	sy
 800197a:	f3bf 8f4f 	dsb	sy
 800197e:	603b      	str	r3, [r7, #0]
 8001980:	e7fe      	b.n	8001980 <xTaskIncrementTick+0x44>
 8001982:	4b41      	ldr	r3, [pc, #260]	; (8001a88 <xTaskIncrementTick+0x14c>)
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	60fb      	str	r3, [r7, #12]
 8001988:	4b40      	ldr	r3, [pc, #256]	; (8001a8c <xTaskIncrementTick+0x150>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a3e      	ldr	r2, [pc, #248]	; (8001a88 <xTaskIncrementTick+0x14c>)
 800198e:	6013      	str	r3, [r2, #0]
 8001990:	4a3e      	ldr	r2, [pc, #248]	; (8001a8c <xTaskIncrementTick+0x150>)
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	6013      	str	r3, [r2, #0]
 8001996:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <xTaskIncrementTick+0x154>)
 8001998:	681b      	ldr	r3, [r3, #0]
 800199a:	3301      	adds	r3, #1
 800199c:	4a3c      	ldr	r2, [pc, #240]	; (8001a90 <xTaskIncrementTick+0x154>)
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	f000 fa7a 	bl	8001e98 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80019a4:	4b3b      	ldr	r3, [pc, #236]	; (8001a94 <xTaskIncrementTick+0x158>)
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	693a      	ldr	r2, [r7, #16]
 80019aa:	429a      	cmp	r2, r3
 80019ac:	d348      	bcc.n	8001a40 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80019ae:	4b36      	ldr	r3, [pc, #216]	; (8001a88 <xTaskIncrementTick+0x14c>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	2b00      	cmp	r3, #0
 80019b6:	d104      	bne.n	80019c2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80019b8:	4b36      	ldr	r3, [pc, #216]	; (8001a94 <xTaskIncrementTick+0x158>)
 80019ba:	f04f 32ff 	mov.w	r2, #4294967295
 80019be:	601a      	str	r2, [r3, #0]
					break;
 80019c0:	e03e      	b.n	8001a40 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80019c2:	4b31      	ldr	r3, [pc, #196]	; (8001a88 <xTaskIncrementTick+0x14c>)
 80019c4:	681b      	ldr	r3, [r3, #0]
 80019c6:	68db      	ldr	r3, [r3, #12]
 80019c8:	68db      	ldr	r3, [r3, #12]
 80019ca:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	429a      	cmp	r2, r3
 80019d8:	d203      	bcs.n	80019e2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80019da:	4a2e      	ldr	r2, [pc, #184]	; (8001a94 <xTaskIncrementTick+0x158>)
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80019e0:	e02e      	b.n	8001a40 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	3304      	adds	r3, #4
 80019e6:	4618      	mov	r0, r3
 80019e8:	f7ff fa32 	bl	8000e50 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d004      	beq.n	80019fe <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	3318      	adds	r3, #24
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fa29 	bl	8000e50 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80019fe:	68bb      	ldr	r3, [r7, #8]
 8001a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a02:	2201      	movs	r2, #1
 8001a04:	409a      	lsls	r2, r3
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <xTaskIncrementTick+0x15c>)
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	4313      	orrs	r3, r2
 8001a0c:	4a22      	ldr	r2, [pc, #136]	; (8001a98 <xTaskIncrementTick+0x15c>)
 8001a0e:	6013      	str	r3, [r2, #0]
 8001a10:	68bb      	ldr	r3, [r7, #8]
 8001a12:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a14:	4613      	mov	r3, r2
 8001a16:	009b      	lsls	r3, r3, #2
 8001a18:	4413      	add	r3, r2
 8001a1a:	009b      	lsls	r3, r3, #2
 8001a1c:	4a1f      	ldr	r2, [pc, #124]	; (8001a9c <xTaskIncrementTick+0x160>)
 8001a1e:	441a      	add	r2, r3
 8001a20:	68bb      	ldr	r3, [r7, #8]
 8001a22:	3304      	adds	r3, #4
 8001a24:	4619      	mov	r1, r3
 8001a26:	4610      	mov	r0, r2
 8001a28:	f7ff f9b5 	bl	8000d96 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a30:	4b1b      	ldr	r3, [pc, #108]	; (8001aa0 <xTaskIncrementTick+0x164>)
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001a36:	429a      	cmp	r2, r3
 8001a38:	d3b9      	bcc.n	80019ae <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001a3e:	e7b6      	b.n	80019ae <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8001a40:	4b17      	ldr	r3, [pc, #92]	; (8001aa0 <xTaskIncrementTick+0x164>)
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a46:	4915      	ldr	r1, [pc, #84]	; (8001a9c <xTaskIncrementTick+0x160>)
 8001a48:	4613      	mov	r3, r2
 8001a4a:	009b      	lsls	r3, r3, #2
 8001a4c:	4413      	add	r3, r2
 8001a4e:	009b      	lsls	r3, r3, #2
 8001a50:	440b      	add	r3, r1
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d901      	bls.n	8001a5c <xTaskIncrementTick+0x120>
			{
				xSwitchRequired = pdTRUE;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <xTaskIncrementTick+0x168>)
 8001a5e:	681b      	ldr	r3, [r3, #0]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d007      	beq.n	8001a74 <xTaskIncrementTick+0x138>
			{
				xSwitchRequired = pdTRUE;
 8001a64:	2301      	movs	r3, #1
 8001a66:	617b      	str	r3, [r7, #20]
 8001a68:	e004      	b.n	8001a74 <xTaskIncrementTick+0x138>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8001a6a:	4b0f      	ldr	r3, [pc, #60]	; (8001aa8 <xTaskIncrementTick+0x16c>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	3301      	adds	r3, #1
 8001a70:	4a0d      	ldr	r2, [pc, #52]	; (8001aa8 <xTaskIncrementTick+0x16c>)
 8001a72:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8001a74:	697b      	ldr	r3, [r7, #20]
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	200001a8 	.word	0x200001a8
 8001a84:	20000184 	.word	0x20000184
 8001a88:	20000138 	.word	0x20000138
 8001a8c:	2000013c 	.word	0x2000013c
 8001a90:	20000198 	.word	0x20000198
 8001a94:	200001a0 	.word	0x200001a0
 8001a98:	20000188 	.word	0x20000188
 8001a9c:	200000ac 	.word	0x200000ac
 8001aa0:	200000a8 	.word	0x200000a8
 8001aa4:	20000194 	.word	0x20000194
 8001aa8:	20000190 	.word	0x20000190

08001aac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8001aac:	b480      	push	{r7}
 8001aae:	b087      	sub	sp, #28
 8001ab0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8001ab2:	4b26      	ldr	r3, [pc, #152]	; (8001b4c <vTaskSwitchContext+0xa0>)
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d003      	beq.n	8001ac2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8001aba:	4b25      	ldr	r3, [pc, #148]	; (8001b50 <vTaskSwitchContext+0xa4>)
 8001abc:	2201      	movs	r2, #1
 8001abe:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8001ac0:	e03e      	b.n	8001b40 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 8001ac2:	4b23      	ldr	r3, [pc, #140]	; (8001b50 <vTaskSwitchContext+0xa4>)
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001ac8:	4b22      	ldr	r3, [pc, #136]	; (8001b54 <vTaskSwitchContext+0xa8>)
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	fab3 f383 	clz	r3, r3
 8001ad4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8001ad6:	7afb      	ldrb	r3, [r7, #11]
 8001ad8:	f1c3 031f 	rsb	r3, r3, #31
 8001adc:	617b      	str	r3, [r7, #20]
 8001ade:	491e      	ldr	r1, [pc, #120]	; (8001b58 <vTaskSwitchContext+0xac>)
 8001ae0:	697a      	ldr	r2, [r7, #20]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	009b      	lsls	r3, r3, #2
 8001ae6:	4413      	add	r3, r2
 8001ae8:	009b      	lsls	r3, r3, #2
 8001aea:	440b      	add	r3, r1
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d109      	bne.n	8001b06 <vTaskSwitchContext+0x5a>
	__asm volatile
 8001af2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001af6:	f383 8811 	msr	BASEPRI, r3
 8001afa:	f3bf 8f6f 	isb	sy
 8001afe:	f3bf 8f4f 	dsb	sy
 8001b02:	607b      	str	r3, [r7, #4]
 8001b04:	e7fe      	b.n	8001b04 <vTaskSwitchContext+0x58>
 8001b06:	697a      	ldr	r2, [r7, #20]
 8001b08:	4613      	mov	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	4413      	add	r3, r2
 8001b0e:	009b      	lsls	r3, r3, #2
 8001b10:	4a11      	ldr	r2, [pc, #68]	; (8001b58 <vTaskSwitchContext+0xac>)
 8001b12:	4413      	add	r3, r2
 8001b14:	613b      	str	r3, [r7, #16]
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	685b      	ldr	r3, [r3, #4]
 8001b1a:	685a      	ldr	r2, [r3, #4]
 8001b1c:	693b      	ldr	r3, [r7, #16]
 8001b1e:	605a      	str	r2, [r3, #4]
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	685a      	ldr	r2, [r3, #4]
 8001b24:	693b      	ldr	r3, [r7, #16]
 8001b26:	3308      	adds	r3, #8
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d104      	bne.n	8001b36 <vTaskSwitchContext+0x8a>
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	685a      	ldr	r2, [r3, #4]
 8001b32:	693b      	ldr	r3, [r7, #16]
 8001b34:	605a      	str	r2, [r3, #4]
 8001b36:	693b      	ldr	r3, [r7, #16]
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	68db      	ldr	r3, [r3, #12]
 8001b3c:	4a07      	ldr	r2, [pc, #28]	; (8001b5c <vTaskSwitchContext+0xb0>)
 8001b3e:	6013      	str	r3, [r2, #0]
}
 8001b40:	bf00      	nop
 8001b42:	371c      	adds	r7, #28
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr
 8001b4c:	200001a8 	.word	0x200001a8
 8001b50:	20000194 	.word	0x20000194
 8001b54:	20000188 	.word	0x20000188
 8001b58:	200000ac 	.word	0x200000ac
 8001b5c:	200000a8 	.word	0x200000a8

08001b60 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8001b60:	b580      	push	{r7, lr}
 8001b62:	b084      	sub	sp, #16
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d109      	bne.n	8001b84 <vTaskPlaceOnEventList+0x24>
 8001b70:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001b74:	f383 8811 	msr	BASEPRI, r3
 8001b78:	f3bf 8f6f 	isb	sy
 8001b7c:	f3bf 8f4f 	dsb	sy
 8001b80:	60fb      	str	r3, [r7, #12]
 8001b82:	e7fe      	b.n	8001b82 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8001b84:	4b07      	ldr	r3, [pc, #28]	; (8001ba4 <vTaskPlaceOnEventList+0x44>)
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	3318      	adds	r3, #24
 8001b8a:	4619      	mov	r1, r3
 8001b8c:	6878      	ldr	r0, [r7, #4]
 8001b8e:	f7ff f926 	bl	8000dde <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8001b92:	2101      	movs	r1, #1
 8001b94:	6838      	ldr	r0, [r7, #0]
 8001b96:	f000 fab5 	bl	8002104 <prvAddCurrentTaskToDelayedList>
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	200000a8 	.word	0x200000a8

08001ba8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b086      	sub	sp, #24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	68db      	ldr	r3, [r3, #12]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8001bb8:	693b      	ldr	r3, [r7, #16]
 8001bba:	2b00      	cmp	r3, #0
 8001bbc:	d109      	bne.n	8001bd2 <xTaskRemoveFromEventList+0x2a>
 8001bbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001bc2:	f383 8811 	msr	BASEPRI, r3
 8001bc6:	f3bf 8f6f 	isb	sy
 8001bca:	f3bf 8f4f 	dsb	sy
 8001bce:	60fb      	str	r3, [r7, #12]
 8001bd0:	e7fe      	b.n	8001bd0 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8001bd2:	693b      	ldr	r3, [r7, #16]
 8001bd4:	3318      	adds	r3, #24
 8001bd6:	4618      	mov	r0, r3
 8001bd8:	f7ff f93a 	bl	8000e50 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8001bdc:	4b1d      	ldr	r3, [pc, #116]	; (8001c54 <xTaskRemoveFromEventList+0xac>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d11c      	bne.n	8001c1e <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8001be4:	693b      	ldr	r3, [r7, #16]
 8001be6:	3304      	adds	r3, #4
 8001be8:	4618      	mov	r0, r3
 8001bea:	f7ff f931 	bl	8000e50 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8001bee:	693b      	ldr	r3, [r7, #16]
 8001bf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf2:	2201      	movs	r2, #1
 8001bf4:	409a      	lsls	r2, r3
 8001bf6:	4b18      	ldr	r3, [pc, #96]	; (8001c58 <xTaskRemoveFromEventList+0xb0>)
 8001bf8:	681b      	ldr	r3, [r3, #0]
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	4a16      	ldr	r2, [pc, #88]	; (8001c58 <xTaskRemoveFromEventList+0xb0>)
 8001bfe:	6013      	str	r3, [r2, #0]
 8001c00:	693b      	ldr	r3, [r7, #16]
 8001c02:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c04:	4613      	mov	r3, r2
 8001c06:	009b      	lsls	r3, r3, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	009b      	lsls	r3, r3, #2
 8001c0c:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <xTaskRemoveFromEventList+0xb4>)
 8001c0e:	441a      	add	r2, r3
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	3304      	adds	r3, #4
 8001c14:	4619      	mov	r1, r3
 8001c16:	4610      	mov	r0, r2
 8001c18:	f7ff f8bd 	bl	8000d96 <vListInsertEnd>
 8001c1c:	e005      	b.n	8001c2a <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8001c1e:	693b      	ldr	r3, [r7, #16]
 8001c20:	3318      	adds	r3, #24
 8001c22:	4619      	mov	r1, r3
 8001c24:	480e      	ldr	r0, [pc, #56]	; (8001c60 <xTaskRemoveFromEventList+0xb8>)
 8001c26:	f7ff f8b6 	bl	8000d96 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001c2e:	4b0d      	ldr	r3, [pc, #52]	; (8001c64 <xTaskRemoveFromEventList+0xbc>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001c34:	429a      	cmp	r2, r3
 8001c36:	d905      	bls.n	8001c44 <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8001c3c:	4b0a      	ldr	r3, [pc, #40]	; (8001c68 <xTaskRemoveFromEventList+0xc0>)
 8001c3e:	2201      	movs	r2, #1
 8001c40:	601a      	str	r2, [r3, #0]
 8001c42:	e001      	b.n	8001c48 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 8001c44:	2300      	movs	r3, #0
 8001c46:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8001c48:	697b      	ldr	r3, [r7, #20]
}
 8001c4a:	4618      	mov	r0, r3
 8001c4c:	3718      	adds	r7, #24
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bd80      	pop	{r7, pc}
 8001c52:	bf00      	nop
 8001c54:	200001a8 	.word	0x200001a8
 8001c58:	20000188 	.word	0x20000188
 8001c5c:	200000ac 	.word	0x200000ac
 8001c60:	20000140 	.word	0x20000140
 8001c64:	200000a8 	.word	0x200000a8
 8001c68:	20000194 	.word	0x20000194

08001c6c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8001c74:	4b06      	ldr	r3, [pc, #24]	; (8001c90 <vTaskInternalSetTimeOutState+0x24>)
 8001c76:	681a      	ldr	r2, [r3, #0]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8001c7c:	4b05      	ldr	r3, [pc, #20]	; (8001c94 <vTaskInternalSetTimeOutState+0x28>)
 8001c7e:	681a      	ldr	r2, [r3, #0]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	605a      	str	r2, [r3, #4]
}
 8001c84:	bf00      	nop
 8001c86:	370c      	adds	r7, #12
 8001c88:	46bd      	mov	sp, r7
 8001c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c8e:	4770      	bx	lr
 8001c90:	20000198 	.word	0x20000198
 8001c94:	20000184 	.word	0x20000184

08001c98 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b088      	sub	sp, #32
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
 8001ca0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d109      	bne.n	8001cbc <xTaskCheckForTimeOut+0x24>
 8001ca8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cac:	f383 8811 	msr	BASEPRI, r3
 8001cb0:	f3bf 8f6f 	isb	sy
 8001cb4:	f3bf 8f4f 	dsb	sy
 8001cb8:	613b      	str	r3, [r7, #16]
 8001cba:	e7fe      	b.n	8001cba <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 8001cbc:	683b      	ldr	r3, [r7, #0]
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d109      	bne.n	8001cd6 <xTaskCheckForTimeOut+0x3e>
 8001cc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001cc6:	f383 8811 	msr	BASEPRI, r3
 8001cca:	f3bf 8f6f 	isb	sy
 8001cce:	f3bf 8f4f 	dsb	sy
 8001cd2:	60fb      	str	r3, [r7, #12]
 8001cd4:	e7fe      	b.n	8001cd4 <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 8001cd6:	f000 fba1 	bl	800241c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8001cda:	4b1d      	ldr	r3, [pc, #116]	; (8001d50 <xTaskCheckForTimeOut+0xb8>)
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	69ba      	ldr	r2, [r7, #24]
 8001ce6:	1ad3      	subs	r3, r2, r3
 8001ce8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8001cea:	683b      	ldr	r3, [r7, #0]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cf2:	d102      	bne.n	8001cfa <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	61fb      	str	r3, [r7, #28]
 8001cf8:	e023      	b.n	8001d42 <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	681a      	ldr	r2, [r3, #0]
 8001cfe:	4b15      	ldr	r3, [pc, #84]	; (8001d54 <xTaskCheckForTimeOut+0xbc>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	429a      	cmp	r2, r3
 8001d04:	d007      	beq.n	8001d16 <xTaskCheckForTimeOut+0x7e>
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	685b      	ldr	r3, [r3, #4]
 8001d0a:	69ba      	ldr	r2, [r7, #24]
 8001d0c:	429a      	cmp	r2, r3
 8001d0e:	d302      	bcc.n	8001d16 <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8001d10:	2301      	movs	r3, #1
 8001d12:	61fb      	str	r3, [r7, #28]
 8001d14:	e015      	b.n	8001d42 <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	697a      	ldr	r2, [r7, #20]
 8001d1c:	429a      	cmp	r2, r3
 8001d1e:	d20b      	bcs.n	8001d38 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	681a      	ldr	r2, [r3, #0]
 8001d24:	697b      	ldr	r3, [r7, #20]
 8001d26:	1ad2      	subs	r2, r2, r3
 8001d28:	683b      	ldr	r3, [r7, #0]
 8001d2a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8001d2c:	6878      	ldr	r0, [r7, #4]
 8001d2e:	f7ff ff9d 	bl	8001c6c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8001d32:	2300      	movs	r3, #0
 8001d34:	61fb      	str	r3, [r7, #28]
 8001d36:	e004      	b.n	8001d42 <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	2200      	movs	r2, #0
 8001d3c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8001d42:	f000 fb99 	bl	8002478 <vPortExitCritical>

	return xReturn;
 8001d46:	69fb      	ldr	r3, [r7, #28]
}
 8001d48:	4618      	mov	r0, r3
 8001d4a:	3720      	adds	r7, #32
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}
 8001d50:	20000184 	.word	0x20000184
 8001d54:	20000198 	.word	0x20000198

08001d58 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8001d58:	b480      	push	{r7}
 8001d5a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8001d5c:	4b03      	ldr	r3, [pc, #12]	; (8001d6c <vTaskMissedYield+0x14>)
 8001d5e:	2201      	movs	r2, #1
 8001d60:	601a      	str	r2, [r3, #0]
}
 8001d62:	bf00      	nop
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	20000194 	.word	0x20000194

08001d70 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8001d78:	f000 f852 	bl	8001e20 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8001d7c:	4b06      	ldr	r3, [pc, #24]	; (8001d98 <prvIdleTask+0x28>)
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	2b01      	cmp	r3, #1
 8001d82:	d9f9      	bls.n	8001d78 <prvIdleTask+0x8>
			{
				taskYIELD();
 8001d84:	4b05      	ldr	r3, [pc, #20]	; (8001d9c <prvIdleTask+0x2c>)
 8001d86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	f3bf 8f4f 	dsb	sy
 8001d90:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8001d94:	e7f0      	b.n	8001d78 <prvIdleTask+0x8>
 8001d96:	bf00      	nop
 8001d98:	200000ac 	.word	0x200000ac
 8001d9c:	e000ed04 	.word	0xe000ed04

08001da0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8001da0:	b580      	push	{r7, lr}
 8001da2:	b082      	sub	sp, #8
 8001da4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001da6:	2300      	movs	r3, #0
 8001da8:	607b      	str	r3, [r7, #4]
 8001daa:	e00c      	b.n	8001dc6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8001dac:	687a      	ldr	r2, [r7, #4]
 8001dae:	4613      	mov	r3, r2
 8001db0:	009b      	lsls	r3, r3, #2
 8001db2:	4413      	add	r3, r2
 8001db4:	009b      	lsls	r3, r3, #2
 8001db6:	4a12      	ldr	r2, [pc, #72]	; (8001e00 <prvInitialiseTaskLists+0x60>)
 8001db8:	4413      	add	r3, r2
 8001dba:	4618      	mov	r0, r3
 8001dbc:	f7fe ffbe 	bl	8000d3c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	3301      	adds	r3, #1
 8001dc4:	607b      	str	r3, [r7, #4]
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	2b04      	cmp	r3, #4
 8001dca:	d9ef      	bls.n	8001dac <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8001dcc:	480d      	ldr	r0, [pc, #52]	; (8001e04 <prvInitialiseTaskLists+0x64>)
 8001dce:	f7fe ffb5 	bl	8000d3c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8001dd2:	480d      	ldr	r0, [pc, #52]	; (8001e08 <prvInitialiseTaskLists+0x68>)
 8001dd4:	f7fe ffb2 	bl	8000d3c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8001dd8:	480c      	ldr	r0, [pc, #48]	; (8001e0c <prvInitialiseTaskLists+0x6c>)
 8001dda:	f7fe ffaf 	bl	8000d3c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8001dde:	480c      	ldr	r0, [pc, #48]	; (8001e10 <prvInitialiseTaskLists+0x70>)
 8001de0:	f7fe ffac 	bl	8000d3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8001de4:	480b      	ldr	r0, [pc, #44]	; (8001e14 <prvInitialiseTaskLists+0x74>)
 8001de6:	f7fe ffa9 	bl	8000d3c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8001dea:	4b0b      	ldr	r3, [pc, #44]	; (8001e18 <prvInitialiseTaskLists+0x78>)
 8001dec:	4a05      	ldr	r2, [pc, #20]	; (8001e04 <prvInitialiseTaskLists+0x64>)
 8001dee:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8001df0:	4b0a      	ldr	r3, [pc, #40]	; (8001e1c <prvInitialiseTaskLists+0x7c>)
 8001df2:	4a05      	ldr	r2, [pc, #20]	; (8001e08 <prvInitialiseTaskLists+0x68>)
 8001df4:	601a      	str	r2, [r3, #0]
}
 8001df6:	bf00      	nop
 8001df8:	3708      	adds	r7, #8
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	bd80      	pop	{r7, pc}
 8001dfe:	bf00      	nop
 8001e00:	200000ac 	.word	0x200000ac
 8001e04:	20000110 	.word	0x20000110
 8001e08:	20000124 	.word	0x20000124
 8001e0c:	20000140 	.word	0x20000140
 8001e10:	20000154 	.word	0x20000154
 8001e14:	2000016c 	.word	0x2000016c
 8001e18:	20000138 	.word	0x20000138
 8001e1c:	2000013c 	.word	0x2000013c

08001e20 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b082      	sub	sp, #8
 8001e24:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e26:	e019      	b.n	8001e5c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8001e28:	f000 faf8 	bl	800241c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001e2c:	4b0f      	ldr	r3, [pc, #60]	; (8001e6c <prvCheckTasksWaitingTermination+0x4c>)
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	68db      	ldr	r3, [r3, #12]
 8001e32:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	3304      	adds	r3, #4
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff f809 	bl	8000e50 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8001e3e:	4b0c      	ldr	r3, [pc, #48]	; (8001e70 <prvCheckTasksWaitingTermination+0x50>)
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	3b01      	subs	r3, #1
 8001e44:	4a0a      	ldr	r2, [pc, #40]	; (8001e70 <prvCheckTasksWaitingTermination+0x50>)
 8001e46:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8001e48:	4b0a      	ldr	r3, [pc, #40]	; (8001e74 <prvCheckTasksWaitingTermination+0x54>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	3b01      	subs	r3, #1
 8001e4e:	4a09      	ldr	r2, [pc, #36]	; (8001e74 <prvCheckTasksWaitingTermination+0x54>)
 8001e50:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8001e52:	f000 fb11 	bl	8002478 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8001e56:	6878      	ldr	r0, [r7, #4]
 8001e58:	f000 f80e 	bl	8001e78 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8001e5c:	4b05      	ldr	r3, [pc, #20]	; (8001e74 <prvCheckTasksWaitingTermination+0x54>)
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d1e1      	bne.n	8001e28 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	20000154 	.word	0x20000154
 8001e70:	20000180 	.word	0x20000180
 8001e74:	20000168 	.word	0x20000168

08001e78 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b082      	sub	sp, #8
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e84:	4618      	mov	r0, r3
 8001e86:	f000 fcab 	bl	80027e0 <vPortFree>
			vPortFree( pxTCB );
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f000 fca8 	bl	80027e0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8001e90:	bf00      	nop
 8001e92:	3708      	adds	r7, #8
 8001e94:	46bd      	mov	sp, r7
 8001e96:	bd80      	pop	{r7, pc}

08001e98 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8001e98:	b480      	push	{r7}
 8001e9a:	b083      	sub	sp, #12
 8001e9c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8001e9e:	4b0c      	ldr	r3, [pc, #48]	; (8001ed0 <prvResetNextTaskUnblockTime+0x38>)
 8001ea0:	681b      	ldr	r3, [r3, #0]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d104      	bne.n	8001eb2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8001ea8:	4b0a      	ldr	r3, [pc, #40]	; (8001ed4 <prvResetNextTaskUnblockTime+0x3c>)
 8001eaa:	f04f 32ff 	mov.w	r2, #4294967295
 8001eae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8001eb0:	e008      	b.n	8001ec4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8001eb2:	4b07      	ldr	r3, [pc, #28]	; (8001ed0 <prvResetNextTaskUnblockTime+0x38>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	685b      	ldr	r3, [r3, #4]
 8001ec0:	4a04      	ldr	r2, [pc, #16]	; (8001ed4 <prvResetNextTaskUnblockTime+0x3c>)
 8001ec2:	6013      	str	r3, [r2, #0]
}
 8001ec4:	bf00      	nop
 8001ec6:	370c      	adds	r7, #12
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ece:	4770      	bx	lr
 8001ed0:	20000138 	.word	0x20000138
 8001ed4:	200001a0 	.word	0x200001a0

08001ed8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b084      	sub	sp, #16
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8001ee4:	2300      	movs	r3, #0
 8001ee6:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d05e      	beq.n	8001fac <xTaskPriorityInherit+0xd4>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef2:	4b31      	ldr	r3, [pc, #196]	; (8001fb8 <xTaskPriorityInherit+0xe0>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	d24e      	bcs.n	8001f9a <xTaskPriorityInherit+0xc2>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	699b      	ldr	r3, [r3, #24]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	db06      	blt.n	8001f12 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8001f04:	4b2c      	ldr	r3, [pc, #176]	; (8001fb8 <xTaskPriorityInherit+0xe0>)
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f0a:	f1c3 0205 	rsb	r2, r3, #5
 8001f0e:	68bb      	ldr	r3, [r7, #8]
 8001f10:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8001f12:	68bb      	ldr	r3, [r7, #8]
 8001f14:	6959      	ldr	r1, [r3, #20]
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f1a:	4613      	mov	r3, r2
 8001f1c:	009b      	lsls	r3, r3, #2
 8001f1e:	4413      	add	r3, r2
 8001f20:	009b      	lsls	r3, r3, #2
 8001f22:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <xTaskPriorityInherit+0xe4>)
 8001f24:	4413      	add	r3, r2
 8001f26:	4299      	cmp	r1, r3
 8001f28:	d12f      	bne.n	8001f8a <xTaskPriorityInherit+0xb2>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe ff8e 	bl	8000e50 <uxListRemove>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d10a      	bne.n	8001f50 <xTaskPriorityInherit+0x78>
					{
						/* It is known that the task is in its ready list so
						there is no need to check again and the port level
						reset macro can be called directly. */
						portRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority, uxTopReadyPriority );
 8001f3a:	68bb      	ldr	r3, [r7, #8]
 8001f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f3e:	2201      	movs	r2, #1
 8001f40:	fa02 f303 	lsl.w	r3, r2, r3
 8001f44:	43da      	mvns	r2, r3
 8001f46:	4b1e      	ldr	r3, [pc, #120]	; (8001fc0 <xTaskPriorityInherit+0xe8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	4a1c      	ldr	r2, [pc, #112]	; (8001fc0 <xTaskPriorityInherit+0xe8>)
 8001f4e:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001f50:	4b19      	ldr	r3, [pc, #100]	; (8001fb8 <xTaskPriorityInherit+0xe0>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f56:	68bb      	ldr	r3, [r7, #8]
 8001f58:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8001f5a:	68bb      	ldr	r3, [r7, #8]
 8001f5c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f5e:	2201      	movs	r2, #1
 8001f60:	409a      	lsls	r2, r3
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <xTaskPriorityInherit+0xe8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	4313      	orrs	r3, r2
 8001f68:	4a15      	ldr	r2, [pc, #84]	; (8001fc0 <xTaskPriorityInherit+0xe8>)
 8001f6a:	6013      	str	r3, [r2, #0]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
 8001f6e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f70:	4613      	mov	r3, r2
 8001f72:	009b      	lsls	r3, r3, #2
 8001f74:	4413      	add	r3, r2
 8001f76:	009b      	lsls	r3, r3, #2
 8001f78:	4a10      	ldr	r2, [pc, #64]	; (8001fbc <xTaskPriorityInherit+0xe4>)
 8001f7a:	441a      	add	r2, r3
 8001f7c:	68bb      	ldr	r3, [r7, #8]
 8001f7e:	3304      	adds	r3, #4
 8001f80:	4619      	mov	r1, r3
 8001f82:	4610      	mov	r0, r2
 8001f84:	f7fe ff07 	bl	8000d96 <vListInsertEnd>
 8001f88:	e004      	b.n	8001f94 <xTaskPriorityInherit+0xbc>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8001f8a:	4b0b      	ldr	r3, [pc, #44]	; (8001fb8 <xTaskPriorityInherit+0xe0>)
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001f90:	68bb      	ldr	r3, [r7, #8]
 8001f92:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	60fb      	str	r3, [r7, #12]
 8001f98:	e008      	b.n	8001fac <xTaskPriorityInherit+0xd4>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8001f9a:	68bb      	ldr	r3, [r7, #8]
 8001f9c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8001f9e:	4b06      	ldr	r3, [pc, #24]	; (8001fb8 <xTaskPriorityInherit+0xe0>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001fa4:	429a      	cmp	r2, r3
 8001fa6:	d201      	bcs.n	8001fac <xTaskPriorityInherit+0xd4>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8001fa8:	2301      	movs	r3, #1
 8001faa:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8001fac:	68fb      	ldr	r3, [r7, #12]
	}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3710      	adds	r7, #16
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}
 8001fb6:	bf00      	nop
 8001fb8:	200000a8 	.word	0x200000a8
 8001fbc:	200000ac 	.word	0x200000ac
 8001fc0:	20000188 	.word	0x20000188

08001fc4 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	b088      	sub	sp, #32
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d075      	beq.n	80020c8 <vTaskPriorityDisinheritAfterTimeout+0x104>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8001fdc:	69bb      	ldr	r3, [r7, #24]
 8001fde:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d109      	bne.n	8001ff8 <vTaskPriorityDisinheritAfterTimeout+0x34>
 8001fe4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8001fe8:	f383 8811 	msr	BASEPRI, r3
 8001fec:	f3bf 8f6f 	isb	sy
 8001ff0:	f3bf 8f4f 	dsb	sy
 8001ff4:	60fb      	str	r3, [r7, #12]
 8001ff6:	e7fe      	b.n	8001ff6 <vTaskPriorityDisinheritAfterTimeout+0x32>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8001ff8:	69bb      	ldr	r3, [r7, #24]
 8001ffa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ffc:	683a      	ldr	r2, [r7, #0]
 8001ffe:	429a      	cmp	r2, r3
 8002000:	d902      	bls.n	8002008 <vTaskPriorityDisinheritAfterTimeout+0x44>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	61fb      	str	r3, [r7, #28]
 8002006:	e002      	b.n	800200e <vTaskPriorityDisinheritAfterTimeout+0x4a>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8002008:	69bb      	ldr	r3, [r7, #24]
 800200a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800200c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002012:	69fa      	ldr	r2, [r7, #28]
 8002014:	429a      	cmp	r2, r3
 8002016:	d057      	beq.n	80020c8 <vTaskPriorityDisinheritAfterTimeout+0x104>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8002018:	69bb      	ldr	r3, [r7, #24]
 800201a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	429a      	cmp	r2, r3
 8002020:	d152      	bne.n	80020c8 <vTaskPriorityDisinheritAfterTimeout+0x104>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8002022:	4b2b      	ldr	r3, [pc, #172]	; (80020d0 <vTaskPriorityDisinheritAfterTimeout+0x10c>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	69ba      	ldr	r2, [r7, #24]
 8002028:	429a      	cmp	r2, r3
 800202a:	d109      	bne.n	8002040 <vTaskPriorityDisinheritAfterTimeout+0x7c>
 800202c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002030:	f383 8811 	msr	BASEPRI, r3
 8002034:	f3bf 8f6f 	isb	sy
 8002038:	f3bf 8f4f 	dsb	sy
 800203c:	60bb      	str	r3, [r7, #8]
 800203e:	e7fe      	b.n	800203e <vTaskPriorityDisinheritAfterTimeout+0x7a>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8002040:	69bb      	ldr	r3, [r7, #24]
 8002042:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002044:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8002046:	69bb      	ldr	r3, [r7, #24]
 8002048:	69fa      	ldr	r2, [r7, #28]
 800204a:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800204c:	69bb      	ldr	r3, [r7, #24]
 800204e:	699b      	ldr	r3, [r3, #24]
 8002050:	2b00      	cmp	r3, #0
 8002052:	db04      	blt.n	800205e <vTaskPriorityDisinheritAfterTimeout+0x9a>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8002054:	69fb      	ldr	r3, [r7, #28]
 8002056:	f1c3 0205 	rsb	r2, r3, #5
 800205a:	69bb      	ldr	r3, [r7, #24]
 800205c:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800205e:	69bb      	ldr	r3, [r7, #24]
 8002060:	6959      	ldr	r1, [r3, #20]
 8002062:	693a      	ldr	r2, [r7, #16]
 8002064:	4613      	mov	r3, r2
 8002066:	009b      	lsls	r3, r3, #2
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4a19      	ldr	r2, [pc, #100]	; (80020d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 800206e:	4413      	add	r3, r2
 8002070:	4299      	cmp	r1, r3
 8002072:	d129      	bne.n	80020c8 <vTaskPriorityDisinheritAfterTimeout+0x104>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002074:	69bb      	ldr	r3, [r7, #24]
 8002076:	3304      	adds	r3, #4
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fee9 	bl	8000e50 <uxListRemove>
 800207e:	4603      	mov	r3, r0
 8002080:	2b00      	cmp	r3, #0
 8002082:	d10a      	bne.n	800209a <vTaskPriorityDisinheritAfterTimeout+0xd6>
						{
							/* It is known that the task is in its ready list so
							there is no need to check again and the port level
							reset macro can be called directly. */
							portRESET_READY_PRIORITY( pxTCB->uxPriority, uxTopReadyPriority );
 8002084:	69bb      	ldr	r3, [r7, #24]
 8002086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002088:	2201      	movs	r2, #1
 800208a:	fa02 f303 	lsl.w	r3, r2, r3
 800208e:	43da      	mvns	r2, r3
 8002090:	4b11      	ldr	r3, [pc, #68]	; (80020d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4013      	ands	r3, r2
 8002096:	4a10      	ldr	r2, [pc, #64]	; (80020d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 8002098:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800209a:	69bb      	ldr	r3, [r7, #24]
 800209c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800209e:	2201      	movs	r2, #1
 80020a0:	409a      	lsls	r2, r3
 80020a2:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	4313      	orrs	r3, r2
 80020a8:	4a0b      	ldr	r2, [pc, #44]	; (80020d8 <vTaskPriorityDisinheritAfterTimeout+0x114>)
 80020aa:	6013      	str	r3, [r2, #0]
 80020ac:	69bb      	ldr	r3, [r7, #24]
 80020ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80020b0:	4613      	mov	r3, r2
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	4413      	add	r3, r2
 80020b6:	009b      	lsls	r3, r3, #2
 80020b8:	4a06      	ldr	r2, [pc, #24]	; (80020d4 <vTaskPriorityDisinheritAfterTimeout+0x110>)
 80020ba:	441a      	add	r2, r3
 80020bc:	69bb      	ldr	r3, [r7, #24]
 80020be:	3304      	adds	r3, #4
 80020c0:	4619      	mov	r1, r3
 80020c2:	4610      	mov	r0, r2
 80020c4:	f7fe fe67 	bl	8000d96 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80020c8:	bf00      	nop
 80020ca:	3720      	adds	r7, #32
 80020cc:	46bd      	mov	sp, r7
 80020ce:	bd80      	pop	{r7, pc}
 80020d0:	200000a8 	.word	0x200000a8
 80020d4:	200000ac 	.word	0x200000ac
 80020d8:	20000188 	.word	0x20000188

080020dc <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 80020dc:	b480      	push	{r7}
 80020de:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <pvTaskIncrementMutexHeldCount+0x24>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d004      	beq.n	80020f2 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 80020e8:	4b05      	ldr	r3, [pc, #20]	; (8002100 <pvTaskIncrementMutexHeldCount+0x24>)
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80020ee:	3201      	adds	r2, #1
 80020f0:	64da      	str	r2, [r3, #76]	; 0x4c
		}

		return pxCurrentTCB;
 80020f2:	4b03      	ldr	r3, [pc, #12]	; (8002100 <pvTaskIncrementMutexHeldCount+0x24>)
 80020f4:	681b      	ldr	r3, [r3, #0]
	}
 80020f6:	4618      	mov	r0, r3
 80020f8:	46bd      	mov	sp, r7
 80020fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020fe:	4770      	bx	lr
 8002100:	200000a8 	.word	0x200000a8

08002104 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8002104:	b580      	push	{r7, lr}
 8002106:	b084      	sub	sp, #16
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
 800210c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800210e:	4b29      	ldr	r3, [pc, #164]	; (80021b4 <prvAddCurrentTaskToDelayedList+0xb0>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8002114:	4b28      	ldr	r3, [pc, #160]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	3304      	adds	r3, #4
 800211a:	4618      	mov	r0, r3
 800211c:	f7fe fe98 	bl	8000e50 <uxListRemove>
 8002120:	4603      	mov	r3, r0
 8002122:	2b00      	cmp	r3, #0
 8002124:	d10b      	bne.n	800213e <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8002126:	4b24      	ldr	r3, [pc, #144]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800212c:	2201      	movs	r2, #1
 800212e:	fa02 f303 	lsl.w	r3, r2, r3
 8002132:	43da      	mvns	r2, r3
 8002134:	4b21      	ldr	r3, [pc, #132]	; (80021bc <prvAddCurrentTaskToDelayedList+0xb8>)
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	4013      	ands	r3, r2
 800213a:	4a20      	ldr	r2, [pc, #128]	; (80021bc <prvAddCurrentTaskToDelayedList+0xb8>)
 800213c:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002144:	d10a      	bne.n	800215c <prvAddCurrentTaskToDelayedList+0x58>
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b00      	cmp	r3, #0
 800214a:	d007      	beq.n	800215c <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800214c:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	3304      	adds	r3, #4
 8002152:	4619      	mov	r1, r3
 8002154:	481a      	ldr	r0, [pc, #104]	; (80021c0 <prvAddCurrentTaskToDelayedList+0xbc>)
 8002156:	f7fe fe1e 	bl	8000d96 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800215a:	e026      	b.n	80021aa <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800215c:	68fa      	ldr	r2, [r7, #12]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4413      	add	r3, r2
 8002162:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	68ba      	ldr	r2, [r7, #8]
 800216a:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800216c:	68ba      	ldr	r2, [r7, #8]
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	429a      	cmp	r2, r3
 8002172:	d209      	bcs.n	8002188 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002174:	4b13      	ldr	r3, [pc, #76]	; (80021c4 <prvAddCurrentTaskToDelayedList+0xc0>)
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	3304      	adds	r3, #4
 800217e:	4619      	mov	r1, r3
 8002180:	4610      	mov	r0, r2
 8002182:	f7fe fe2c 	bl	8000dde <vListInsert>
}
 8002186:	e010      	b.n	80021aa <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8002188:	4b0f      	ldr	r3, [pc, #60]	; (80021c8 <prvAddCurrentTaskToDelayedList+0xc4>)
 800218a:	681a      	ldr	r2, [r3, #0]
 800218c:	4b0a      	ldr	r3, [pc, #40]	; (80021b8 <prvAddCurrentTaskToDelayedList+0xb4>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	3304      	adds	r3, #4
 8002192:	4619      	mov	r1, r3
 8002194:	4610      	mov	r0, r2
 8002196:	f7fe fe22 	bl	8000dde <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800219a:	4b0c      	ldr	r3, [pc, #48]	; (80021cc <prvAddCurrentTaskToDelayedList+0xc8>)
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d202      	bcs.n	80021aa <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 80021a4:	4a09      	ldr	r2, [pc, #36]	; (80021cc <prvAddCurrentTaskToDelayedList+0xc8>)
 80021a6:	68bb      	ldr	r3, [r7, #8]
 80021a8:	6013      	str	r3, [r2, #0]
}
 80021aa:	bf00      	nop
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000184 	.word	0x20000184
 80021b8:	200000a8 	.word	0x200000a8
 80021bc:	20000188 	.word	0x20000188
 80021c0:	2000016c 	.word	0x2000016c
 80021c4:	2000013c 	.word	0x2000013c
 80021c8:	20000138 	.word	0x20000138
 80021cc:	200001a0 	.word	0x200001a0

080021d0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80021d0:	b480      	push	{r7}
 80021d2:	b085      	sub	sp, #20
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	60f8      	str	r0, [r7, #12]
 80021d8:	60b9      	str	r1, [r7, #8]
 80021da:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	3b04      	subs	r3, #4
 80021e0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80021e8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	3b04      	subs	r3, #4
 80021ee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80021f0:	68bb      	ldr	r3, [r7, #8]
 80021f2:	f023 0201 	bic.w	r2, r3, #1
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	3b04      	subs	r3, #4
 80021fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8002200:	4a0c      	ldr	r2, [pc, #48]	; (8002234 <pxPortInitialiseStack+0x64>)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8002206:	68fb      	ldr	r3, [r7, #12]
 8002208:	3b14      	subs	r3, #20
 800220a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800220c:	687a      	ldr	r2, [r7, #4]
 800220e:	68fb      	ldr	r3, [r7, #12]
 8002210:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8002212:	68fb      	ldr	r3, [r7, #12]
 8002214:	3b04      	subs	r3, #4
 8002216:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	f06f 0202 	mvn.w	r2, #2
 800221e:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	3b20      	subs	r3, #32
 8002224:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8002226:	68fb      	ldr	r3, [r7, #12]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3714      	adds	r7, #20
 800222c:	46bd      	mov	sp, r7
 800222e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002232:	4770      	bx	lr
 8002234:	08002239 	.word	0x08002239

08002238 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8002238:	b480      	push	{r7}
 800223a:	b085      	sub	sp, #20
 800223c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800223e:	2300      	movs	r3, #0
 8002240:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <prvTaskExitError+0x50>)
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	f1b3 3fff 	cmp.w	r3, #4294967295
 800224a:	d009      	beq.n	8002260 <prvTaskExitError+0x28>
 800224c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002250:	f383 8811 	msr	BASEPRI, r3
 8002254:	f3bf 8f6f 	isb	sy
 8002258:	f3bf 8f4f 	dsb	sy
 800225c:	60fb      	str	r3, [r7, #12]
 800225e:	e7fe      	b.n	800225e <prvTaskExitError+0x26>
 8002260:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002264:	f383 8811 	msr	BASEPRI, r3
 8002268:	f3bf 8f6f 	isb	sy
 800226c:	f3bf 8f4f 	dsb	sy
 8002270:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8002272:	bf00      	nop
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2b00      	cmp	r3, #0
 8002278:	d0fc      	beq.n	8002274 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800227a:	bf00      	nop
 800227c:	3714      	adds	r7, #20
 800227e:	46bd      	mov	sp, r7
 8002280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002284:	4770      	bx	lr
 8002286:	bf00      	nop
 8002288:	20000010 	.word	0x20000010
 800228c:	00000000 	.word	0x00000000

08002290 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8002290:	4b07      	ldr	r3, [pc, #28]	; (80022b0 <pxCurrentTCBConst2>)
 8002292:	6819      	ldr	r1, [r3, #0]
 8002294:	6808      	ldr	r0, [r1, #0]
 8002296:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800229a:	f380 8809 	msr	PSP, r0
 800229e:	f3bf 8f6f 	isb	sy
 80022a2:	f04f 0000 	mov.w	r0, #0
 80022a6:	f380 8811 	msr	BASEPRI, r0
 80022aa:	4770      	bx	lr
 80022ac:	f3af 8000 	nop.w

080022b0 <pxCurrentTCBConst2>:
 80022b0:	200000a8 	.word	0x200000a8
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80022b4:	bf00      	nop
 80022b6:	bf00      	nop

080022b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80022b8:	4808      	ldr	r0, [pc, #32]	; (80022dc <prvPortStartFirstTask+0x24>)
 80022ba:	6800      	ldr	r0, [r0, #0]
 80022bc:	6800      	ldr	r0, [r0, #0]
 80022be:	f380 8808 	msr	MSP, r0
 80022c2:	f04f 0000 	mov.w	r0, #0
 80022c6:	f380 8814 	msr	CONTROL, r0
 80022ca:	b662      	cpsie	i
 80022cc:	b661      	cpsie	f
 80022ce:	f3bf 8f4f 	dsb	sy
 80022d2:	f3bf 8f6f 	isb	sy
 80022d6:	df00      	svc	0
 80022d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80022da:	bf00      	nop
 80022dc:	e000ed08 	.word	0xe000ed08

080022e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b086      	sub	sp, #24
 80022e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80022e6:	4b44      	ldr	r3, [pc, #272]	; (80023f8 <xPortStartScheduler+0x118>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a44      	ldr	r2, [pc, #272]	; (80023fc <xPortStartScheduler+0x11c>)
 80022ec:	4293      	cmp	r3, r2
 80022ee:	d109      	bne.n	8002304 <xPortStartScheduler+0x24>
 80022f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80022f4:	f383 8811 	msr	BASEPRI, r3
 80022f8:	f3bf 8f6f 	isb	sy
 80022fc:	f3bf 8f4f 	dsb	sy
 8002300:	613b      	str	r3, [r7, #16]
 8002302:	e7fe      	b.n	8002302 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8002304:	4b3c      	ldr	r3, [pc, #240]	; (80023f8 <xPortStartScheduler+0x118>)
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	4a3d      	ldr	r2, [pc, #244]	; (8002400 <xPortStartScheduler+0x120>)
 800230a:	4293      	cmp	r3, r2
 800230c:	d109      	bne.n	8002322 <xPortStartScheduler+0x42>
 800230e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002312:	f383 8811 	msr	BASEPRI, r3
 8002316:	f3bf 8f6f 	isb	sy
 800231a:	f3bf 8f4f 	dsb	sy
 800231e:	60fb      	str	r3, [r7, #12]
 8002320:	e7fe      	b.n	8002320 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8002322:	4b38      	ldr	r3, [pc, #224]	; (8002404 <xPortStartScheduler+0x124>)
 8002324:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	781b      	ldrb	r3, [r3, #0]
 800232a:	b2db      	uxtb	r3, r3
 800232c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800232e:	697b      	ldr	r3, [r7, #20]
 8002330:	22ff      	movs	r2, #255	; 0xff
 8002332:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	781b      	ldrb	r3, [r3, #0]
 8002338:	b2db      	uxtb	r3, r3
 800233a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800233c:	78fb      	ldrb	r3, [r7, #3]
 800233e:	b2db      	uxtb	r3, r3
 8002340:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8002344:	b2da      	uxtb	r2, r3
 8002346:	4b30      	ldr	r3, [pc, #192]	; (8002408 <xPortStartScheduler+0x128>)
 8002348:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800234a:	4b30      	ldr	r3, [pc, #192]	; (800240c <xPortStartScheduler+0x12c>)
 800234c:	2207      	movs	r2, #7
 800234e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002350:	e009      	b.n	8002366 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8002352:	4b2e      	ldr	r3, [pc, #184]	; (800240c <xPortStartScheduler+0x12c>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	3b01      	subs	r3, #1
 8002358:	4a2c      	ldr	r2, [pc, #176]	; (800240c <xPortStartScheduler+0x12c>)
 800235a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800235c:	78fb      	ldrb	r3, [r7, #3]
 800235e:	b2db      	uxtb	r3, r3
 8002360:	005b      	lsls	r3, r3, #1
 8002362:	b2db      	uxtb	r3, r3
 8002364:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8002366:	78fb      	ldrb	r3, [r7, #3]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800236e:	2b80      	cmp	r3, #128	; 0x80
 8002370:	d0ef      	beq.n	8002352 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8002372:	4b26      	ldr	r3, [pc, #152]	; (800240c <xPortStartScheduler+0x12c>)
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	f1c3 0307 	rsb	r3, r3, #7
 800237a:	2b04      	cmp	r3, #4
 800237c:	d009      	beq.n	8002392 <xPortStartScheduler+0xb2>
 800237e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002382:	f383 8811 	msr	BASEPRI, r3
 8002386:	f3bf 8f6f 	isb	sy
 800238a:	f3bf 8f4f 	dsb	sy
 800238e:	60bb      	str	r3, [r7, #8]
 8002390:	e7fe      	b.n	8002390 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8002392:	4b1e      	ldr	r3, [pc, #120]	; (800240c <xPortStartScheduler+0x12c>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	021b      	lsls	r3, r3, #8
 8002398:	4a1c      	ldr	r2, [pc, #112]	; (800240c <xPortStartScheduler+0x12c>)
 800239a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800239c:	4b1b      	ldr	r3, [pc, #108]	; (800240c <xPortStartScheduler+0x12c>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80023a4:	4a19      	ldr	r2, [pc, #100]	; (800240c <xPortStartScheduler+0x12c>)
 80023a6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80023b0:	4b17      	ldr	r3, [pc, #92]	; (8002410 <xPortStartScheduler+0x130>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a16      	ldr	r2, [pc, #88]	; (8002410 <xPortStartScheduler+0x130>)
 80023b6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80023ba:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80023bc:	4b14      	ldr	r3, [pc, #80]	; (8002410 <xPortStartScheduler+0x130>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	4a13      	ldr	r2, [pc, #76]	; (8002410 <xPortStartScheduler+0x130>)
 80023c2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80023c6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80023c8:	f000 f8d6 	bl	8002578 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80023cc:	4b11      	ldr	r3, [pc, #68]	; (8002414 <xPortStartScheduler+0x134>)
 80023ce:	2200      	movs	r2, #0
 80023d0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80023d2:	f000 f8f5 	bl	80025c0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <xPortStartScheduler+0x138>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	4a0f      	ldr	r2, [pc, #60]	; (8002418 <xPortStartScheduler+0x138>)
 80023dc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80023e0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80023e2:	f7ff ff69 	bl	80022b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80023e6:	f7ff fb61 	bl	8001aac <vTaskSwitchContext>
	prvTaskExitError();
 80023ea:	f7ff ff25 	bl	8002238 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80023ee:	2300      	movs	r3, #0
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	3718      	adds	r7, #24
 80023f4:	46bd      	mov	sp, r7
 80023f6:	bd80      	pop	{r7, pc}
 80023f8:	e000ed00 	.word	0xe000ed00
 80023fc:	410fc271 	.word	0x410fc271
 8002400:	410fc270 	.word	0x410fc270
 8002404:	e000e400 	.word	0xe000e400
 8002408:	200001ac 	.word	0x200001ac
 800240c:	200001b0 	.word	0x200001b0
 8002410:	e000ed20 	.word	0xe000ed20
 8002414:	20000010 	.word	0x20000010
 8002418:	e000ef34 	.word	0xe000ef34

0800241c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800241c:	b480      	push	{r7}
 800241e:	b083      	sub	sp, #12
 8002420:	af00      	add	r7, sp, #0
 8002422:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002426:	f383 8811 	msr	BASEPRI, r3
 800242a:	f3bf 8f6f 	isb	sy
 800242e:	f3bf 8f4f 	dsb	sy
 8002432:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8002434:	4b0e      	ldr	r3, [pc, #56]	; (8002470 <vPortEnterCritical+0x54>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	3301      	adds	r3, #1
 800243a:	4a0d      	ldr	r2, [pc, #52]	; (8002470 <vPortEnterCritical+0x54>)
 800243c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800243e:	4b0c      	ldr	r3, [pc, #48]	; (8002470 <vPortEnterCritical+0x54>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d10e      	bne.n	8002464 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8002446:	4b0b      	ldr	r3, [pc, #44]	; (8002474 <vPortEnterCritical+0x58>)
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	b2db      	uxtb	r3, r3
 800244c:	2b00      	cmp	r3, #0
 800244e:	d009      	beq.n	8002464 <vPortEnterCritical+0x48>
 8002450:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002454:	f383 8811 	msr	BASEPRI, r3
 8002458:	f3bf 8f6f 	isb	sy
 800245c:	f3bf 8f4f 	dsb	sy
 8002460:	603b      	str	r3, [r7, #0]
 8002462:	e7fe      	b.n	8002462 <vPortEnterCritical+0x46>
	}
}
 8002464:	bf00      	nop
 8002466:	370c      	adds	r7, #12
 8002468:	46bd      	mov	sp, r7
 800246a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800246e:	4770      	bx	lr
 8002470:	20000010 	.word	0x20000010
 8002474:	e000ed04 	.word	0xe000ed04

08002478 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8002478:	b480      	push	{r7}
 800247a:	b083      	sub	sp, #12
 800247c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800247e:	4b11      	ldr	r3, [pc, #68]	; (80024c4 <vPortExitCritical+0x4c>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d109      	bne.n	800249a <vPortExitCritical+0x22>
 8002486:	f04f 0350 	mov.w	r3, #80	; 0x50
 800248a:	f383 8811 	msr	BASEPRI, r3
 800248e:	f3bf 8f6f 	isb	sy
 8002492:	f3bf 8f4f 	dsb	sy
 8002496:	607b      	str	r3, [r7, #4]
 8002498:	e7fe      	b.n	8002498 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800249a:	4b0a      	ldr	r3, [pc, #40]	; (80024c4 <vPortExitCritical+0x4c>)
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	3b01      	subs	r3, #1
 80024a0:	4a08      	ldr	r2, [pc, #32]	; (80024c4 <vPortExitCritical+0x4c>)
 80024a2:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80024a4:	4b07      	ldr	r3, [pc, #28]	; (80024c4 <vPortExitCritical+0x4c>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	2b00      	cmp	r3, #0
 80024aa:	d104      	bne.n	80024b6 <vPortExitCritical+0x3e>
 80024ac:	2300      	movs	r3, #0
 80024ae:	603b      	str	r3, [r7, #0]
	__asm volatile
 80024b0:	683b      	ldr	r3, [r7, #0]
 80024b2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 80024b6:	bf00      	nop
 80024b8:	370c      	adds	r7, #12
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	20000010 	.word	0x20000010
	...

080024d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80024d0:	f3ef 8009 	mrs	r0, PSP
 80024d4:	f3bf 8f6f 	isb	sy
 80024d8:	4b15      	ldr	r3, [pc, #84]	; (8002530 <pxCurrentTCBConst>)
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	f01e 0f10 	tst.w	lr, #16
 80024e0:	bf08      	it	eq
 80024e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80024e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024ea:	6010      	str	r0, [r2, #0]
 80024ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80024f0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80024f4:	f380 8811 	msr	BASEPRI, r0
 80024f8:	f3bf 8f4f 	dsb	sy
 80024fc:	f3bf 8f6f 	isb	sy
 8002500:	f7ff fad4 	bl	8001aac <vTaskSwitchContext>
 8002504:	f04f 0000 	mov.w	r0, #0
 8002508:	f380 8811 	msr	BASEPRI, r0
 800250c:	bc09      	pop	{r0, r3}
 800250e:	6819      	ldr	r1, [r3, #0]
 8002510:	6808      	ldr	r0, [r1, #0]
 8002512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002516:	f01e 0f10 	tst.w	lr, #16
 800251a:	bf08      	it	eq
 800251c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8002520:	f380 8809 	msr	PSP, r0
 8002524:	f3bf 8f6f 	isb	sy
 8002528:	4770      	bx	lr
 800252a:	bf00      	nop
 800252c:	f3af 8000 	nop.w

08002530 <pxCurrentTCBConst>:
 8002530:	200000a8 	.word	0x200000a8
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8002534:	bf00      	nop
 8002536:	bf00      	nop

08002538 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
	__asm volatile
 800253e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002542:	f383 8811 	msr	BASEPRI, r3
 8002546:	f3bf 8f6f 	isb	sy
 800254a:	f3bf 8f4f 	dsb	sy
 800254e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8002550:	f7ff f9f4 	bl	800193c <xTaskIncrementTick>
 8002554:	4603      	mov	r3, r0
 8002556:	2b00      	cmp	r3, #0
 8002558:	d003      	beq.n	8002562 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800255a:	4b06      	ldr	r3, [pc, #24]	; (8002574 <SysTick_Handler+0x3c>)
 800255c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8002560:	601a      	str	r2, [r3, #0]
 8002562:	2300      	movs	r3, #0
 8002564:	603b      	str	r3, [r7, #0]
	__asm volatile
 8002566:	683b      	ldr	r3, [r7, #0]
 8002568:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800256c:	bf00      	nop
 800256e:	3708      	adds	r7, #8
 8002570:	46bd      	mov	sp, r7
 8002572:	bd80      	pop	{r7, pc}
 8002574:	e000ed04 	.word	0xe000ed04

08002578 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8002578:	b480      	push	{r7}
 800257a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800257c:	4b0b      	ldr	r3, [pc, #44]	; (80025ac <vPortSetupTimerInterrupt+0x34>)
 800257e:	2200      	movs	r2, #0
 8002580:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8002582:	4b0b      	ldr	r3, [pc, #44]	; (80025b0 <vPortSetupTimerInterrupt+0x38>)
 8002584:	2200      	movs	r2, #0
 8002586:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8002588:	4b0a      	ldr	r3, [pc, #40]	; (80025b4 <vPortSetupTimerInterrupt+0x3c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a0a      	ldr	r2, [pc, #40]	; (80025b8 <vPortSetupTimerInterrupt+0x40>)
 800258e:	fba2 2303 	umull	r2, r3, r2, r3
 8002592:	099b      	lsrs	r3, r3, #6
 8002594:	4a09      	ldr	r2, [pc, #36]	; (80025bc <vPortSetupTimerInterrupt+0x44>)
 8002596:	3b01      	subs	r3, #1
 8002598:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800259a:	4b04      	ldr	r3, [pc, #16]	; (80025ac <vPortSetupTimerInterrupt+0x34>)
 800259c:	2207      	movs	r2, #7
 800259e:	601a      	str	r2, [r3, #0]
}
 80025a0:	bf00      	nop
 80025a2:	46bd      	mov	sp, r7
 80025a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025a8:	4770      	bx	lr
 80025aa:	bf00      	nop
 80025ac:	e000e010 	.word	0xe000e010
 80025b0:	e000e018 	.word	0xe000e018
 80025b4:	20000014 	.word	0x20000014
 80025b8:	10624dd3 	.word	0x10624dd3
 80025bc:	e000e014 	.word	0xe000e014

080025c0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80025c0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80025d0 <vPortEnableVFP+0x10>
 80025c4:	6801      	ldr	r1, [r0, #0]
 80025c6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80025ca:	6001      	str	r1, [r0, #0]
 80025cc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80025ce:	bf00      	nop
 80025d0:	e000ed88 	.word	0xe000ed88

080025d4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80025d4:	b480      	push	{r7}
 80025d6:	b085      	sub	sp, #20
 80025d8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80025da:	f3ef 8305 	mrs	r3, IPSR
 80025de:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	2b0f      	cmp	r3, #15
 80025e4:	d913      	bls.n	800260e <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80025e6:	4a16      	ldr	r2, [pc, #88]	; (8002640 <vPortValidateInterruptPriority+0x6c>)
 80025e8:	68fb      	ldr	r3, [r7, #12]
 80025ea:	4413      	add	r3, r2
 80025ec:	781b      	ldrb	r3, [r3, #0]
 80025ee:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80025f0:	4b14      	ldr	r3, [pc, #80]	; (8002644 <vPortValidateInterruptPriority+0x70>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	7afa      	ldrb	r2, [r7, #11]
 80025f6:	429a      	cmp	r2, r3
 80025f8:	d209      	bcs.n	800260e <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80025fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80025fe:	f383 8811 	msr	BASEPRI, r3
 8002602:	f3bf 8f6f 	isb	sy
 8002606:	f3bf 8f4f 	dsb	sy
 800260a:	607b      	str	r3, [r7, #4]
 800260c:	e7fe      	b.n	800260c <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800260e:	4b0e      	ldr	r3, [pc, #56]	; (8002648 <vPortValidateInterruptPriority+0x74>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8002616:	4b0d      	ldr	r3, [pc, #52]	; (800264c <vPortValidateInterruptPriority+0x78>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	429a      	cmp	r2, r3
 800261c:	d909      	bls.n	8002632 <vPortValidateInterruptPriority+0x5e>
 800261e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002622:	f383 8811 	msr	BASEPRI, r3
 8002626:	f3bf 8f6f 	isb	sy
 800262a:	f3bf 8f4f 	dsb	sy
 800262e:	603b      	str	r3, [r7, #0]
 8002630:	e7fe      	b.n	8002630 <vPortValidateInterruptPriority+0x5c>
	}
 8002632:	bf00      	nop
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop
 8002640:	e000e3f0 	.word	0xe000e3f0
 8002644:	200001ac 	.word	0x200001ac
 8002648:	e000ed0c 	.word	0xe000ed0c
 800264c:	200001b0 	.word	0x200001b0

08002650 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8002650:	b580      	push	{r7, lr}
 8002652:	b08a      	sub	sp, #40	; 0x28
 8002654:	af00      	add	r7, sp, #0
 8002656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8002658:	2300      	movs	r3, #0
 800265a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800265c:	f7ff f8c4 	bl	80017e8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8002660:	4b59      	ldr	r3, [pc, #356]	; (80027c8 <pvPortMalloc+0x178>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	2b00      	cmp	r3, #0
 8002666:	d101      	bne.n	800266c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8002668:	f000 f91a 	bl	80028a0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800266c:	4b57      	ldr	r3, [pc, #348]	; (80027cc <pvPortMalloc+0x17c>)
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	4013      	ands	r3, r2
 8002674:	2b00      	cmp	r3, #0
 8002676:	f040 8091 	bne.w	800279c <pvPortMalloc+0x14c>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800267a:	687b      	ldr	r3, [r7, #4]
 800267c:	2b00      	cmp	r3, #0
 800267e:	d01c      	beq.n	80026ba <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8002680:	2208      	movs	r2, #8
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	4413      	add	r3, r2
 8002686:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	f003 0307 	and.w	r3, r3, #7
 800268e:	2b00      	cmp	r3, #0
 8002690:	d013      	beq.n	80026ba <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	f023 0307 	bic.w	r3, r3, #7
 8002698:	3308      	adds	r3, #8
 800269a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	f003 0307 	and.w	r3, r3, #7
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d009      	beq.n	80026ba <pvPortMalloc+0x6a>
 80026a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80026aa:	f383 8811 	msr	BASEPRI, r3
 80026ae:	f3bf 8f6f 	isb	sy
 80026b2:	f3bf 8f4f 	dsb	sy
 80026b6:	617b      	str	r3, [r7, #20]
 80026b8:	e7fe      	b.n	80026b8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	2b00      	cmp	r3, #0
 80026be:	d06d      	beq.n	800279c <pvPortMalloc+0x14c>
 80026c0:	4b43      	ldr	r3, [pc, #268]	; (80027d0 <pvPortMalloc+0x180>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	429a      	cmp	r2, r3
 80026c8:	d868      	bhi.n	800279c <pvPortMalloc+0x14c>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80026ca:	4b42      	ldr	r3, [pc, #264]	; (80027d4 <pvPortMalloc+0x184>)
 80026cc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80026ce:	4b41      	ldr	r3, [pc, #260]	; (80027d4 <pvPortMalloc+0x184>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026d4:	e004      	b.n	80026e0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80026d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026d8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80026da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80026e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e2:	685b      	ldr	r3, [r3, #4]
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d903      	bls.n	80026f2 <pvPortMalloc+0xa2>
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d1f1      	bne.n	80026d6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80026f2:	4b35      	ldr	r3, [pc, #212]	; (80027c8 <pvPortMalloc+0x178>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d04f      	beq.n	800279c <pvPortMalloc+0x14c>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80026fc:	6a3b      	ldr	r3, [r7, #32]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	2208      	movs	r2, #8
 8002702:	4413      	add	r3, r2
 8002704:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	681a      	ldr	r2, [r3, #0]
 800270a:	6a3b      	ldr	r3, [r7, #32]
 800270c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800270e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002710:	685a      	ldr	r2, [r3, #4]
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	1ad2      	subs	r2, r2, r3
 8002716:	2308      	movs	r3, #8
 8002718:	005b      	lsls	r3, r3, #1
 800271a:	429a      	cmp	r2, r3
 800271c:	d91e      	bls.n	800275c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800271e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	4413      	add	r3, r2
 8002724:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8002726:	69bb      	ldr	r3, [r7, #24]
 8002728:	f003 0307 	and.w	r3, r3, #7
 800272c:	2b00      	cmp	r3, #0
 800272e:	d009      	beq.n	8002744 <pvPortMalloc+0xf4>
 8002730:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002734:	f383 8811 	msr	BASEPRI, r3
 8002738:	f3bf 8f6f 	isb	sy
 800273c:	f3bf 8f4f 	dsb	sy
 8002740:	613b      	str	r3, [r7, #16]
 8002742:	e7fe      	b.n	8002742 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8002744:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002746:	685a      	ldr	r2, [r3, #4]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	1ad2      	subs	r2, r2, r3
 800274c:	69bb      	ldr	r3, [r7, #24]
 800274e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8002750:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8002756:	69b8      	ldr	r0, [r7, #24]
 8002758:	f000 f904 	bl	8002964 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800275c:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <pvPortMalloc+0x180>)
 800275e:	681a      	ldr	r2, [r3, #0]
 8002760:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002762:	685b      	ldr	r3, [r3, #4]
 8002764:	1ad3      	subs	r3, r2, r3
 8002766:	4a1a      	ldr	r2, [pc, #104]	; (80027d0 <pvPortMalloc+0x180>)
 8002768:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800276a:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <pvPortMalloc+0x180>)
 800276c:	681a      	ldr	r2, [r3, #0]
 800276e:	4b1a      	ldr	r3, [pc, #104]	; (80027d8 <pvPortMalloc+0x188>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	429a      	cmp	r2, r3
 8002774:	d203      	bcs.n	800277e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8002776:	4b16      	ldr	r3, [pc, #88]	; (80027d0 <pvPortMalloc+0x180>)
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	4a17      	ldr	r2, [pc, #92]	; (80027d8 <pvPortMalloc+0x188>)
 800277c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800277e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002780:	685a      	ldr	r2, [r3, #4]
 8002782:	4b12      	ldr	r3, [pc, #72]	; (80027cc <pvPortMalloc+0x17c>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	431a      	orrs	r2, r3
 8002788:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800278c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800278e:	2200      	movs	r2, #0
 8002790:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8002792:	4b12      	ldr	r3, [pc, #72]	; (80027dc <pvPortMalloc+0x18c>)
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	3301      	adds	r3, #1
 8002798:	4a10      	ldr	r2, [pc, #64]	; (80027dc <pvPortMalloc+0x18c>)
 800279a:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800279c:	f7ff f832 	bl	8001804 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80027a0:	69fb      	ldr	r3, [r7, #28]
 80027a2:	f003 0307 	and.w	r3, r3, #7
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d009      	beq.n	80027be <pvPortMalloc+0x16e>
 80027aa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80027ae:	f383 8811 	msr	BASEPRI, r3
 80027b2:	f3bf 8f6f 	isb	sy
 80027b6:	f3bf 8f4f 	dsb	sy
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	e7fe      	b.n	80027bc <pvPortMalloc+0x16c>
	return pvReturn;
 80027be:	69fb      	ldr	r3, [r7, #28]
}
 80027c0:	4618      	mov	r0, r3
 80027c2:	3728      	adds	r7, #40	; 0x28
 80027c4:	46bd      	mov	sp, r7
 80027c6:	bd80      	pop	{r7, pc}
 80027c8:	20012dbc 	.word	0x20012dbc
 80027cc:	20012dd0 	.word	0x20012dd0
 80027d0:	20012dc0 	.word	0x20012dc0
 80027d4:	20012db4 	.word	0x20012db4
 80027d8:	20012dc4 	.word	0x20012dc4
 80027dc:	20012dc8 	.word	0x20012dc8

080027e0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80027e0:	b580      	push	{r7, lr}
 80027e2:	b086      	sub	sp, #24
 80027e4:	af00      	add	r7, sp, #0
 80027e6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d04b      	beq.n	800288a <vPortFree+0xaa>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80027f2:	2308      	movs	r3, #8
 80027f4:	425b      	negs	r3, r3
 80027f6:	697a      	ldr	r2, [r7, #20]
 80027f8:	4413      	add	r3, r2
 80027fa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80027fc:	697b      	ldr	r3, [r7, #20]
 80027fe:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8002800:	693b      	ldr	r3, [r7, #16]
 8002802:	685a      	ldr	r2, [r3, #4]
 8002804:	4b23      	ldr	r3, [pc, #140]	; (8002894 <vPortFree+0xb4>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4013      	ands	r3, r2
 800280a:	2b00      	cmp	r3, #0
 800280c:	d109      	bne.n	8002822 <vPortFree+0x42>
 800280e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8002812:	f383 8811 	msr	BASEPRI, r3
 8002816:	f3bf 8f6f 	isb	sy
 800281a:	f3bf 8f4f 	dsb	sy
 800281e:	60fb      	str	r3, [r7, #12]
 8002820:	e7fe      	b.n	8002820 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8002822:	693b      	ldr	r3, [r7, #16]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2b00      	cmp	r3, #0
 8002828:	d009      	beq.n	800283e <vPortFree+0x5e>
 800282a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800282e:	f383 8811 	msr	BASEPRI, r3
 8002832:	f3bf 8f6f 	isb	sy
 8002836:	f3bf 8f4f 	dsb	sy
 800283a:	60bb      	str	r3, [r7, #8]
 800283c:	e7fe      	b.n	800283c <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800283e:	693b      	ldr	r3, [r7, #16]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4b14      	ldr	r3, [pc, #80]	; (8002894 <vPortFree+0xb4>)
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	4013      	ands	r3, r2
 8002848:	2b00      	cmp	r3, #0
 800284a:	d01e      	beq.n	800288a <vPortFree+0xaa>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800284c:	693b      	ldr	r3, [r7, #16]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	2b00      	cmp	r3, #0
 8002852:	d11a      	bne.n	800288a <vPortFree+0xaa>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8002854:	693b      	ldr	r3, [r7, #16]
 8002856:	685a      	ldr	r2, [r3, #4]
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <vPortFree+0xb4>)
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	43db      	mvns	r3, r3
 800285e:	401a      	ands	r2, r3
 8002860:	693b      	ldr	r3, [r7, #16]
 8002862:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8002864:	f7fe ffc0 	bl	80017e8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8002868:	693b      	ldr	r3, [r7, #16]
 800286a:	685a      	ldr	r2, [r3, #4]
 800286c:	4b0a      	ldr	r3, [pc, #40]	; (8002898 <vPortFree+0xb8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4413      	add	r3, r2
 8002872:	4a09      	ldr	r2, [pc, #36]	; (8002898 <vPortFree+0xb8>)
 8002874:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8002876:	6938      	ldr	r0, [r7, #16]
 8002878:	f000 f874 	bl	8002964 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800287c:	4b07      	ldr	r3, [pc, #28]	; (800289c <vPortFree+0xbc>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	3301      	adds	r3, #1
 8002882:	4a06      	ldr	r2, [pc, #24]	; (800289c <vPortFree+0xbc>)
 8002884:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8002886:	f7fe ffbd 	bl	8001804 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800288a:	bf00      	nop
 800288c:	3718      	adds	r7, #24
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
 8002892:	bf00      	nop
 8002894:	20012dd0 	.word	0x20012dd0
 8002898:	20012dc0 	.word	0x20012dc0
 800289c:	20012dcc 	.word	0x20012dcc

080028a0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80028a0:	b480      	push	{r7}
 80028a2:	b085      	sub	sp, #20
 80028a4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80028a6:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80028aa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80028ac:	4b27      	ldr	r3, [pc, #156]	; (800294c <prvHeapInit+0xac>)
 80028ae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d00c      	beq.n	80028d4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	3307      	adds	r3, #7
 80028be:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80028c0:	68fb      	ldr	r3, [r7, #12]
 80028c2:	f023 0307 	bic.w	r3, r3, #7
 80028c6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80028c8:	68ba      	ldr	r2, [r7, #8]
 80028ca:	68fb      	ldr	r3, [r7, #12]
 80028cc:	1ad3      	subs	r3, r2, r3
 80028ce:	4a1f      	ldr	r2, [pc, #124]	; (800294c <prvHeapInit+0xac>)
 80028d0:	4413      	add	r3, r2
 80028d2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80028d8:	4a1d      	ldr	r2, [pc, #116]	; (8002950 <prvHeapInit+0xb0>)
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80028de:	4b1c      	ldr	r3, [pc, #112]	; (8002950 <prvHeapInit+0xb0>)
 80028e0:	2200      	movs	r2, #0
 80028e2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68ba      	ldr	r2, [r7, #8]
 80028e8:	4413      	add	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80028ec:	2208      	movs	r2, #8
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	1a9b      	subs	r3, r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	f023 0307 	bic.w	r3, r3, #7
 80028fa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	4a15      	ldr	r2, [pc, #84]	; (8002954 <prvHeapInit+0xb4>)
 8002900:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8002902:	4b14      	ldr	r3, [pc, #80]	; (8002954 <prvHeapInit+0xb4>)
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2200      	movs	r2, #0
 8002908:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800290a:	4b12      	ldr	r3, [pc, #72]	; (8002954 <prvHeapInit+0xb4>)
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	2200      	movs	r2, #0
 8002910:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	68fa      	ldr	r2, [r7, #12]
 800291a:	1ad2      	subs	r2, r2, r3
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8002920:	4b0c      	ldr	r3, [pc, #48]	; (8002954 <prvHeapInit+0xb4>)
 8002922:	681a      	ldr	r2, [r3, #0]
 8002924:	683b      	ldr	r3, [r7, #0]
 8002926:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	685b      	ldr	r3, [r3, #4]
 800292c:	4a0a      	ldr	r2, [pc, #40]	; (8002958 <prvHeapInit+0xb8>)
 800292e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	685b      	ldr	r3, [r3, #4]
 8002934:	4a09      	ldr	r2, [pc, #36]	; (800295c <prvHeapInit+0xbc>)
 8002936:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8002938:	4b09      	ldr	r3, [pc, #36]	; (8002960 <prvHeapInit+0xc0>)
 800293a:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800293e:	601a      	str	r2, [r3, #0]
}
 8002940:	bf00      	nop
 8002942:	3714      	adds	r7, #20
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	200001b4 	.word	0x200001b4
 8002950:	20012db4 	.word	0x20012db4
 8002954:	20012dbc 	.word	0x20012dbc
 8002958:	20012dc4 	.word	0x20012dc4
 800295c:	20012dc0 	.word	0x20012dc0
 8002960:	20012dd0 	.word	0x20012dd0

08002964 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8002964:	b480      	push	{r7}
 8002966:	b085      	sub	sp, #20
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800296c:	4b28      	ldr	r3, [pc, #160]	; (8002a10 <prvInsertBlockIntoFreeList+0xac>)
 800296e:	60fb      	str	r3, [r7, #12]
 8002970:	e002      	b.n	8002978 <prvInsertBlockIntoFreeList+0x14>
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	60fb      	str	r3, [r7, #12]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	687a      	ldr	r2, [r7, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d8f7      	bhi.n	8002972 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	4413      	add	r3, r2
 800298e:	687a      	ldr	r2, [r7, #4]
 8002990:	429a      	cmp	r2, r3
 8002992:	d108      	bne.n	80029a6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	685a      	ldr	r2, [r3, #4]
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	685b      	ldr	r3, [r3, #4]
 800299c:	441a      	add	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	68ba      	ldr	r2, [r7, #8]
 80029b0:	441a      	add	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	429a      	cmp	r2, r3
 80029b8:	d118      	bne.n	80029ec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80029ba:	68fb      	ldr	r3, [r7, #12]
 80029bc:	681a      	ldr	r2, [r3, #0]
 80029be:	4b15      	ldr	r3, [pc, #84]	; (8002a14 <prvInsertBlockIntoFreeList+0xb0>)
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	429a      	cmp	r2, r3
 80029c4:	d00d      	beq.n	80029e2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	685a      	ldr	r2, [r3, #4]
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	441a      	add	r2, r3
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	e008      	b.n	80029f4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80029e2:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <prvInsertBlockIntoFreeList+0xb0>)
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	601a      	str	r2, [r3, #0]
 80029ea:	e003      	b.n	80029f4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80029f4:	68fa      	ldr	r2, [r7, #12]
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d002      	beq.n	8002a02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	687a      	ldr	r2, [r7, #4]
 8002a00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8002a02:	bf00      	nop
 8002a04:	3714      	adds	r7, #20
 8002a06:	46bd      	mov	sp, r7
 8002a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0c:	4770      	bx	lr
 8002a0e:	bf00      	nop
 8002a10:	20012db4 	.word	0x20012db4
 8002a14:	20012dbc 	.word	0x20012dbc

08002a18 <NVIC_EnableIRQ>:
    The function enables a device-specific interrupt in the NVIC interrupt controller.

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a18:	b480      	push	{r7}
 8002a1a:	b083      	sub	sp, #12
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	71fb      	strb	r3, [r7, #7]
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
 8002a22:	79fb      	ldrb	r3, [r7, #7]
 8002a24:	f003 021f 	and.w	r2, r3, #31
 8002a28:	4907      	ldr	r1, [pc, #28]	; (8002a48 <NVIC_EnableIRQ+0x30>)
 8002a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a2e:	095b      	lsrs	r3, r3, #5
 8002a30:	2001      	movs	r0, #1
 8002a32:	fa00 f202 	lsl.w	r2, r0, r2
 8002a36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002a3a:	bf00      	nop
 8002a3c:	370c      	adds	r7, #12
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a44:	4770      	bx	lr
 8002a46:	bf00      	nop
 8002a48:	e000e100 	.word	0xe000e100

08002a4c <NVIC_SetPriority>:

    \param [in]      IRQn  Interrupt number.
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b083      	sub	sp, #12
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	4603      	mov	r3, r0
 8002a54:	6039      	str	r1, [r7, #0]
 8002a56:	71fb      	strb	r3, [r7, #7]
  if((int32_t)IRQn < 0) {
 8002a58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	da0b      	bge.n	8002a78 <NVIC_SetPriority+0x2c>
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a60:	683b      	ldr	r3, [r7, #0]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	490c      	ldr	r1, [pc, #48]	; (8002a98 <NVIC_SetPriority+0x4c>)
 8002a66:	79fb      	ldrb	r3, [r7, #7]
 8002a68:	f003 030f 	and.w	r3, r3, #15
 8002a6c:	3b04      	subs	r3, #4
 8002a6e:	0112      	lsls	r2, r2, #4
 8002a70:	b2d2      	uxtb	r2, r2
 8002a72:	440b      	add	r3, r1
 8002a74:	761a      	strb	r2, [r3, #24]
  }
  else {
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a76:	e009      	b.n	8002a8c <NVIC_SetPriority+0x40>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8 - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	b2da      	uxtb	r2, r3
 8002a7c:	4907      	ldr	r1, [pc, #28]	; (8002a9c <NVIC_SetPriority+0x50>)
 8002a7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a82:	0112      	lsls	r2, r2, #4
 8002a84:	b2d2      	uxtb	r2, r2
 8002a86:	440b      	add	r3, r1
 8002a88:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8002a8c:	bf00      	nop
 8002a8e:	370c      	adds	r7, #12
 8002a90:	46bd      	mov	sp, r7
 8002a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a96:	4770      	bx	lr
 8002a98:	e000ed00 	.word	0xe000ed00
 8002a9c:	e000e100 	.word	0xe000e100

08002aa0 <main>:

char usr_msg[100] = {0};
uint32_t countFromISR = 0;

int main(void)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af02      	add	r7, sp, #8
	//Setting up the clock and the hardware
	prvSetupClock();
 8002aa6:	f000 f869 	bl	8002b7c <prvSetupClock>
	prvSetupHardware();
 8002aaa:	f000 f88a 	bl	8002bc2 <prvSetupHardware>

	printmsg("counting semaphore usage between two tasks...\r\n");
 8002aae:	4813      	ldr	r0, [pc, #76]	; (8002afc <main+0x5c>)
 8002ab0:	f000 f8de 	bl	8002c70 <printmsg>

	//creating Binary semaphores
	xkey = xSemaphoreCreateCounting(10, 0);
 8002ab4:	2100      	movs	r1, #0
 8002ab6:	200a      	movs	r0, #10
 8002ab8:	f7fe fab4 	bl	8001024 <xQueueCreateCountingSemaphore>
 8002abc:	4602      	mov	r2, r0
 8002abe:	4b10      	ldr	r3, [pc, #64]	; (8002b00 <main+0x60>)
 8002ac0:	601a      	str	r2, [r3, #0]
	//creating queue


	if((xkey != NULL))
 8002ac2:	4b0f      	ldr	r3, [pc, #60]	; (8002b00 <main+0x60>)
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d017      	beq.n	8002afa <main+0x5a>
	{

		//creating the tasks
		//Task 1
		xTaskCreate(Task1_handler, "Task1", 500, NULL, 1, &TaskHandler1);
 8002aca:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <main+0x64>)
 8002acc:	9301      	str	r3, [sp, #4]
 8002ace:	2301      	movs	r3, #1
 8002ad0:	9300      	str	r3, [sp, #0]
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002ad8:	490b      	ldr	r1, [pc, #44]	; (8002b08 <main+0x68>)
 8002ada:	480c      	ldr	r0, [pc, #48]	; (8002b0c <main+0x6c>)
 8002adc:	f7fe fccc 	bl	8001478 <xTaskCreate>
		//Task 2
		xTaskCreate(Task2_handler, "Task2", 500, NULL, 1, &TaskHandler2);
 8002ae0:	4b0b      	ldr	r3, [pc, #44]	; (8002b10 <main+0x70>)
 8002ae2:	9301      	str	r3, [sp, #4]
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	9300      	str	r3, [sp, #0]
 8002ae8:	2300      	movs	r3, #0
 8002aea:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002aee:	4909      	ldr	r1, [pc, #36]	; (8002b14 <main+0x74>)
 8002af0:	4809      	ldr	r0, [pc, #36]	; (8002b18 <main+0x78>)
 8002af2:	f7fe fcc1 	bl	8001478 <xTaskCreate>

		//starting the scheduler
		vTaskStartScheduler();
 8002af6:	f7fe fe31 	bl	800175c <vTaskStartScheduler>

	}

	while(1);
 8002afa:	e7fe      	b.n	8002afa <main+0x5a>
 8002afc:	08003a34 	.word	0x08003a34
 8002b00:	20012ddc 	.word	0x20012ddc
 8002b04:	20012dd4 	.word	0x20012dd4
 8002b08:	08003a64 	.word	0x08003a64
 8002b0c:	08002b1d 	.word	0x08002b1d
 8002b10:	20012dd8 	.word	0x20012dd8
 8002b14:	08003a6c 	.word	0x08003a6c
 8002b18:	08002b61 	.word	0x08002b61

08002b1c <Task1_handler>:
 * FreeRTOS Tasks
 */

//task 1 Handler functions
void Task1_handler(void *pvParams)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b084      	sub	sp, #16
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	6078      	str	r0, [r7, #4]
	uint32_t count = 0;
 8002b24:	2300      	movs	r3, #0
 8002b26:	60fb      	str	r3, [r7, #12]
	while(1)
	{
		if(xSemaphoreTake(xkey, portMAX_DELAY))
 8002b28:	4b0a      	ldr	r3, [pc, #40]	; (8002b54 <Task1_handler+0x38>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002b30:	4618      	mov	r0, r3
 8002b32:	f7fe fb31 	bl	8001198 <xQueueSemaphoreTake>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d0f5      	beq.n	8002b28 <Task1_handler+0xc>
		{
			sprintf(usr_msg,"semaphore taken %ld times\r\n",count++);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	1c5a      	adds	r2, r3, #1
 8002b40:	60fa      	str	r2, [r7, #12]
 8002b42:	461a      	mov	r2, r3
 8002b44:	4904      	ldr	r1, [pc, #16]	; (8002b58 <Task1_handler+0x3c>)
 8002b46:	4805      	ldr	r0, [pc, #20]	; (8002b5c <Task1_handler+0x40>)
 8002b48:	f000 fb68 	bl	800321c <siprintf>
			printmsg(usr_msg);
 8002b4c:	4803      	ldr	r0, [pc, #12]	; (8002b5c <Task1_handler+0x40>)
 8002b4e:	f000 f88f 	bl	8002c70 <printmsg>
		if(xSemaphoreTake(xkey, portMAX_DELAY))
 8002b52:	e7e9      	b.n	8002b28 <Task1_handler+0xc>
 8002b54:	20012ddc 	.word	0x20012ddc
 8002b58:	08003a74 	.word	0x08003a74
 8002b5c:	20012de4 	.word	0x20012de4

08002b60 <Task2_handler>:
	taskYIELD();

}
//task 2 Handler functions
void Task2_handler(void *pvParams)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b082      	sub	sp, #8
 8002b64:	af00      	add	r7, sp, #0
 8002b66:	6078      	str	r0, [r7, #4]
	while(1)
	{
		printmsg("Hello from task 2\r\n");
 8002b68:	4803      	ldr	r0, [pc, #12]	; (8002b78 <Task2_handler+0x18>)
 8002b6a:	f000 f881 	bl	8002c70 <printmsg>
		vTaskDelay(2000);
 8002b6e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002b72:	f7fe fdbf 	bl	80016f4 <vTaskDelay>
		printmsg("Hello from task 2\r\n");
 8002b76:	e7f7      	b.n	8002b68 <Task2_handler+0x8>
 8002b78:	08003a90 	.word	0x08003a90

08002b7c <prvSetupClock>:
/*
 * MCUs private Hardware functions
 */
//Clock setup
void prvSetupClock(void)
{
 8002b7c:	b580      	push	{r7, lr}
 8002b7e:	af00      	add	r7, sp, #0
	/* Reset the system clock to its default state
	   HSI = ON, HSE = OFF, PLL = OFF
	   System clock = 16MHz, CPU clock = 16MHz */
	RCC_DeInit();
 8002b80:	f7fd fcf8 	bl	8000574 <RCC_DeInit>

	//we can use HSE instead of HSI by setting 1 to the useCLK_SOURCE_HSE macro
#if (useCLK_SOURCE_HSE == 1)

	//configure the HSE clock
	RCC_HSEConfig(RCC_HSE_Bypass);   //Bypass inorder to use the clock source from the STLink circuit
 8002b84:	2005      	movs	r0, #5
 8002b86:	f7fd fd2d 	bl	80005e4 <RCC_HSEConfig>
	while(RCC_WaitForHSEStartUp() != SUCCESS);
 8002b8a:	bf00      	nop
 8002b8c:	f7fd fd3e 	bl	800060c <RCC_WaitForHSEStartUp>
 8002b90:	4603      	mov	r3, r0
 8002b92:	2b01      	cmp	r3, #1
 8002b94:	d1fa      	bne.n	8002b8c <prvSetupClock+0x10>
	/*If a failure is detected on the HSE oscillator clock,
	  this oscillator is automatically disabled*/
	RCC_ClockSecuritySystemCmd(ENABLE);
 8002b96:	2001      	movs	r0, #1
 8002b98:	f7fd fd70 	bl	800067c <RCC_ClockSecuritySystemCmd>
	//configuring system clock with HSE clock source
	RCC_SYSCLKConfig(RCC_SYSCLKSource_HSE);
 8002b9c:	2001      	movs	r0, #1
 8002b9e:	f7fd fd7d 	bl	800069c <RCC_SYSCLKConfig>
	//configuring the AHB Clock (HCLK1)
	RCC_HCLKConfig(RCC_SYSCLK_Div1);
 8002ba2:	2000      	movs	r0, #0
 8002ba4:	f7fd fd96 	bl	80006d4 <RCC_HCLKConfig>
	//configuring the Low speed APB clock (PCLK1)
	RCC_PCLK1Config(RCC_HCLK_Div1);
 8002ba8:	2000      	movs	r0, #0
 8002baa:	f7fd fdaf 	bl	800070c <RCC_PCLK1Config>
	//configuring the High speed APB clock (PCLK2)
	RCC_PCLK2Config(RCC_HCLK_Div1);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f7fd fdc8 	bl	8000744 <RCC_PCLK2Config>
	//Disable the HSI clock source
	RCC_HSICmd(DISABLE);
 8002bb4:	2000      	movs	r0, #0
 8002bb6:	f7fd fd51 	bl	800065c <RCC_HSICmd>

#endif

	//updating the system clock with new configuration
	SystemCoreClockUpdate();
 8002bba:	f000 f963 	bl	8002e84 <SystemCoreClockUpdate>
}
 8002bbe:	bf00      	nop
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <prvSetupHardware>:

// Hardware setup
void prvSetupHardware(void)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	af00      	add	r7, sp, #0
	//USART
	prvSetupUSART();
 8002bc6:	f000 f805 	bl	8002bd4 <prvSetupUSART>

	//GPIO
	prvSetupGPIO();
 8002bca:	f000 f881 	bl	8002cd0 <prvSetupGPIO>
}
 8002bce:	bf00      	nop
 8002bd0:	bd80      	pop	{r7, pc}
	...

08002bd4 <prvSetupUSART>:

// USART setup
void prvSetupUSART(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b086      	sub	sp, #24
 8002bd8:	af00      	add	r7, sp, #0
	USART_InitTypeDef huart2;
	GPIO_InitTypeDef huart2_gpio;

	//Enabling the clock source
	RCC_APB1PeriphClockCmd(RCC_APB1Periph_USART2, ENABLE);
 8002bda:	2101      	movs	r1, #1
 8002bdc:	f44f 3000 	mov.w	r0, #131072	; 0x20000
 8002be0:	f7fd fee8 	bl	80009b4 <RCC_APB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002be4:	2101      	movs	r1, #1
 8002be6:	2001      	movs	r0, #1
 8002be8:	f7fd fec4 	bl	8000974 <RCC_AHB1PeriphClockCmd>

	memset(&huart2_gpio,0,sizeof(huart2_gpio));
 8002bec:	463b      	mov	r3, r7
 8002bee:	2208      	movs	r2, #8
 8002bf0:	2100      	movs	r1, #0
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	f000 fb09 	bl	800320a <memset>
	//USART2_GPIO config
	huart2_gpio.GPIO_Mode = GPIO_Mode_AF;
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	713b      	strb	r3, [r7, #4]
	huart2_gpio.GPIO_PuPd = GPIO_PuPd_UP;
 8002bfc:	2301      	movs	r3, #1
 8002bfe:	71fb      	strb	r3, [r7, #7]
	huart2_gpio.GPIO_Pin = GPIO_Pin_2 | GPIO_Pin_3;
 8002c00:	230c      	movs	r3, #12
 8002c02:	603b      	str	r3, [r7, #0]
	GPIO_Init(GPIOA, &huart2_gpio);
 8002c04:	463b      	mov	r3, r7
 8002c06:	4619      	mov	r1, r3
 8002c08:	4817      	ldr	r0, [pc, #92]	; (8002c68 <prvSetupUSART+0x94>)
 8002c0a:	f7fd fbdb 	bl	80003c4 <GPIO_Init>
	//setting up AF mode
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource2, GPIO_AF_USART2);
 8002c0e:	2207      	movs	r2, #7
 8002c10:	2102      	movs	r1, #2
 8002c12:	4815      	ldr	r0, [pc, #84]	; (8002c68 <prvSetupUSART+0x94>)
 8002c14:	f7fd fc64 	bl	80004e0 <GPIO_PinAFConfig>
	GPIO_PinAFConfig(GPIOA, GPIO_PinSource3, GPIO_AF_USART2);
 8002c18:	2207      	movs	r2, #7
 8002c1a:	2103      	movs	r1, #3
 8002c1c:	4812      	ldr	r0, [pc, #72]	; (8002c68 <prvSetupUSART+0x94>)
 8002c1e:	f7fd fc5f 	bl	80004e0 <GPIO_PinAFConfig>

	memset(&huart2,0,sizeof(huart2));
 8002c22:	f107 0308 	add.w	r3, r7, #8
 8002c26:	2210      	movs	r2, #16
 8002c28:	2100      	movs	r1, #0
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	f000 faed 	bl	800320a <memset>
	//USART2 config
	huart2.USART_BaudRate = 115200;
 8002c30:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
 8002c34:	60bb      	str	r3, [r7, #8]
	huart2.USART_Mode = USART_Mode_Rx | USART_Mode_Tx;
 8002c36:	230c      	movs	r3, #12
 8002c38:	827b      	strh	r3, [r7, #18]
	huart2.USART_Parity = USART_Parity_No;
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	823b      	strh	r3, [r7, #16]
	huart2.USART_StopBits = USART_StopBits_1;
 8002c3e:	2300      	movs	r3, #0
 8002c40:	81fb      	strh	r3, [r7, #14]
	huart2.USART_WordLength = USART_WordLength_8b;
 8002c42:	2300      	movs	r3, #0
 8002c44:	81bb      	strh	r3, [r7, #12]
	huart2.USART_HardwareFlowControl = USART_HardwareFlowControl_None;
 8002c46:	2300      	movs	r3, #0
 8002c48:	82bb      	strh	r3, [r7, #20]
	USART_Init(USART2, &huart2);
 8002c4a:	f107 0308 	add.w	r3, r7, #8
 8002c4e:	4619      	mov	r1, r3
 8002c50:	4806      	ldr	r0, [pc, #24]	; (8002c6c <prvSetupUSART+0x98>)
 8002c52:	f7fd ff6b 	bl	8000b2c <USART_Init>
	USART_Cmd(USART2, ENABLE);
 8002c56:	2101      	movs	r1, #1
 8002c58:	4804      	ldr	r0, [pc, #16]	; (8002c6c <prvSetupUSART+0x98>)
 8002c5a:	f7fe f821 	bl	8000ca0 <USART_Cmd>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}
 8002c66:	bf00      	nop
 8002c68:	40020000 	.word	0x40020000
 8002c6c:	40004400 	.word	0x40004400

08002c70 <printmsg>:
// API for printing message over USART2
void printmsg(char *msg)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
	for(uint32_t i = 0; i < strlen(msg); i++)
 8002c78:	2300      	movs	r3, #0
 8002c7a:	60fb      	str	r3, [r7, #12]
 8002c7c:	e013      	b.n	8002ca6 <printmsg+0x36>
	{
		while(USART_GetFlagStatus(USART2, USART_FLAG_TXE) != SET);  //wait until the TX buffer gets empty
 8002c7e:	bf00      	nop
 8002c80:	2180      	movs	r1, #128	; 0x80
 8002c82:	4812      	ldr	r0, [pc, #72]	; (8002ccc <printmsg+0x5c>)
 8002c84:	f7fe f83e 	bl	8000d04 <USART_GetFlagStatus>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b01      	cmp	r3, #1
 8002c8c:	d1f8      	bne.n	8002c80 <printmsg+0x10>
		USART_SendData(USART2, msg[i]);
 8002c8e:	687a      	ldr	r2, [r7, #4]
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	4413      	add	r3, r2
 8002c94:	781b      	ldrb	r3, [r3, #0]
 8002c96:	b29b      	uxth	r3, r3
 8002c98:	4619      	mov	r1, r3
 8002c9a:	480c      	ldr	r0, [pc, #48]	; (8002ccc <printmsg+0x5c>)
 8002c9c:	f7fe f820 	bl	8000ce0 <USART_SendData>
	for(uint32_t i = 0; i < strlen(msg); i++)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	3301      	adds	r3, #1
 8002ca4:	60fb      	str	r3, [r7, #12]
 8002ca6:	6878      	ldr	r0, [r7, #4]
 8002ca8:	f7fd fab2 	bl	8000210 <strlen>
 8002cac:	4602      	mov	r2, r0
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d3e4      	bcc.n	8002c7e <printmsg+0xe>
	}
	while(USART_GetFlagStatus(USART2, USART_FLAG_TC) != SET);  //wait until the Transmission complete
 8002cb4:	bf00      	nop
 8002cb6:	2140      	movs	r1, #64	; 0x40
 8002cb8:	4804      	ldr	r0, [pc, #16]	; (8002ccc <printmsg+0x5c>)
 8002cba:	f7fe f823 	bl	8000d04 <USART_GetFlagStatus>
 8002cbe:	4603      	mov	r3, r0
 8002cc0:	2b01      	cmp	r3, #1
 8002cc2:	d1f8      	bne.n	8002cb6 <printmsg+0x46>

}
 8002cc4:	bf00      	nop
 8002cc6:	3710      	adds	r7, #16
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	40004400 	.word	0x40004400

08002cd0 <prvSetupGPIO>:
	}
}

//GPIO
void prvSetupGPIO(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b086      	sub	sp, #24
 8002cd4:	af00      	add	r7, sp, #0

	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOA, ENABLE);
 8002cd6:	2101      	movs	r1, #1
 8002cd8:	2001      	movs	r0, #1
 8002cda:	f7fd fe4b 	bl	8000974 <RCC_AHB1PeriphClockCmd>
	RCC_AHB1PeriphClockCmd(RCC_AHB1Periph_GPIOC, ENABLE);
 8002cde:	2101      	movs	r1, #1
 8002ce0:	2004      	movs	r0, #4
 8002ce2:	f7fd fe47 	bl	8000974 <RCC_AHB1PeriphClockCmd>
	RCC_APB2PeriphClockCmd(RCC_APB2Periph_SYSCFG, ENABLE);
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	f44f 4080 	mov.w	r0, #16384	; 0x4000
 8002cec:	f7fd fe82 	bl	80009f4 <RCC_APB2PeriphClockCmd>

	GPIO_InitTypeDef led_init, butn_init;

	led_init.GPIO_Mode = GPIO_Mode_OUT;
 8002cf0:	2301      	movs	r3, #1
 8002cf2:	753b      	strb	r3, [r7, #20]
	led_init.GPIO_OType = GPIO_OType_PP;
 8002cf4:	2300      	movs	r3, #0
 8002cf6:	75bb      	strb	r3, [r7, #22]
	led_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002cf8:	2300      	movs	r3, #0
 8002cfa:	75fb      	strb	r3, [r7, #23]
	led_init.GPIO_Speed = GPIO_Low_Speed;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	757b      	strb	r3, [r7, #21]
	led_init.GPIO_Pin = GPIO_Pin_5;
 8002d00:	2320      	movs	r3, #32
 8002d02:	613b      	str	r3, [r7, #16]
	GPIO_Init(GPIOA, &led_init);
 8002d04:	f107 0310 	add.w	r3, r7, #16
 8002d08:	4619      	mov	r1, r3
 8002d0a:	4818      	ldr	r0, [pc, #96]	; (8002d6c <prvSetupGPIO+0x9c>)
 8002d0c:	f7fd fb5a 	bl	80003c4 <GPIO_Init>

	butn_init.GPIO_Mode = GPIO_Mode_IN;
 8002d10:	2300      	movs	r3, #0
 8002d12:	733b      	strb	r3, [r7, #12]
	butn_init.GPIO_OType = GPIO_OType_PP;
 8002d14:	2300      	movs	r3, #0
 8002d16:	73bb      	strb	r3, [r7, #14]
	butn_init.GPIO_PuPd = GPIO_PuPd_NOPULL;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	73fb      	strb	r3, [r7, #15]
	butn_init.GPIO_Speed = GPIO_Low_Speed;
 8002d1c:	2300      	movs	r3, #0
 8002d1e:	737b      	strb	r3, [r7, #13]
	butn_init.GPIO_Pin = GPIO_Pin_13;
 8002d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d24:	60bb      	str	r3, [r7, #8]
	GPIO_Init(GPIOC, &butn_init);
 8002d26:	f107 0308 	add.w	r3, r7, #8
 8002d2a:	4619      	mov	r1, r3
 8002d2c:	4810      	ldr	r0, [pc, #64]	; (8002d70 <prvSetupGPIO+0xa0>)
 8002d2e:	f7fd fb49 	bl	80003c4 <GPIO_Init>

	//setting up the exti for the interrupt
	SYSCFG_EXTILineConfig(EXTI_PortSourceGPIOC, EXTI_PinSource13);
 8002d32:	210d      	movs	r1, #13
 8002d34:	2002      	movs	r0, #2
 8002d36:	f7fd feb7 	bl	8000aa8 <SYSCFG_EXTILineConfig>

	EXTI_InitTypeDef exti_init;
	exti_init.EXTI_Line = EXTI_Line13;
 8002d3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d3e:	603b      	str	r3, [r7, #0]
	exti_init.EXTI_Mode = EXTI_Mode_Interrupt;
 8002d40:	2300      	movs	r3, #0
 8002d42:	713b      	strb	r3, [r7, #4]
	exti_init.EXTI_Trigger = EXTI_Trigger_Falling;
 8002d44:	230c      	movs	r3, #12
 8002d46:	717b      	strb	r3, [r7, #5]
	exti_init.EXTI_LineCmd = ENABLE;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	71bb      	strb	r3, [r7, #6]
	EXTI_Init(&exti_init);
 8002d4c:	463b      	mov	r3, r7
 8002d4e:	4618      	mov	r0, r3
 8002d50:	f7fd fab6 	bl	80002c0 <EXTI_Init>

	//Nvic settings
	NVIC_SetPriority(EXTI15_10_IRQn, 5);
 8002d54:	2105      	movs	r1, #5
 8002d56:	2028      	movs	r0, #40	; 0x28
 8002d58:	f7ff fe78 	bl	8002a4c <NVIC_SetPriority>
	NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002d5c:	2028      	movs	r0, #40	; 0x28
 8002d5e:	f7ff fe5b 	bl	8002a18 <NVIC_EnableIRQ>

}
 8002d62:	bf00      	nop
 8002d64:	3718      	adds	r7, #24
 8002d66:	46bd      	mov	sp, r7
 8002d68:	bd80      	pop	{r7, pc}
 8002d6a:	bf00      	nop
 8002d6c:	40020000 	.word	0x40020000
 8002d70:	40020800 	.word	0x40020800

08002d74 <EXTI15_10_IRQHandler>:


void EXTI15_10_IRQHandler(void)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	af00      	add	r7, sp, #0

	EXTI_ClearITPendingBit(EXTI_Line13);
 8002d78:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8002d7c:	f7fd fb12 	bl	80003a4 <EXTI_ClearITPendingBit>
	sprintf(usr_msg,"semaphore given %ld times\r\n",countFromISR++);
 8002d80:	4b0a      	ldr	r3, [pc, #40]	; (8002dac <EXTI15_10_IRQHandler+0x38>)
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	1c5a      	adds	r2, r3, #1
 8002d86:	4909      	ldr	r1, [pc, #36]	; (8002dac <EXTI15_10_IRQHandler+0x38>)
 8002d88:	600a      	str	r2, [r1, #0]
 8002d8a:	461a      	mov	r2, r3
 8002d8c:	4908      	ldr	r1, [pc, #32]	; (8002db0 <EXTI15_10_IRQHandler+0x3c>)
 8002d8e:	4809      	ldr	r0, [pc, #36]	; (8002db4 <EXTI15_10_IRQHandler+0x40>)
 8002d90:	f000 fa44 	bl	800321c <siprintf>
	printmsg(usr_msg);
 8002d94:	4807      	ldr	r0, [pc, #28]	; (8002db4 <EXTI15_10_IRQHandler+0x40>)
 8002d96:	f7ff ff6b 	bl	8002c70 <printmsg>
	xSemaphoreGiveFromISR(xkey, &xHigherPriorityTaskWoken);
 8002d9a:	4b07      	ldr	r3, [pc, #28]	; (8002db8 <EXTI15_10_IRQHandler+0x44>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	4907      	ldr	r1, [pc, #28]	; (8002dbc <EXTI15_10_IRQHandler+0x48>)
 8002da0:	4618      	mov	r0, r3
 8002da2:	f7fe f970 	bl	8001086 <xQueueGiveFromISR>

}
 8002da6:	bf00      	nop
 8002da8:	bd80      	pop	{r7, pc}
 8002daa:	bf00      	nop
 8002dac:	20012e48 	.word	0x20012e48
 8002db0:	08003aa4 	.word	0x08003aa4
 8002db4:	20012de4 	.word	0x20012de4
 8002db8:	20012ddc 	.word	0x20012ddc
 8002dbc:	20012de0 	.word	0x20012de0

08002dc0 <_sbrk>:
	}
	return len;
}

caddr_t _sbrk(int incr)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b084      	sub	sp, #16
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8002dc8:	4b11      	ldr	r3, [pc, #68]	; (8002e10 <_sbrk+0x50>)
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d102      	bne.n	8002dd6 <_sbrk+0x16>
		heap_end = &end;
 8002dd0:	4b0f      	ldr	r3, [pc, #60]	; (8002e10 <_sbrk+0x50>)
 8002dd2:	4a10      	ldr	r2, [pc, #64]	; (8002e14 <_sbrk+0x54>)
 8002dd4:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8002dd6:	4b0e      	ldr	r3, [pc, #56]	; (8002e10 <_sbrk+0x50>)
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8002ddc:	4b0c      	ldr	r3, [pc, #48]	; (8002e10 <_sbrk+0x50>)
 8002dde:	681a      	ldr	r2, [r3, #0]
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	4413      	add	r3, r2
 8002de4:	466a      	mov	r2, sp
 8002de6:	4293      	cmp	r3, r2
 8002de8:	d907      	bls.n	8002dfa <_sbrk+0x3a>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8002dea:	f000 f9d9 	bl	80031a0 <__errno>
 8002dee:	4602      	mov	r2, r0
 8002df0:	230c      	movs	r3, #12
 8002df2:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8002df4:	f04f 33ff 	mov.w	r3, #4294967295
 8002df8:	e006      	b.n	8002e08 <_sbrk+0x48>
	}

	heap_end += incr;
 8002dfa:	4b05      	ldr	r3, [pc, #20]	; (8002e10 <_sbrk+0x50>)
 8002dfc:	681a      	ldr	r2, [r3, #0]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	4413      	add	r3, r2
 8002e02:	4a03      	ldr	r2, [pc, #12]	; (8002e10 <_sbrk+0x50>)
 8002e04:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8002e06:	68fb      	ldr	r3, [r7, #12]
}
 8002e08:	4618      	mov	r0, r3
 8002e0a:	3710      	adds	r7, #16
 8002e0c:	46bd      	mov	sp, r7
 8002e0e:	bd80      	pop	{r7, pc}
 8002e10:	20012e4c 	.word	0x20012e4c
 8002e14:	20012e60 	.word	0x20012e60

08002e18 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002e18:	b580      	push	{r7, lr}
 8002e1a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002e1c:	4b16      	ldr	r3, [pc, #88]	; (8002e78 <SystemInit+0x60>)
 8002e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e22:	4a15      	ldr	r2, [pc, #84]	; (8002e78 <SystemInit+0x60>)
 8002e24:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002e28:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8002e2c:	4b13      	ldr	r3, [pc, #76]	; (8002e7c <SystemInit+0x64>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	4a12      	ldr	r2, [pc, #72]	; (8002e7c <SystemInit+0x64>)
 8002e32:	f043 0301 	orr.w	r3, r3, #1
 8002e36:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8002e38:	4b10      	ldr	r3, [pc, #64]	; (8002e7c <SystemInit+0x64>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8002e3e:	4b0f      	ldr	r3, [pc, #60]	; (8002e7c <SystemInit+0x64>)
 8002e40:	681b      	ldr	r3, [r3, #0]
 8002e42:	4a0e      	ldr	r2, [pc, #56]	; (8002e7c <SystemInit+0x64>)
 8002e44:	f023 7384 	bic.w	r3, r3, #17301504	; 0x1080000
 8002e48:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002e4c:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 8002e4e:	4b0b      	ldr	r3, [pc, #44]	; (8002e7c <SystemInit+0x64>)
 8002e50:	4a0b      	ldr	r2, [pc, #44]	; (8002e80 <SystemInit+0x68>)
 8002e52:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8002e54:	4b09      	ldr	r3, [pc, #36]	; (8002e7c <SystemInit+0x64>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a08      	ldr	r2, [pc, #32]	; (8002e7c <SystemInit+0x64>)
 8002e5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002e5e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8002e60:	4b06      	ldr	r3, [pc, #24]	; (8002e7c <SystemInit+0x64>)
 8002e62:	2200      	movs	r2, #0
 8002e64:	60da      	str	r2, [r3, #12]
  SystemInit_ExtMemCtl(); 
#endif /* DATA_IN_ExtSRAM || DATA_IN_ExtSDRAM */
         
  /* Configure the System clock source, PLL Multiplier and Divider factors, 
     AHB/APBx prescalers and Flash settings ----------------------------------*/
  SetSysClock();
 8002e66:	f000 f8db 	bl	8003020 <SetSysClock>

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002e6a:	4b03      	ldr	r3, [pc, #12]	; (8002e78 <SystemInit+0x60>)
 8002e6c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e70:	609a      	str	r2, [r3, #8]
#endif
}
 8002e72:	bf00      	nop
 8002e74:	bd80      	pop	{r7, pc}
 8002e76:	bf00      	nop
 8002e78:	e000ed00 	.word	0xe000ed00
 8002e7c:	40023800 	.word	0x40023800
 8002e80:	24003010 	.word	0x24003010

08002e84 <SystemCoreClockUpdate>:
  *     
  * @param  None
  * @retval None
  */
void SystemCoreClockUpdate(void)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b087      	sub	sp, #28
 8002e88:	af00      	add	r7, sp, #0
  uint32_t tmp = 0, pllvco = 0, pllp = 2, pllsource = 0, pllm = 2;
 8002e8a:	2300      	movs	r3, #0
 8002e8c:	613b      	str	r3, [r7, #16]
 8002e8e:	2300      	movs	r3, #0
 8002e90:	617b      	str	r3, [r7, #20]
 8002e92:	2302      	movs	r3, #2
 8002e94:	60fb      	str	r3, [r7, #12]
 8002e96:	2300      	movs	r3, #0
 8002e98:	60bb      	str	r3, [r7, #8]
 8002e9a:	2302      	movs	r3, #2
 8002e9c:	607b      	str	r3, [r7, #4]
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)  
  uint32_t pllr = 2;
 8002e9e:	2302      	movs	r3, #2
 8002ea0:	603b      	str	r3, [r7, #0]
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
  /* Get SYSCLK source -------------------------------------------------------*/
  tmp = RCC->CFGR & RCC_CFGR_SWS;
 8002ea2:	4b5a      	ldr	r3, [pc, #360]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002ea4:	689b      	ldr	r3, [r3, #8]
 8002ea6:	f003 030c 	and.w	r3, r3, #12
 8002eaa:	613b      	str	r3, [r7, #16]

  switch (tmp)
 8002eac:	693b      	ldr	r3, [r7, #16]
 8002eae:	2b0c      	cmp	r3, #12
 8002eb0:	f200 8092 	bhi.w	8002fd8 <SystemCoreClockUpdate+0x154>
 8002eb4:	a201      	add	r2, pc, #4	; (adr r2, 8002ebc <SystemCoreClockUpdate+0x38>)
 8002eb6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002eba:	bf00      	nop
 8002ebc:	08002ef1 	.word	0x08002ef1
 8002ec0:	08002fd9 	.word	0x08002fd9
 8002ec4:	08002fd9 	.word	0x08002fd9
 8002ec8:	08002fd9 	.word	0x08002fd9
 8002ecc:	08002ef9 	.word	0x08002ef9
 8002ed0:	08002fd9 	.word	0x08002fd9
 8002ed4:	08002fd9 	.word	0x08002fd9
 8002ed8:	08002fd9 	.word	0x08002fd9
 8002edc:	08002f01 	.word	0x08002f01
 8002ee0:	08002fd9 	.word	0x08002fd9
 8002ee4:	08002fd9 	.word	0x08002fd9
 8002ee8:	08002fd9 	.word	0x08002fd9
 8002eec:	08002f6d 	.word	0x08002f6d
  {
    case 0x00:  /* HSI used as system clock source */
      SystemCoreClock = HSI_VALUE;
 8002ef0:	4b47      	ldr	r3, [pc, #284]	; (8003010 <SystemCoreClockUpdate+0x18c>)
 8002ef2:	4a48      	ldr	r2, [pc, #288]	; (8003014 <SystemCoreClockUpdate+0x190>)
 8002ef4:	601a      	str	r2, [r3, #0]
      break;
 8002ef6:	e073      	b.n	8002fe0 <SystemCoreClockUpdate+0x15c>
    case 0x04:  /* HSE used as system clock source */
      SystemCoreClock = HSE_VALUE;
 8002ef8:	4b45      	ldr	r3, [pc, #276]	; (8003010 <SystemCoreClockUpdate+0x18c>)
 8002efa:	4a47      	ldr	r2, [pc, #284]	; (8003018 <SystemCoreClockUpdate+0x194>)
 8002efc:	601a      	str	r2, [r3, #0]
      break;
 8002efe:	e06f      	b.n	8002fe0 <SystemCoreClockUpdate+0x15c>
    case 0x08:  /* PLL P used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_P
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002f00:	4b42      	ldr	r3, [pc, #264]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	0d9b      	lsrs	r3, r3, #22
 8002f06:	f003 0301 	and.w	r3, r3, #1
 8002f0a:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f0c:	4b3f      	ldr	r3, [pc, #252]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f14:	607b      	str	r3, [r7, #4]
      
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
      if (pllsource != 0)
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d00c      	beq.n	8002f36 <SystemCoreClockUpdate+0xb2>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002f1c:	4a3e      	ldr	r2, [pc, #248]	; (8003018 <SystemCoreClockUpdate+0x194>)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f24:	4a39      	ldr	r2, [pc, #228]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002f26:	6852      	ldr	r2, [r2, #4]
 8002f28:	0992      	lsrs	r2, r2, #6
 8002f2a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f2e:	fb02 f303 	mul.w	r3, r2, r3
 8002f32:	617b      	str	r3, [r7, #20]
 8002f34:	e00b      	b.n	8002f4e <SystemCoreClockUpdate+0xca>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002f36:	4a37      	ldr	r2, [pc, #220]	; (8003014 <SystemCoreClockUpdate+0x190>)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f3e:	4a33      	ldr	r2, [pc, #204]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002f40:	6852      	ldr	r2, [r2, #4]
 8002f42:	0992      	lsrs	r2, r2, #6
 8002f44:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f48:	fb02 f303 	mul.w	r3, r2, r3
 8002f4c:	617b      	str	r3, [r7, #20]
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
      }  
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F412xG || STM32F413_423xx ||  STM32F446xx || STM32F469_479xx */  
      pllp = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >>16) + 1 ) *2;
 8002f4e:	4b2f      	ldr	r3, [pc, #188]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	0c1b      	lsrs	r3, r3, #16
 8002f54:	f003 0303 	and.w	r3, r3, #3
 8002f58:	3301      	adds	r3, #1
 8002f5a:	005b      	lsls	r3, r3, #1
 8002f5c:	60fb      	str	r3, [r7, #12]
      SystemCoreClock = pllvco/pllp;      
 8002f5e:	697a      	ldr	r2, [r7, #20]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f66:	4a2a      	ldr	r2, [pc, #168]	; (8003010 <SystemCoreClockUpdate+0x18c>)
 8002f68:	6013      	str	r3, [r2, #0]
      break;
 8002f6a:	e039      	b.n	8002fe0 <SystemCoreClockUpdate+0x15c>
#if defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)      
      case 0x0C:  /* PLL R used as system clock source */
       /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLL_M) * PLL_N
         SYSCLK = PLL_VCO / PLL_R
         */    
      pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) >> 22;
 8002f6c:	4b27      	ldr	r3, [pc, #156]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002f6e:	685b      	ldr	r3, [r3, #4]
 8002f70:	0d9b      	lsrs	r3, r3, #22
 8002f72:	f003 0301 	and.w	r3, r3, #1
 8002f76:	60bb      	str	r3, [r7, #8]
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002f78:	4b24      	ldr	r3, [pc, #144]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002f80:	607b      	str	r3, [r7, #4]
      if (pllsource != 0)
 8002f82:	68bb      	ldr	r3, [r7, #8]
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d00c      	beq.n	8002fa2 <SystemCoreClockUpdate+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);
 8002f88:	4a23      	ldr	r2, [pc, #140]	; (8003018 <SystemCoreClockUpdate+0x194>)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f90:	4a1e      	ldr	r2, [pc, #120]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002f92:	6852      	ldr	r2, [r2, #4]
 8002f94:	0992      	lsrs	r2, r2, #6
 8002f96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002f9a:	fb02 f303 	mul.w	r3, r2, r3
 8002f9e:	617b      	str	r3, [r7, #20]
 8002fa0:	e00b      	b.n	8002fba <SystemCoreClockUpdate+0x136>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> 6);      
 8002fa2:	4a1c      	ldr	r2, [pc, #112]	; (8003014 <SystemCoreClockUpdate+0x190>)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002faa:	4a18      	ldr	r2, [pc, #96]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002fac:	6852      	ldr	r2, [r2, #4]
 8002fae:	0992      	lsrs	r2, r2, #6
 8002fb0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002fb4:	fb02 f303 	mul.w	r3, r2, r3
 8002fb8:	617b      	str	r3, [r7, #20]
      }
 
      pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >>28) + 1 ) *2;
 8002fba:	4b14      	ldr	r3, [pc, #80]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	0f1b      	lsrs	r3, r3, #28
 8002fc0:	f003 0307 	and.w	r3, r3, #7
 8002fc4:	3301      	adds	r3, #1
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	603b      	str	r3, [r7, #0]
      SystemCoreClock = pllvco/pllr;      
 8002fca:	697a      	ldr	r2, [r7, #20]
 8002fcc:	683b      	ldr	r3, [r7, #0]
 8002fce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002fd2:	4a0f      	ldr	r2, [pc, #60]	; (8003010 <SystemCoreClockUpdate+0x18c>)
 8002fd4:	6013      	str	r3, [r2, #0]
      break;
 8002fd6:	e003      	b.n	8002fe0 <SystemCoreClockUpdate+0x15c>
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */
    default:
      SystemCoreClock = HSI_VALUE;
 8002fd8:	4b0d      	ldr	r3, [pc, #52]	; (8003010 <SystemCoreClockUpdate+0x18c>)
 8002fda:	4a0e      	ldr	r2, [pc, #56]	; (8003014 <SystemCoreClockUpdate+0x190>)
 8002fdc:	601a      	str	r2, [r3, #0]
      break;
 8002fde:	bf00      	nop
  }
  /* Compute HCLK frequency --------------------------------------------------*/
  /* Get HCLK prescaler */
  tmp = AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> 4)];
 8002fe0:	4b0a      	ldr	r3, [pc, #40]	; (800300c <SystemCoreClockUpdate+0x188>)
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	091b      	lsrs	r3, r3, #4
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	4a0c      	ldr	r2, [pc, #48]	; (800301c <SystemCoreClockUpdate+0x198>)
 8002fec:	5cd3      	ldrb	r3, [r2, r3]
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	613b      	str	r3, [r7, #16]
  /* HCLK frequency */
  SystemCoreClock >>= tmp;
 8002ff2:	4b07      	ldr	r3, [pc, #28]	; (8003010 <SystemCoreClockUpdate+0x18c>)
 8002ff4:	681a      	ldr	r2, [r3, #0]
 8002ff6:	693b      	ldr	r3, [r7, #16]
 8002ff8:	fa22 f303 	lsr.w	r3, r2, r3
 8002ffc:	4a04      	ldr	r2, [pc, #16]	; (8003010 <SystemCoreClockUpdate+0x18c>)
 8002ffe:	6013      	str	r3, [r2, #0]
}
 8003000:	bf00      	nop
 8003002:	371c      	adds	r7, #28
 8003004:	46bd      	mov	sp, r7
 8003006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800300a:	4770      	bx	lr
 800300c:	40023800 	.word	0x40023800
 8003010:	20000014 	.word	0x20000014
 8003014:	00f42400 	.word	0x00f42400
 8003018:	007a1200 	.word	0x007a1200
 800301c:	20000018 	.word	0x20000018

08003020 <SetSysClock>:
  *         is reset to the default reset state (done in SystemInit() function).   
  * @param  None
  * @retval None
  */
static void SetSysClock(void)
{
 8003020:	b480      	push	{r7}
 8003022:	b083      	sub	sp, #12
 8003024:	af00      	add	r7, sp, #0
#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F401xx) || defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)|| defined(STM32F469_479xx)
/******************************************************************************/
/*            PLL (clocked by HSE) used as System clock source                */
/******************************************************************************/
  __IO uint32_t StartUpCounter = 0, HSEStatus = 0;
 8003026:	2300      	movs	r3, #0
 8003028:	607b      	str	r3, [r7, #4]
 800302a:	2300      	movs	r3, #0
 800302c:	603b      	str	r3, [r7, #0]
  
  /* Enable HSE */
  RCC->CR |= ((uint32_t)RCC_CR_HSEON);
 800302e:	4b43      	ldr	r3, [pc, #268]	; (800313c <SetSysClock+0x11c>)
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	4a42      	ldr	r2, [pc, #264]	; (800313c <SetSysClock+0x11c>)
 8003034:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003038:	6013      	str	r3, [r2, #0]
 
  /* Wait till HSE is ready and if Time out is reached exit */
  do
  {
    HSEStatus = RCC->CR & RCC_CR_HSERDY;
 800303a:	4b40      	ldr	r3, [pc, #256]	; (800313c <SetSysClock+0x11c>)
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003042:	603b      	str	r3, [r7, #0]
    StartUpCounter++;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	3301      	adds	r3, #1
 8003048:	607b      	str	r3, [r7, #4]
  } while((HSEStatus == 0) && (StartUpCounter != HSE_STARTUP_TIMEOUT));
 800304a:	683b      	ldr	r3, [r7, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d103      	bne.n	8003058 <SetSysClock+0x38>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8003056:	d1f0      	bne.n	800303a <SetSysClock+0x1a>

  if ((RCC->CR & RCC_CR_HSERDY) != RESET)
 8003058:	4b38      	ldr	r3, [pc, #224]	; (800313c <SetSysClock+0x11c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003060:	2b00      	cmp	r3, #0
 8003062:	d002      	beq.n	800306a <SetSysClock+0x4a>
  {
    HSEStatus = (uint32_t)0x01;
 8003064:	2301      	movs	r3, #1
 8003066:	603b      	str	r3, [r7, #0]
 8003068:	e001      	b.n	800306e <SetSysClock+0x4e>
  }
  else
  {
    HSEStatus = (uint32_t)0x00;
 800306a:	2300      	movs	r3, #0
 800306c:	603b      	str	r3, [r7, #0]
  }

  if (HSEStatus == (uint32_t)0x01)
 800306e:	683b      	ldr	r3, [r7, #0]
 8003070:	2b01      	cmp	r3, #1
 8003072:	d15c      	bne.n	800312e <SetSysClock+0x10e>
  {
    /* Select regulator voltage output Scale 1 mode */
    RCC->APB1ENR |= RCC_APB1ENR_PWREN;
 8003074:	4b31      	ldr	r3, [pc, #196]	; (800313c <SetSysClock+0x11c>)
 8003076:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003078:	4a30      	ldr	r2, [pc, #192]	; (800313c <SetSysClock+0x11c>)
 800307a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800307e:	6413      	str	r3, [r2, #64]	; 0x40
    PWR->CR |= PWR_CR_VOS;
 8003080:	4b2f      	ldr	r3, [pc, #188]	; (8003140 <SetSysClock+0x120>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a2e      	ldr	r2, [pc, #184]	; (8003140 <SetSysClock+0x120>)
 8003086:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800308a:	6013      	str	r3, [r2, #0]

    /* HCLK = SYSCLK / 1*/
    RCC->CFGR |= RCC_CFGR_HPRE_DIV1;
 800308c:	4b2b      	ldr	r3, [pc, #172]	; (800313c <SetSysClock+0x11c>)
 800308e:	4a2b      	ldr	r2, [pc, #172]	; (800313c <SetSysClock+0x11c>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	6093      	str	r3, [r2, #8]

#if defined(STM32F40_41xxx) || defined(STM32F427_437xx) || defined(STM32F429_439xx) ||  defined(STM32F412xG) || defined(STM32F446xx) || defined(STM32F469_479xx)    
    /* PCLK2 = HCLK / 2*/
    RCC->CFGR |= RCC_CFGR_PPRE2_DIV2;
 8003094:	4b29      	ldr	r3, [pc, #164]	; (800313c <SetSysClock+0x11c>)
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	4a28      	ldr	r2, [pc, #160]	; (800313c <SetSysClock+0x11c>)
 800309a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800309e:	6093      	str	r3, [r2, #8]
    
    /* PCLK1 = HCLK / 4*/
    RCC->CFGR |= RCC_CFGR_PPRE1_DIV4;
 80030a0:	4b26      	ldr	r3, [pc, #152]	; (800313c <SetSysClock+0x11c>)
 80030a2:	689b      	ldr	r3, [r3, #8]
 80030a4:	4a25      	ldr	r2, [pc, #148]	; (800313c <SetSysClock+0x11c>)
 80030a6:	f443 53a0 	orr.w	r3, r3, #5120	; 0x1400
 80030aa:	6093      	str	r3, [r2, #8]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24);
#endif /* STM32F40_41xxx || STM32F401xx || STM32F427_437x || STM32F429_439xx || STM32F469_479xx */

#if  defined(STM32F412xG) || defined(STM32F413_423xx) || defined(STM32F446xx)
    /* Configure the main PLL */
    RCC->PLLCFGR = PLL_M | (PLL_N << 6) | (((PLL_P >> 1) -1) << 16) |
 80030ac:	4b23      	ldr	r3, [pc, #140]	; (800313c <SetSysClock+0x11c>)
 80030ae:	4a25      	ldr	r2, [pc, #148]	; (8003144 <SetSysClock+0x124>)
 80030b0:	605a      	str	r2, [r3, #4]
                   (RCC_PLLCFGR_PLLSRC_HSE) | (PLL_Q << 24) | (PLL_R << 28);
#endif /* STM32F412xG || STM32F413_423xx || STM32F446xx */    
    
    /* Enable the main PLL */
    RCC->CR |= RCC_CR_PLLON;
 80030b2:	4b22      	ldr	r3, [pc, #136]	; (800313c <SetSysClock+0x11c>)
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	4a21      	ldr	r2, [pc, #132]	; (800313c <SetSysClock+0x11c>)
 80030b8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030bc:	6013      	str	r3, [r2, #0]

    /* Wait till the main PLL is ready */
    while((RCC->CR & RCC_CR_PLLRDY) == 0)
 80030be:	bf00      	nop
 80030c0:	4b1e      	ldr	r3, [pc, #120]	; (800313c <SetSysClock+0x11c>)
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d0f9      	beq.n	80030c0 <SetSysClock+0xa0>
    {
    }
   
#if defined(STM32F427_437xx) || defined(STM32F429_439xx) || defined(STM32F446xx) || defined(STM32F469_479xx)
    /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
    PWR->CR |= PWR_CR_ODEN;
 80030cc:	4b1c      	ldr	r3, [pc, #112]	; (8003140 <SetSysClock+0x120>)
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	4a1b      	ldr	r2, [pc, #108]	; (8003140 <SetSysClock+0x120>)
 80030d2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030d6:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODRDY) == 0)
 80030d8:	bf00      	nop
 80030da:	4b19      	ldr	r3, [pc, #100]	; (8003140 <SetSysClock+0x120>)
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f9      	beq.n	80030da <SetSysClock+0xba>
    {
    }
    PWR->CR |= PWR_CR_ODSWEN;
 80030e6:	4b16      	ldr	r3, [pc, #88]	; (8003140 <SetSysClock+0x120>)
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	4a15      	ldr	r2, [pc, #84]	; (8003140 <SetSysClock+0x120>)
 80030ec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80030f0:	6013      	str	r3, [r2, #0]
    while((PWR->CSR & PWR_CSR_ODSWRDY) == 0)
 80030f2:	bf00      	nop
 80030f4:	4b12      	ldr	r3, [pc, #72]	; (8003140 <SetSysClock+0x120>)
 80030f6:	685b      	ldr	r3, [r3, #4]
 80030f8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	d0f9      	beq.n	80030f4 <SetSysClock+0xd4>
    {
    }      
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_5WS;
 8003100:	4b11      	ldr	r3, [pc, #68]	; (8003148 <SetSysClock+0x128>)
 8003102:	f240 7205 	movw	r2, #1797	; 0x705
 8003106:	601a      	str	r2, [r3, #0]
    /* Configure Flash prefetch, Instruction cache, Data cache and wait state */
    FLASH->ACR = FLASH_ACR_PRFTEN | FLASH_ACR_ICEN |FLASH_ACR_DCEN |FLASH_ACR_LATENCY_2WS;
#endif /* STM32F401xx */

    /* Select the main PLL as system clock source */
    RCC->CFGR &= (uint32_t)((uint32_t)~(RCC_CFGR_SW));
 8003108:	4b0c      	ldr	r3, [pc, #48]	; (800313c <SetSysClock+0x11c>)
 800310a:	689b      	ldr	r3, [r3, #8]
 800310c:	4a0b      	ldr	r2, [pc, #44]	; (800313c <SetSysClock+0x11c>)
 800310e:	f023 0303 	bic.w	r3, r3, #3
 8003112:	6093      	str	r3, [r2, #8]
    RCC->CFGR |= RCC_CFGR_SW_PLL;
 8003114:	4b09      	ldr	r3, [pc, #36]	; (800313c <SetSysClock+0x11c>)
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	4a08      	ldr	r2, [pc, #32]	; (800313c <SetSysClock+0x11c>)
 800311a:	f043 0302 	orr.w	r3, r3, #2
 800311e:	6093      	str	r3, [r2, #8]

    /* Wait till the main PLL is used as system clock source */
    while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
 8003120:	bf00      	nop
 8003122:	4b06      	ldr	r3, [pc, #24]	; (800313c <SetSysClock+0x11c>)
 8003124:	689b      	ldr	r3, [r3, #8]
 8003126:	f003 030c 	and.w	r3, r3, #12
 800312a:	2b08      	cmp	r3, #8
 800312c:	d1f9      	bne.n	8003122 <SetSysClock+0x102>
  while ((RCC->CFGR & (uint32_t)RCC_CFGR_SWS ) != RCC_CFGR_SWS_PLL);
  {
  }
#endif /* USE_HSE_BYPASS */  
#endif /* STM32F40_41xxx || STM32F427_437xx || STM32F429_439xx || STM32F401xx || STM32F469_479xx */  
}
 800312e:	bf00      	nop
 8003130:	370c      	adds	r7, #12
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	40007000 	.word	0x40007000
 8003144:	77405a08 	.word	0x77405a08
 8003148:	40023c00 	.word	0x40023c00

0800314c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800314c:	480d      	ldr	r0, [pc, #52]	; (8003184 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800314e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8003150:	480d      	ldr	r0, [pc, #52]	; (8003188 <LoopForever+0x6>)
  ldr r1, =_edata
 8003152:	490e      	ldr	r1, [pc, #56]	; (800318c <LoopForever+0xa>)
  ldr r2, =_sidata
 8003154:	4a0e      	ldr	r2, [pc, #56]	; (8003190 <LoopForever+0xe>)
  movs r3, #0
 8003156:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003158:	e002      	b.n	8003160 <LoopCopyDataInit>

0800315a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800315a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800315c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800315e:	3304      	adds	r3, #4

08003160 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003160:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003162:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003164:	d3f9      	bcc.n	800315a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003166:	4a0b      	ldr	r2, [pc, #44]	; (8003194 <LoopForever+0x12>)
  ldr r4, =_ebss
 8003168:	4c0b      	ldr	r4, [pc, #44]	; (8003198 <LoopForever+0x16>)
  movs r3, #0
 800316a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800316c:	e001      	b.n	8003172 <LoopFillZerobss>

0800316e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800316e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003170:	3204      	adds	r2, #4

08003172 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003172:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003174:	d3fb      	bcc.n	800316e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8003176:	f7ff fe4f 	bl	8002e18 <SystemInit>
/* Call static constructors */
  bl __libc_init_array
 800317a:	f000 f817 	bl	80031ac <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800317e:	f7ff fc8f 	bl	8002aa0 <main>

08003182 <LoopForever>:

LoopForever:
    b LoopForever
 8003182:	e7fe      	b.n	8003182 <LoopForever>
  ldr   r0, =_estack
 8003184:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003188:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800318c:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8003190:	08003afc 	.word	0x08003afc
  ldr r2, =_sbss
 8003194:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8003198:	20012e5c 	.word	0x20012e5c

0800319c <ADC_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 800319c:	e7fe      	b.n	800319c <ADC_IRQHandler>
	...

080031a0 <__errno>:
 80031a0:	4b01      	ldr	r3, [pc, #4]	; (80031a8 <__errno+0x8>)
 80031a2:	6818      	ldr	r0, [r3, #0]
 80031a4:	4770      	bx	lr
 80031a6:	bf00      	nop
 80031a8:	20000028 	.word	0x20000028

080031ac <__libc_init_array>:
 80031ac:	b570      	push	{r4, r5, r6, lr}
 80031ae:	4e0d      	ldr	r6, [pc, #52]	; (80031e4 <__libc_init_array+0x38>)
 80031b0:	4c0d      	ldr	r4, [pc, #52]	; (80031e8 <__libc_init_array+0x3c>)
 80031b2:	1ba4      	subs	r4, r4, r6
 80031b4:	10a4      	asrs	r4, r4, #2
 80031b6:	2500      	movs	r5, #0
 80031b8:	42a5      	cmp	r5, r4
 80031ba:	d109      	bne.n	80031d0 <__libc_init_array+0x24>
 80031bc:	4e0b      	ldr	r6, [pc, #44]	; (80031ec <__libc_init_array+0x40>)
 80031be:	4c0c      	ldr	r4, [pc, #48]	; (80031f0 <__libc_init_array+0x44>)
 80031c0:	f000 fc28 	bl	8003a14 <_init>
 80031c4:	1ba4      	subs	r4, r4, r6
 80031c6:	10a4      	asrs	r4, r4, #2
 80031c8:	2500      	movs	r5, #0
 80031ca:	42a5      	cmp	r5, r4
 80031cc:	d105      	bne.n	80031da <__libc_init_array+0x2e>
 80031ce:	bd70      	pop	{r4, r5, r6, pc}
 80031d0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031d4:	4798      	blx	r3
 80031d6:	3501      	adds	r5, #1
 80031d8:	e7ee      	b.n	80031b8 <__libc_init_array+0xc>
 80031da:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80031de:	4798      	blx	r3
 80031e0:	3501      	adds	r5, #1
 80031e2:	e7f2      	b.n	80031ca <__libc_init_array+0x1e>
 80031e4:	08003af4 	.word	0x08003af4
 80031e8:	08003af4 	.word	0x08003af4
 80031ec:	08003af4 	.word	0x08003af4
 80031f0:	08003af8 	.word	0x08003af8

080031f4 <memcpy>:
 80031f4:	b510      	push	{r4, lr}
 80031f6:	1e43      	subs	r3, r0, #1
 80031f8:	440a      	add	r2, r1
 80031fa:	4291      	cmp	r1, r2
 80031fc:	d100      	bne.n	8003200 <memcpy+0xc>
 80031fe:	bd10      	pop	{r4, pc}
 8003200:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003204:	f803 4f01 	strb.w	r4, [r3, #1]!
 8003208:	e7f7      	b.n	80031fa <memcpy+0x6>

0800320a <memset>:
 800320a:	4402      	add	r2, r0
 800320c:	4603      	mov	r3, r0
 800320e:	4293      	cmp	r3, r2
 8003210:	d100      	bne.n	8003214 <memset+0xa>
 8003212:	4770      	bx	lr
 8003214:	f803 1b01 	strb.w	r1, [r3], #1
 8003218:	e7f9      	b.n	800320e <memset+0x4>
	...

0800321c <siprintf>:
 800321c:	b40e      	push	{r1, r2, r3}
 800321e:	b500      	push	{lr}
 8003220:	b09c      	sub	sp, #112	; 0x70
 8003222:	ab1d      	add	r3, sp, #116	; 0x74
 8003224:	9002      	str	r0, [sp, #8]
 8003226:	9006      	str	r0, [sp, #24]
 8003228:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800322c:	4809      	ldr	r0, [pc, #36]	; (8003254 <siprintf+0x38>)
 800322e:	9107      	str	r1, [sp, #28]
 8003230:	9104      	str	r1, [sp, #16]
 8003232:	4909      	ldr	r1, [pc, #36]	; (8003258 <siprintf+0x3c>)
 8003234:	f853 2b04 	ldr.w	r2, [r3], #4
 8003238:	9105      	str	r1, [sp, #20]
 800323a:	6800      	ldr	r0, [r0, #0]
 800323c:	9301      	str	r3, [sp, #4]
 800323e:	a902      	add	r1, sp, #8
 8003240:	f000 f866 	bl	8003310 <_svfiprintf_r>
 8003244:	9b02      	ldr	r3, [sp, #8]
 8003246:	2200      	movs	r2, #0
 8003248:	701a      	strb	r2, [r3, #0]
 800324a:	b01c      	add	sp, #112	; 0x70
 800324c:	f85d eb04 	ldr.w	lr, [sp], #4
 8003250:	b003      	add	sp, #12
 8003252:	4770      	bx	lr
 8003254:	20000028 	.word	0x20000028
 8003258:	ffff0208 	.word	0xffff0208

0800325c <__ssputs_r>:
 800325c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003260:	688e      	ldr	r6, [r1, #8]
 8003262:	429e      	cmp	r6, r3
 8003264:	4682      	mov	sl, r0
 8003266:	460c      	mov	r4, r1
 8003268:	4690      	mov	r8, r2
 800326a:	4699      	mov	r9, r3
 800326c:	d837      	bhi.n	80032de <__ssputs_r+0x82>
 800326e:	898a      	ldrh	r2, [r1, #12]
 8003270:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003274:	d031      	beq.n	80032da <__ssputs_r+0x7e>
 8003276:	6825      	ldr	r5, [r4, #0]
 8003278:	6909      	ldr	r1, [r1, #16]
 800327a:	1a6f      	subs	r7, r5, r1
 800327c:	6965      	ldr	r5, [r4, #20]
 800327e:	2302      	movs	r3, #2
 8003280:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003284:	fb95 f5f3 	sdiv	r5, r5, r3
 8003288:	f109 0301 	add.w	r3, r9, #1
 800328c:	443b      	add	r3, r7
 800328e:	429d      	cmp	r5, r3
 8003290:	bf38      	it	cc
 8003292:	461d      	movcc	r5, r3
 8003294:	0553      	lsls	r3, r2, #21
 8003296:	d530      	bpl.n	80032fa <__ssputs_r+0x9e>
 8003298:	4629      	mov	r1, r5
 800329a:	f000 fb21 	bl	80038e0 <_malloc_r>
 800329e:	4606      	mov	r6, r0
 80032a0:	b950      	cbnz	r0, 80032b8 <__ssputs_r+0x5c>
 80032a2:	230c      	movs	r3, #12
 80032a4:	f8ca 3000 	str.w	r3, [sl]
 80032a8:	89a3      	ldrh	r3, [r4, #12]
 80032aa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80032ae:	81a3      	strh	r3, [r4, #12]
 80032b0:	f04f 30ff 	mov.w	r0, #4294967295
 80032b4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80032b8:	463a      	mov	r2, r7
 80032ba:	6921      	ldr	r1, [r4, #16]
 80032bc:	f7ff ff9a 	bl	80031f4 <memcpy>
 80032c0:	89a3      	ldrh	r3, [r4, #12]
 80032c2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80032c6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80032ca:	81a3      	strh	r3, [r4, #12]
 80032cc:	6126      	str	r6, [r4, #16]
 80032ce:	6165      	str	r5, [r4, #20]
 80032d0:	443e      	add	r6, r7
 80032d2:	1bed      	subs	r5, r5, r7
 80032d4:	6026      	str	r6, [r4, #0]
 80032d6:	60a5      	str	r5, [r4, #8]
 80032d8:	464e      	mov	r6, r9
 80032da:	454e      	cmp	r6, r9
 80032dc:	d900      	bls.n	80032e0 <__ssputs_r+0x84>
 80032de:	464e      	mov	r6, r9
 80032e0:	4632      	mov	r2, r6
 80032e2:	4641      	mov	r1, r8
 80032e4:	6820      	ldr	r0, [r4, #0]
 80032e6:	f000 fa93 	bl	8003810 <memmove>
 80032ea:	68a3      	ldr	r3, [r4, #8]
 80032ec:	1b9b      	subs	r3, r3, r6
 80032ee:	60a3      	str	r3, [r4, #8]
 80032f0:	6823      	ldr	r3, [r4, #0]
 80032f2:	441e      	add	r6, r3
 80032f4:	6026      	str	r6, [r4, #0]
 80032f6:	2000      	movs	r0, #0
 80032f8:	e7dc      	b.n	80032b4 <__ssputs_r+0x58>
 80032fa:	462a      	mov	r2, r5
 80032fc:	f000 fb4a 	bl	8003994 <_realloc_r>
 8003300:	4606      	mov	r6, r0
 8003302:	2800      	cmp	r0, #0
 8003304:	d1e2      	bne.n	80032cc <__ssputs_r+0x70>
 8003306:	6921      	ldr	r1, [r4, #16]
 8003308:	4650      	mov	r0, sl
 800330a:	f000 fa9b 	bl	8003844 <_free_r>
 800330e:	e7c8      	b.n	80032a2 <__ssputs_r+0x46>

08003310 <_svfiprintf_r>:
 8003310:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003314:	461d      	mov	r5, r3
 8003316:	898b      	ldrh	r3, [r1, #12]
 8003318:	061f      	lsls	r7, r3, #24
 800331a:	b09d      	sub	sp, #116	; 0x74
 800331c:	4680      	mov	r8, r0
 800331e:	460c      	mov	r4, r1
 8003320:	4616      	mov	r6, r2
 8003322:	d50f      	bpl.n	8003344 <_svfiprintf_r+0x34>
 8003324:	690b      	ldr	r3, [r1, #16]
 8003326:	b96b      	cbnz	r3, 8003344 <_svfiprintf_r+0x34>
 8003328:	2140      	movs	r1, #64	; 0x40
 800332a:	f000 fad9 	bl	80038e0 <_malloc_r>
 800332e:	6020      	str	r0, [r4, #0]
 8003330:	6120      	str	r0, [r4, #16]
 8003332:	b928      	cbnz	r0, 8003340 <_svfiprintf_r+0x30>
 8003334:	230c      	movs	r3, #12
 8003336:	f8c8 3000 	str.w	r3, [r8]
 800333a:	f04f 30ff 	mov.w	r0, #4294967295
 800333e:	e0c8      	b.n	80034d2 <_svfiprintf_r+0x1c2>
 8003340:	2340      	movs	r3, #64	; 0x40
 8003342:	6163      	str	r3, [r4, #20]
 8003344:	2300      	movs	r3, #0
 8003346:	9309      	str	r3, [sp, #36]	; 0x24
 8003348:	2320      	movs	r3, #32
 800334a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800334e:	2330      	movs	r3, #48	; 0x30
 8003350:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8003354:	9503      	str	r5, [sp, #12]
 8003356:	f04f 0b01 	mov.w	fp, #1
 800335a:	4637      	mov	r7, r6
 800335c:	463d      	mov	r5, r7
 800335e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8003362:	b10b      	cbz	r3, 8003368 <_svfiprintf_r+0x58>
 8003364:	2b25      	cmp	r3, #37	; 0x25
 8003366:	d13e      	bne.n	80033e6 <_svfiprintf_r+0xd6>
 8003368:	ebb7 0a06 	subs.w	sl, r7, r6
 800336c:	d00b      	beq.n	8003386 <_svfiprintf_r+0x76>
 800336e:	4653      	mov	r3, sl
 8003370:	4632      	mov	r2, r6
 8003372:	4621      	mov	r1, r4
 8003374:	4640      	mov	r0, r8
 8003376:	f7ff ff71 	bl	800325c <__ssputs_r>
 800337a:	3001      	adds	r0, #1
 800337c:	f000 80a4 	beq.w	80034c8 <_svfiprintf_r+0x1b8>
 8003380:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003382:	4453      	add	r3, sl
 8003384:	9309      	str	r3, [sp, #36]	; 0x24
 8003386:	783b      	ldrb	r3, [r7, #0]
 8003388:	2b00      	cmp	r3, #0
 800338a:	f000 809d 	beq.w	80034c8 <_svfiprintf_r+0x1b8>
 800338e:	2300      	movs	r3, #0
 8003390:	f04f 32ff 	mov.w	r2, #4294967295
 8003394:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003398:	9304      	str	r3, [sp, #16]
 800339a:	9307      	str	r3, [sp, #28]
 800339c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80033a0:	931a      	str	r3, [sp, #104]	; 0x68
 80033a2:	462f      	mov	r7, r5
 80033a4:	2205      	movs	r2, #5
 80033a6:	f817 1b01 	ldrb.w	r1, [r7], #1
 80033aa:	4850      	ldr	r0, [pc, #320]	; (80034ec <_svfiprintf_r+0x1dc>)
 80033ac:	f7fc ff38 	bl	8000220 <memchr>
 80033b0:	9b04      	ldr	r3, [sp, #16]
 80033b2:	b9d0      	cbnz	r0, 80033ea <_svfiprintf_r+0xda>
 80033b4:	06d9      	lsls	r1, r3, #27
 80033b6:	bf44      	itt	mi
 80033b8:	2220      	movmi	r2, #32
 80033ba:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033be:	071a      	lsls	r2, r3, #28
 80033c0:	bf44      	itt	mi
 80033c2:	222b      	movmi	r2, #43	; 0x2b
 80033c4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80033c8:	782a      	ldrb	r2, [r5, #0]
 80033ca:	2a2a      	cmp	r2, #42	; 0x2a
 80033cc:	d015      	beq.n	80033fa <_svfiprintf_r+0xea>
 80033ce:	9a07      	ldr	r2, [sp, #28]
 80033d0:	462f      	mov	r7, r5
 80033d2:	2000      	movs	r0, #0
 80033d4:	250a      	movs	r5, #10
 80033d6:	4639      	mov	r1, r7
 80033d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033dc:	3b30      	subs	r3, #48	; 0x30
 80033de:	2b09      	cmp	r3, #9
 80033e0:	d94d      	bls.n	800347e <_svfiprintf_r+0x16e>
 80033e2:	b1b8      	cbz	r0, 8003414 <_svfiprintf_r+0x104>
 80033e4:	e00f      	b.n	8003406 <_svfiprintf_r+0xf6>
 80033e6:	462f      	mov	r7, r5
 80033e8:	e7b8      	b.n	800335c <_svfiprintf_r+0x4c>
 80033ea:	4a40      	ldr	r2, [pc, #256]	; (80034ec <_svfiprintf_r+0x1dc>)
 80033ec:	1a80      	subs	r0, r0, r2
 80033ee:	fa0b f000 	lsl.w	r0, fp, r0
 80033f2:	4318      	orrs	r0, r3
 80033f4:	9004      	str	r0, [sp, #16]
 80033f6:	463d      	mov	r5, r7
 80033f8:	e7d3      	b.n	80033a2 <_svfiprintf_r+0x92>
 80033fa:	9a03      	ldr	r2, [sp, #12]
 80033fc:	1d11      	adds	r1, r2, #4
 80033fe:	6812      	ldr	r2, [r2, #0]
 8003400:	9103      	str	r1, [sp, #12]
 8003402:	2a00      	cmp	r2, #0
 8003404:	db01      	blt.n	800340a <_svfiprintf_r+0xfa>
 8003406:	9207      	str	r2, [sp, #28]
 8003408:	e004      	b.n	8003414 <_svfiprintf_r+0x104>
 800340a:	4252      	negs	r2, r2
 800340c:	f043 0302 	orr.w	r3, r3, #2
 8003410:	9207      	str	r2, [sp, #28]
 8003412:	9304      	str	r3, [sp, #16]
 8003414:	783b      	ldrb	r3, [r7, #0]
 8003416:	2b2e      	cmp	r3, #46	; 0x2e
 8003418:	d10c      	bne.n	8003434 <_svfiprintf_r+0x124>
 800341a:	787b      	ldrb	r3, [r7, #1]
 800341c:	2b2a      	cmp	r3, #42	; 0x2a
 800341e:	d133      	bne.n	8003488 <_svfiprintf_r+0x178>
 8003420:	9b03      	ldr	r3, [sp, #12]
 8003422:	1d1a      	adds	r2, r3, #4
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	9203      	str	r2, [sp, #12]
 8003428:	2b00      	cmp	r3, #0
 800342a:	bfb8      	it	lt
 800342c:	f04f 33ff 	movlt.w	r3, #4294967295
 8003430:	3702      	adds	r7, #2
 8003432:	9305      	str	r3, [sp, #20]
 8003434:	4d2e      	ldr	r5, [pc, #184]	; (80034f0 <_svfiprintf_r+0x1e0>)
 8003436:	7839      	ldrb	r1, [r7, #0]
 8003438:	2203      	movs	r2, #3
 800343a:	4628      	mov	r0, r5
 800343c:	f7fc fef0 	bl	8000220 <memchr>
 8003440:	b138      	cbz	r0, 8003452 <_svfiprintf_r+0x142>
 8003442:	2340      	movs	r3, #64	; 0x40
 8003444:	1b40      	subs	r0, r0, r5
 8003446:	fa03 f000 	lsl.w	r0, r3, r0
 800344a:	9b04      	ldr	r3, [sp, #16]
 800344c:	4303      	orrs	r3, r0
 800344e:	3701      	adds	r7, #1
 8003450:	9304      	str	r3, [sp, #16]
 8003452:	7839      	ldrb	r1, [r7, #0]
 8003454:	4827      	ldr	r0, [pc, #156]	; (80034f4 <_svfiprintf_r+0x1e4>)
 8003456:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800345a:	2206      	movs	r2, #6
 800345c:	1c7e      	adds	r6, r7, #1
 800345e:	f7fc fedf 	bl	8000220 <memchr>
 8003462:	2800      	cmp	r0, #0
 8003464:	d038      	beq.n	80034d8 <_svfiprintf_r+0x1c8>
 8003466:	4b24      	ldr	r3, [pc, #144]	; (80034f8 <_svfiprintf_r+0x1e8>)
 8003468:	bb13      	cbnz	r3, 80034b0 <_svfiprintf_r+0x1a0>
 800346a:	9b03      	ldr	r3, [sp, #12]
 800346c:	3307      	adds	r3, #7
 800346e:	f023 0307 	bic.w	r3, r3, #7
 8003472:	3308      	adds	r3, #8
 8003474:	9303      	str	r3, [sp, #12]
 8003476:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8003478:	444b      	add	r3, r9
 800347a:	9309      	str	r3, [sp, #36]	; 0x24
 800347c:	e76d      	b.n	800335a <_svfiprintf_r+0x4a>
 800347e:	fb05 3202 	mla	r2, r5, r2, r3
 8003482:	2001      	movs	r0, #1
 8003484:	460f      	mov	r7, r1
 8003486:	e7a6      	b.n	80033d6 <_svfiprintf_r+0xc6>
 8003488:	2300      	movs	r3, #0
 800348a:	3701      	adds	r7, #1
 800348c:	9305      	str	r3, [sp, #20]
 800348e:	4619      	mov	r1, r3
 8003490:	250a      	movs	r5, #10
 8003492:	4638      	mov	r0, r7
 8003494:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003498:	3a30      	subs	r2, #48	; 0x30
 800349a:	2a09      	cmp	r2, #9
 800349c:	d903      	bls.n	80034a6 <_svfiprintf_r+0x196>
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d0c8      	beq.n	8003434 <_svfiprintf_r+0x124>
 80034a2:	9105      	str	r1, [sp, #20]
 80034a4:	e7c6      	b.n	8003434 <_svfiprintf_r+0x124>
 80034a6:	fb05 2101 	mla	r1, r5, r1, r2
 80034aa:	2301      	movs	r3, #1
 80034ac:	4607      	mov	r7, r0
 80034ae:	e7f0      	b.n	8003492 <_svfiprintf_r+0x182>
 80034b0:	ab03      	add	r3, sp, #12
 80034b2:	9300      	str	r3, [sp, #0]
 80034b4:	4622      	mov	r2, r4
 80034b6:	4b11      	ldr	r3, [pc, #68]	; (80034fc <_svfiprintf_r+0x1ec>)
 80034b8:	a904      	add	r1, sp, #16
 80034ba:	4640      	mov	r0, r8
 80034bc:	f3af 8000 	nop.w
 80034c0:	f1b0 3fff 	cmp.w	r0, #4294967295
 80034c4:	4681      	mov	r9, r0
 80034c6:	d1d6      	bne.n	8003476 <_svfiprintf_r+0x166>
 80034c8:	89a3      	ldrh	r3, [r4, #12]
 80034ca:	065b      	lsls	r3, r3, #25
 80034cc:	f53f af35 	bmi.w	800333a <_svfiprintf_r+0x2a>
 80034d0:	9809      	ldr	r0, [sp, #36]	; 0x24
 80034d2:	b01d      	add	sp, #116	; 0x74
 80034d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80034d8:	ab03      	add	r3, sp, #12
 80034da:	9300      	str	r3, [sp, #0]
 80034dc:	4622      	mov	r2, r4
 80034de:	4b07      	ldr	r3, [pc, #28]	; (80034fc <_svfiprintf_r+0x1ec>)
 80034e0:	a904      	add	r1, sp, #16
 80034e2:	4640      	mov	r0, r8
 80034e4:	f000 f882 	bl	80035ec <_printf_i>
 80034e8:	e7ea      	b.n	80034c0 <_svfiprintf_r+0x1b0>
 80034ea:	bf00      	nop
 80034ec:	08003ac0 	.word	0x08003ac0
 80034f0:	08003ac6 	.word	0x08003ac6
 80034f4:	08003aca 	.word	0x08003aca
 80034f8:	00000000 	.word	0x00000000
 80034fc:	0800325d 	.word	0x0800325d

08003500 <_printf_common>:
 8003500:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003504:	4691      	mov	r9, r2
 8003506:	461f      	mov	r7, r3
 8003508:	688a      	ldr	r2, [r1, #8]
 800350a:	690b      	ldr	r3, [r1, #16]
 800350c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8003510:	4293      	cmp	r3, r2
 8003512:	bfb8      	it	lt
 8003514:	4613      	movlt	r3, r2
 8003516:	f8c9 3000 	str.w	r3, [r9]
 800351a:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800351e:	4606      	mov	r6, r0
 8003520:	460c      	mov	r4, r1
 8003522:	b112      	cbz	r2, 800352a <_printf_common+0x2a>
 8003524:	3301      	adds	r3, #1
 8003526:	f8c9 3000 	str.w	r3, [r9]
 800352a:	6823      	ldr	r3, [r4, #0]
 800352c:	0699      	lsls	r1, r3, #26
 800352e:	bf42      	ittt	mi
 8003530:	f8d9 3000 	ldrmi.w	r3, [r9]
 8003534:	3302      	addmi	r3, #2
 8003536:	f8c9 3000 	strmi.w	r3, [r9]
 800353a:	6825      	ldr	r5, [r4, #0]
 800353c:	f015 0506 	ands.w	r5, r5, #6
 8003540:	d107      	bne.n	8003552 <_printf_common+0x52>
 8003542:	f104 0a19 	add.w	sl, r4, #25
 8003546:	68e3      	ldr	r3, [r4, #12]
 8003548:	f8d9 2000 	ldr.w	r2, [r9]
 800354c:	1a9b      	subs	r3, r3, r2
 800354e:	42ab      	cmp	r3, r5
 8003550:	dc28      	bgt.n	80035a4 <_printf_common+0xa4>
 8003552:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8003556:	6822      	ldr	r2, [r4, #0]
 8003558:	3300      	adds	r3, #0
 800355a:	bf18      	it	ne
 800355c:	2301      	movne	r3, #1
 800355e:	0692      	lsls	r2, r2, #26
 8003560:	d42d      	bmi.n	80035be <_printf_common+0xbe>
 8003562:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8003566:	4639      	mov	r1, r7
 8003568:	4630      	mov	r0, r6
 800356a:	47c0      	blx	r8
 800356c:	3001      	adds	r0, #1
 800356e:	d020      	beq.n	80035b2 <_printf_common+0xb2>
 8003570:	6823      	ldr	r3, [r4, #0]
 8003572:	68e5      	ldr	r5, [r4, #12]
 8003574:	f8d9 2000 	ldr.w	r2, [r9]
 8003578:	f003 0306 	and.w	r3, r3, #6
 800357c:	2b04      	cmp	r3, #4
 800357e:	bf08      	it	eq
 8003580:	1aad      	subeq	r5, r5, r2
 8003582:	68a3      	ldr	r3, [r4, #8]
 8003584:	6922      	ldr	r2, [r4, #16]
 8003586:	bf0c      	ite	eq
 8003588:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800358c:	2500      	movne	r5, #0
 800358e:	4293      	cmp	r3, r2
 8003590:	bfc4      	itt	gt
 8003592:	1a9b      	subgt	r3, r3, r2
 8003594:	18ed      	addgt	r5, r5, r3
 8003596:	f04f 0900 	mov.w	r9, #0
 800359a:	341a      	adds	r4, #26
 800359c:	454d      	cmp	r5, r9
 800359e:	d11a      	bne.n	80035d6 <_printf_common+0xd6>
 80035a0:	2000      	movs	r0, #0
 80035a2:	e008      	b.n	80035b6 <_printf_common+0xb6>
 80035a4:	2301      	movs	r3, #1
 80035a6:	4652      	mov	r2, sl
 80035a8:	4639      	mov	r1, r7
 80035aa:	4630      	mov	r0, r6
 80035ac:	47c0      	blx	r8
 80035ae:	3001      	adds	r0, #1
 80035b0:	d103      	bne.n	80035ba <_printf_common+0xba>
 80035b2:	f04f 30ff 	mov.w	r0, #4294967295
 80035b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80035ba:	3501      	adds	r5, #1
 80035bc:	e7c3      	b.n	8003546 <_printf_common+0x46>
 80035be:	18e1      	adds	r1, r4, r3
 80035c0:	1c5a      	adds	r2, r3, #1
 80035c2:	2030      	movs	r0, #48	; 0x30
 80035c4:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80035c8:	4422      	add	r2, r4
 80035ca:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80035ce:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80035d2:	3302      	adds	r3, #2
 80035d4:	e7c5      	b.n	8003562 <_printf_common+0x62>
 80035d6:	2301      	movs	r3, #1
 80035d8:	4622      	mov	r2, r4
 80035da:	4639      	mov	r1, r7
 80035dc:	4630      	mov	r0, r6
 80035de:	47c0      	blx	r8
 80035e0:	3001      	adds	r0, #1
 80035e2:	d0e6      	beq.n	80035b2 <_printf_common+0xb2>
 80035e4:	f109 0901 	add.w	r9, r9, #1
 80035e8:	e7d8      	b.n	800359c <_printf_common+0x9c>
	...

080035ec <_printf_i>:
 80035ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80035f0:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 80035f4:	460c      	mov	r4, r1
 80035f6:	7e09      	ldrb	r1, [r1, #24]
 80035f8:	b085      	sub	sp, #20
 80035fa:	296e      	cmp	r1, #110	; 0x6e
 80035fc:	4617      	mov	r7, r2
 80035fe:	4606      	mov	r6, r0
 8003600:	4698      	mov	r8, r3
 8003602:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8003604:	f000 80b3 	beq.w	800376e <_printf_i+0x182>
 8003608:	d822      	bhi.n	8003650 <_printf_i+0x64>
 800360a:	2963      	cmp	r1, #99	; 0x63
 800360c:	d036      	beq.n	800367c <_printf_i+0x90>
 800360e:	d80a      	bhi.n	8003626 <_printf_i+0x3a>
 8003610:	2900      	cmp	r1, #0
 8003612:	f000 80b9 	beq.w	8003788 <_printf_i+0x19c>
 8003616:	2958      	cmp	r1, #88	; 0x58
 8003618:	f000 8083 	beq.w	8003722 <_printf_i+0x136>
 800361c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003620:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8003624:	e032      	b.n	800368c <_printf_i+0xa0>
 8003626:	2964      	cmp	r1, #100	; 0x64
 8003628:	d001      	beq.n	800362e <_printf_i+0x42>
 800362a:	2969      	cmp	r1, #105	; 0x69
 800362c:	d1f6      	bne.n	800361c <_printf_i+0x30>
 800362e:	6820      	ldr	r0, [r4, #0]
 8003630:	6813      	ldr	r3, [r2, #0]
 8003632:	0605      	lsls	r5, r0, #24
 8003634:	f103 0104 	add.w	r1, r3, #4
 8003638:	d52a      	bpl.n	8003690 <_printf_i+0xa4>
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	6011      	str	r1, [r2, #0]
 800363e:	2b00      	cmp	r3, #0
 8003640:	da03      	bge.n	800364a <_printf_i+0x5e>
 8003642:	222d      	movs	r2, #45	; 0x2d
 8003644:	425b      	negs	r3, r3
 8003646:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800364a:	486f      	ldr	r0, [pc, #444]	; (8003808 <_printf_i+0x21c>)
 800364c:	220a      	movs	r2, #10
 800364e:	e039      	b.n	80036c4 <_printf_i+0xd8>
 8003650:	2973      	cmp	r1, #115	; 0x73
 8003652:	f000 809d 	beq.w	8003790 <_printf_i+0x1a4>
 8003656:	d808      	bhi.n	800366a <_printf_i+0x7e>
 8003658:	296f      	cmp	r1, #111	; 0x6f
 800365a:	d020      	beq.n	800369e <_printf_i+0xb2>
 800365c:	2970      	cmp	r1, #112	; 0x70
 800365e:	d1dd      	bne.n	800361c <_printf_i+0x30>
 8003660:	6823      	ldr	r3, [r4, #0]
 8003662:	f043 0320 	orr.w	r3, r3, #32
 8003666:	6023      	str	r3, [r4, #0]
 8003668:	e003      	b.n	8003672 <_printf_i+0x86>
 800366a:	2975      	cmp	r1, #117	; 0x75
 800366c:	d017      	beq.n	800369e <_printf_i+0xb2>
 800366e:	2978      	cmp	r1, #120	; 0x78
 8003670:	d1d4      	bne.n	800361c <_printf_i+0x30>
 8003672:	2378      	movs	r3, #120	; 0x78
 8003674:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8003678:	4864      	ldr	r0, [pc, #400]	; (800380c <_printf_i+0x220>)
 800367a:	e055      	b.n	8003728 <_printf_i+0x13c>
 800367c:	6813      	ldr	r3, [r2, #0]
 800367e:	1d19      	adds	r1, r3, #4
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	6011      	str	r1, [r2, #0]
 8003684:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003688:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800368c:	2301      	movs	r3, #1
 800368e:	e08c      	b.n	80037aa <_printf_i+0x1be>
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	6011      	str	r1, [r2, #0]
 8003694:	f010 0f40 	tst.w	r0, #64	; 0x40
 8003698:	bf18      	it	ne
 800369a:	b21b      	sxthne	r3, r3
 800369c:	e7cf      	b.n	800363e <_printf_i+0x52>
 800369e:	6813      	ldr	r3, [r2, #0]
 80036a0:	6825      	ldr	r5, [r4, #0]
 80036a2:	1d18      	adds	r0, r3, #4
 80036a4:	6010      	str	r0, [r2, #0]
 80036a6:	0628      	lsls	r0, r5, #24
 80036a8:	d501      	bpl.n	80036ae <_printf_i+0xc2>
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	e002      	b.n	80036b4 <_printf_i+0xc8>
 80036ae:	0668      	lsls	r0, r5, #25
 80036b0:	d5fb      	bpl.n	80036aa <_printf_i+0xbe>
 80036b2:	881b      	ldrh	r3, [r3, #0]
 80036b4:	4854      	ldr	r0, [pc, #336]	; (8003808 <_printf_i+0x21c>)
 80036b6:	296f      	cmp	r1, #111	; 0x6f
 80036b8:	bf14      	ite	ne
 80036ba:	220a      	movne	r2, #10
 80036bc:	2208      	moveq	r2, #8
 80036be:	2100      	movs	r1, #0
 80036c0:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80036c4:	6865      	ldr	r5, [r4, #4]
 80036c6:	60a5      	str	r5, [r4, #8]
 80036c8:	2d00      	cmp	r5, #0
 80036ca:	f2c0 8095 	blt.w	80037f8 <_printf_i+0x20c>
 80036ce:	6821      	ldr	r1, [r4, #0]
 80036d0:	f021 0104 	bic.w	r1, r1, #4
 80036d4:	6021      	str	r1, [r4, #0]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d13d      	bne.n	8003756 <_printf_i+0x16a>
 80036da:	2d00      	cmp	r5, #0
 80036dc:	f040 808e 	bne.w	80037fc <_printf_i+0x210>
 80036e0:	4665      	mov	r5, ip
 80036e2:	2a08      	cmp	r2, #8
 80036e4:	d10b      	bne.n	80036fe <_printf_i+0x112>
 80036e6:	6823      	ldr	r3, [r4, #0]
 80036e8:	07db      	lsls	r3, r3, #31
 80036ea:	d508      	bpl.n	80036fe <_printf_i+0x112>
 80036ec:	6923      	ldr	r3, [r4, #16]
 80036ee:	6862      	ldr	r2, [r4, #4]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	bfde      	ittt	le
 80036f4:	2330      	movle	r3, #48	; 0x30
 80036f6:	f805 3c01 	strble.w	r3, [r5, #-1]
 80036fa:	f105 35ff 	addle.w	r5, r5, #4294967295
 80036fe:	ebac 0305 	sub.w	r3, ip, r5
 8003702:	6123      	str	r3, [r4, #16]
 8003704:	f8cd 8000 	str.w	r8, [sp]
 8003708:	463b      	mov	r3, r7
 800370a:	aa03      	add	r2, sp, #12
 800370c:	4621      	mov	r1, r4
 800370e:	4630      	mov	r0, r6
 8003710:	f7ff fef6 	bl	8003500 <_printf_common>
 8003714:	3001      	adds	r0, #1
 8003716:	d14d      	bne.n	80037b4 <_printf_i+0x1c8>
 8003718:	f04f 30ff 	mov.w	r0, #4294967295
 800371c:	b005      	add	sp, #20
 800371e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003722:	4839      	ldr	r0, [pc, #228]	; (8003808 <_printf_i+0x21c>)
 8003724:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8003728:	6813      	ldr	r3, [r2, #0]
 800372a:	6821      	ldr	r1, [r4, #0]
 800372c:	1d1d      	adds	r5, r3, #4
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	6015      	str	r5, [r2, #0]
 8003732:	060a      	lsls	r2, r1, #24
 8003734:	d50b      	bpl.n	800374e <_printf_i+0x162>
 8003736:	07ca      	lsls	r2, r1, #31
 8003738:	bf44      	itt	mi
 800373a:	f041 0120 	orrmi.w	r1, r1, #32
 800373e:	6021      	strmi	r1, [r4, #0]
 8003740:	b91b      	cbnz	r3, 800374a <_printf_i+0x15e>
 8003742:	6822      	ldr	r2, [r4, #0]
 8003744:	f022 0220 	bic.w	r2, r2, #32
 8003748:	6022      	str	r2, [r4, #0]
 800374a:	2210      	movs	r2, #16
 800374c:	e7b7      	b.n	80036be <_printf_i+0xd2>
 800374e:	064d      	lsls	r5, r1, #25
 8003750:	bf48      	it	mi
 8003752:	b29b      	uxthmi	r3, r3
 8003754:	e7ef      	b.n	8003736 <_printf_i+0x14a>
 8003756:	4665      	mov	r5, ip
 8003758:	fbb3 f1f2 	udiv	r1, r3, r2
 800375c:	fb02 3311 	mls	r3, r2, r1, r3
 8003760:	5cc3      	ldrb	r3, [r0, r3]
 8003762:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8003766:	460b      	mov	r3, r1
 8003768:	2900      	cmp	r1, #0
 800376a:	d1f5      	bne.n	8003758 <_printf_i+0x16c>
 800376c:	e7b9      	b.n	80036e2 <_printf_i+0xf6>
 800376e:	6813      	ldr	r3, [r2, #0]
 8003770:	6825      	ldr	r5, [r4, #0]
 8003772:	6961      	ldr	r1, [r4, #20]
 8003774:	1d18      	adds	r0, r3, #4
 8003776:	6010      	str	r0, [r2, #0]
 8003778:	0628      	lsls	r0, r5, #24
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	d501      	bpl.n	8003782 <_printf_i+0x196>
 800377e:	6019      	str	r1, [r3, #0]
 8003780:	e002      	b.n	8003788 <_printf_i+0x19c>
 8003782:	066a      	lsls	r2, r5, #25
 8003784:	d5fb      	bpl.n	800377e <_printf_i+0x192>
 8003786:	8019      	strh	r1, [r3, #0]
 8003788:	2300      	movs	r3, #0
 800378a:	6123      	str	r3, [r4, #16]
 800378c:	4665      	mov	r5, ip
 800378e:	e7b9      	b.n	8003704 <_printf_i+0x118>
 8003790:	6813      	ldr	r3, [r2, #0]
 8003792:	1d19      	adds	r1, r3, #4
 8003794:	6011      	str	r1, [r2, #0]
 8003796:	681d      	ldr	r5, [r3, #0]
 8003798:	6862      	ldr	r2, [r4, #4]
 800379a:	2100      	movs	r1, #0
 800379c:	4628      	mov	r0, r5
 800379e:	f7fc fd3f 	bl	8000220 <memchr>
 80037a2:	b108      	cbz	r0, 80037a8 <_printf_i+0x1bc>
 80037a4:	1b40      	subs	r0, r0, r5
 80037a6:	6060      	str	r0, [r4, #4]
 80037a8:	6863      	ldr	r3, [r4, #4]
 80037aa:	6123      	str	r3, [r4, #16]
 80037ac:	2300      	movs	r3, #0
 80037ae:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80037b2:	e7a7      	b.n	8003704 <_printf_i+0x118>
 80037b4:	6923      	ldr	r3, [r4, #16]
 80037b6:	462a      	mov	r2, r5
 80037b8:	4639      	mov	r1, r7
 80037ba:	4630      	mov	r0, r6
 80037bc:	47c0      	blx	r8
 80037be:	3001      	adds	r0, #1
 80037c0:	d0aa      	beq.n	8003718 <_printf_i+0x12c>
 80037c2:	6823      	ldr	r3, [r4, #0]
 80037c4:	079b      	lsls	r3, r3, #30
 80037c6:	d413      	bmi.n	80037f0 <_printf_i+0x204>
 80037c8:	68e0      	ldr	r0, [r4, #12]
 80037ca:	9b03      	ldr	r3, [sp, #12]
 80037cc:	4298      	cmp	r0, r3
 80037ce:	bfb8      	it	lt
 80037d0:	4618      	movlt	r0, r3
 80037d2:	e7a3      	b.n	800371c <_printf_i+0x130>
 80037d4:	2301      	movs	r3, #1
 80037d6:	464a      	mov	r2, r9
 80037d8:	4639      	mov	r1, r7
 80037da:	4630      	mov	r0, r6
 80037dc:	47c0      	blx	r8
 80037de:	3001      	adds	r0, #1
 80037e0:	d09a      	beq.n	8003718 <_printf_i+0x12c>
 80037e2:	3501      	adds	r5, #1
 80037e4:	68e3      	ldr	r3, [r4, #12]
 80037e6:	9a03      	ldr	r2, [sp, #12]
 80037e8:	1a9b      	subs	r3, r3, r2
 80037ea:	42ab      	cmp	r3, r5
 80037ec:	dcf2      	bgt.n	80037d4 <_printf_i+0x1e8>
 80037ee:	e7eb      	b.n	80037c8 <_printf_i+0x1dc>
 80037f0:	2500      	movs	r5, #0
 80037f2:	f104 0919 	add.w	r9, r4, #25
 80037f6:	e7f5      	b.n	80037e4 <_printf_i+0x1f8>
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d1ac      	bne.n	8003756 <_printf_i+0x16a>
 80037fc:	7803      	ldrb	r3, [r0, #0]
 80037fe:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8003802:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8003806:	e76c      	b.n	80036e2 <_printf_i+0xf6>
 8003808:	08003ad1 	.word	0x08003ad1
 800380c:	08003ae2 	.word	0x08003ae2

08003810 <memmove>:
 8003810:	4288      	cmp	r0, r1
 8003812:	b510      	push	{r4, lr}
 8003814:	eb01 0302 	add.w	r3, r1, r2
 8003818:	d807      	bhi.n	800382a <memmove+0x1a>
 800381a:	1e42      	subs	r2, r0, #1
 800381c:	4299      	cmp	r1, r3
 800381e:	d00a      	beq.n	8003836 <memmove+0x26>
 8003820:	f811 4b01 	ldrb.w	r4, [r1], #1
 8003824:	f802 4f01 	strb.w	r4, [r2, #1]!
 8003828:	e7f8      	b.n	800381c <memmove+0xc>
 800382a:	4283      	cmp	r3, r0
 800382c:	d9f5      	bls.n	800381a <memmove+0xa>
 800382e:	1881      	adds	r1, r0, r2
 8003830:	1ad2      	subs	r2, r2, r3
 8003832:	42d3      	cmn	r3, r2
 8003834:	d100      	bne.n	8003838 <memmove+0x28>
 8003836:	bd10      	pop	{r4, pc}
 8003838:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800383c:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8003840:	e7f7      	b.n	8003832 <memmove+0x22>
	...

08003844 <_free_r>:
 8003844:	b538      	push	{r3, r4, r5, lr}
 8003846:	4605      	mov	r5, r0
 8003848:	2900      	cmp	r1, #0
 800384a:	d045      	beq.n	80038d8 <_free_r+0x94>
 800384c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003850:	1f0c      	subs	r4, r1, #4
 8003852:	2b00      	cmp	r3, #0
 8003854:	bfb8      	it	lt
 8003856:	18e4      	addlt	r4, r4, r3
 8003858:	f000 f8d2 	bl	8003a00 <__malloc_lock>
 800385c:	4a1f      	ldr	r2, [pc, #124]	; (80038dc <_free_r+0x98>)
 800385e:	6813      	ldr	r3, [r2, #0]
 8003860:	4610      	mov	r0, r2
 8003862:	b933      	cbnz	r3, 8003872 <_free_r+0x2e>
 8003864:	6063      	str	r3, [r4, #4]
 8003866:	6014      	str	r4, [r2, #0]
 8003868:	4628      	mov	r0, r5
 800386a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800386e:	f000 b8c8 	b.w	8003a02 <__malloc_unlock>
 8003872:	42a3      	cmp	r3, r4
 8003874:	d90c      	bls.n	8003890 <_free_r+0x4c>
 8003876:	6821      	ldr	r1, [r4, #0]
 8003878:	1862      	adds	r2, r4, r1
 800387a:	4293      	cmp	r3, r2
 800387c:	bf04      	itt	eq
 800387e:	681a      	ldreq	r2, [r3, #0]
 8003880:	685b      	ldreq	r3, [r3, #4]
 8003882:	6063      	str	r3, [r4, #4]
 8003884:	bf04      	itt	eq
 8003886:	1852      	addeq	r2, r2, r1
 8003888:	6022      	streq	r2, [r4, #0]
 800388a:	6004      	str	r4, [r0, #0]
 800388c:	e7ec      	b.n	8003868 <_free_r+0x24>
 800388e:	4613      	mov	r3, r2
 8003890:	685a      	ldr	r2, [r3, #4]
 8003892:	b10a      	cbz	r2, 8003898 <_free_r+0x54>
 8003894:	42a2      	cmp	r2, r4
 8003896:	d9fa      	bls.n	800388e <_free_r+0x4a>
 8003898:	6819      	ldr	r1, [r3, #0]
 800389a:	1858      	adds	r0, r3, r1
 800389c:	42a0      	cmp	r0, r4
 800389e:	d10b      	bne.n	80038b8 <_free_r+0x74>
 80038a0:	6820      	ldr	r0, [r4, #0]
 80038a2:	4401      	add	r1, r0
 80038a4:	1858      	adds	r0, r3, r1
 80038a6:	4282      	cmp	r2, r0
 80038a8:	6019      	str	r1, [r3, #0]
 80038aa:	d1dd      	bne.n	8003868 <_free_r+0x24>
 80038ac:	6810      	ldr	r0, [r2, #0]
 80038ae:	6852      	ldr	r2, [r2, #4]
 80038b0:	605a      	str	r2, [r3, #4]
 80038b2:	4401      	add	r1, r0
 80038b4:	6019      	str	r1, [r3, #0]
 80038b6:	e7d7      	b.n	8003868 <_free_r+0x24>
 80038b8:	d902      	bls.n	80038c0 <_free_r+0x7c>
 80038ba:	230c      	movs	r3, #12
 80038bc:	602b      	str	r3, [r5, #0]
 80038be:	e7d3      	b.n	8003868 <_free_r+0x24>
 80038c0:	6820      	ldr	r0, [r4, #0]
 80038c2:	1821      	adds	r1, r4, r0
 80038c4:	428a      	cmp	r2, r1
 80038c6:	bf04      	itt	eq
 80038c8:	6811      	ldreq	r1, [r2, #0]
 80038ca:	6852      	ldreq	r2, [r2, #4]
 80038cc:	6062      	str	r2, [r4, #4]
 80038ce:	bf04      	itt	eq
 80038d0:	1809      	addeq	r1, r1, r0
 80038d2:	6021      	streq	r1, [r4, #0]
 80038d4:	605c      	str	r4, [r3, #4]
 80038d6:	e7c7      	b.n	8003868 <_free_r+0x24>
 80038d8:	bd38      	pop	{r3, r4, r5, pc}
 80038da:	bf00      	nop
 80038dc:	20012e50 	.word	0x20012e50

080038e0 <_malloc_r>:
 80038e0:	b570      	push	{r4, r5, r6, lr}
 80038e2:	1ccd      	adds	r5, r1, #3
 80038e4:	f025 0503 	bic.w	r5, r5, #3
 80038e8:	3508      	adds	r5, #8
 80038ea:	2d0c      	cmp	r5, #12
 80038ec:	bf38      	it	cc
 80038ee:	250c      	movcc	r5, #12
 80038f0:	2d00      	cmp	r5, #0
 80038f2:	4606      	mov	r6, r0
 80038f4:	db01      	blt.n	80038fa <_malloc_r+0x1a>
 80038f6:	42a9      	cmp	r1, r5
 80038f8:	d903      	bls.n	8003902 <_malloc_r+0x22>
 80038fa:	230c      	movs	r3, #12
 80038fc:	6033      	str	r3, [r6, #0]
 80038fe:	2000      	movs	r0, #0
 8003900:	bd70      	pop	{r4, r5, r6, pc}
 8003902:	f000 f87d 	bl	8003a00 <__malloc_lock>
 8003906:	4a21      	ldr	r2, [pc, #132]	; (800398c <_malloc_r+0xac>)
 8003908:	6814      	ldr	r4, [r2, #0]
 800390a:	4621      	mov	r1, r4
 800390c:	b991      	cbnz	r1, 8003934 <_malloc_r+0x54>
 800390e:	4c20      	ldr	r4, [pc, #128]	; (8003990 <_malloc_r+0xb0>)
 8003910:	6823      	ldr	r3, [r4, #0]
 8003912:	b91b      	cbnz	r3, 800391c <_malloc_r+0x3c>
 8003914:	4630      	mov	r0, r6
 8003916:	f000 f863 	bl	80039e0 <_sbrk_r>
 800391a:	6020      	str	r0, [r4, #0]
 800391c:	4629      	mov	r1, r5
 800391e:	4630      	mov	r0, r6
 8003920:	f000 f85e 	bl	80039e0 <_sbrk_r>
 8003924:	1c43      	adds	r3, r0, #1
 8003926:	d124      	bne.n	8003972 <_malloc_r+0x92>
 8003928:	230c      	movs	r3, #12
 800392a:	6033      	str	r3, [r6, #0]
 800392c:	4630      	mov	r0, r6
 800392e:	f000 f868 	bl	8003a02 <__malloc_unlock>
 8003932:	e7e4      	b.n	80038fe <_malloc_r+0x1e>
 8003934:	680b      	ldr	r3, [r1, #0]
 8003936:	1b5b      	subs	r3, r3, r5
 8003938:	d418      	bmi.n	800396c <_malloc_r+0x8c>
 800393a:	2b0b      	cmp	r3, #11
 800393c:	d90f      	bls.n	800395e <_malloc_r+0x7e>
 800393e:	600b      	str	r3, [r1, #0]
 8003940:	50cd      	str	r5, [r1, r3]
 8003942:	18cc      	adds	r4, r1, r3
 8003944:	4630      	mov	r0, r6
 8003946:	f000 f85c 	bl	8003a02 <__malloc_unlock>
 800394a:	f104 000b 	add.w	r0, r4, #11
 800394e:	1d23      	adds	r3, r4, #4
 8003950:	f020 0007 	bic.w	r0, r0, #7
 8003954:	1ac3      	subs	r3, r0, r3
 8003956:	d0d3      	beq.n	8003900 <_malloc_r+0x20>
 8003958:	425a      	negs	r2, r3
 800395a:	50e2      	str	r2, [r4, r3]
 800395c:	e7d0      	b.n	8003900 <_malloc_r+0x20>
 800395e:	428c      	cmp	r4, r1
 8003960:	684b      	ldr	r3, [r1, #4]
 8003962:	bf16      	itet	ne
 8003964:	6063      	strne	r3, [r4, #4]
 8003966:	6013      	streq	r3, [r2, #0]
 8003968:	460c      	movne	r4, r1
 800396a:	e7eb      	b.n	8003944 <_malloc_r+0x64>
 800396c:	460c      	mov	r4, r1
 800396e:	6849      	ldr	r1, [r1, #4]
 8003970:	e7cc      	b.n	800390c <_malloc_r+0x2c>
 8003972:	1cc4      	adds	r4, r0, #3
 8003974:	f024 0403 	bic.w	r4, r4, #3
 8003978:	42a0      	cmp	r0, r4
 800397a:	d005      	beq.n	8003988 <_malloc_r+0xa8>
 800397c:	1a21      	subs	r1, r4, r0
 800397e:	4630      	mov	r0, r6
 8003980:	f000 f82e 	bl	80039e0 <_sbrk_r>
 8003984:	3001      	adds	r0, #1
 8003986:	d0cf      	beq.n	8003928 <_malloc_r+0x48>
 8003988:	6025      	str	r5, [r4, #0]
 800398a:	e7db      	b.n	8003944 <_malloc_r+0x64>
 800398c:	20012e50 	.word	0x20012e50
 8003990:	20012e54 	.word	0x20012e54

08003994 <_realloc_r>:
 8003994:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003996:	4607      	mov	r7, r0
 8003998:	4614      	mov	r4, r2
 800399a:	460e      	mov	r6, r1
 800399c:	b921      	cbnz	r1, 80039a8 <_realloc_r+0x14>
 800399e:	4611      	mov	r1, r2
 80039a0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80039a4:	f7ff bf9c 	b.w	80038e0 <_malloc_r>
 80039a8:	b922      	cbnz	r2, 80039b4 <_realloc_r+0x20>
 80039aa:	f7ff ff4b 	bl	8003844 <_free_r>
 80039ae:	4625      	mov	r5, r4
 80039b0:	4628      	mov	r0, r5
 80039b2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80039b4:	f000 f826 	bl	8003a04 <_malloc_usable_size_r>
 80039b8:	42a0      	cmp	r0, r4
 80039ba:	d20f      	bcs.n	80039dc <_realloc_r+0x48>
 80039bc:	4621      	mov	r1, r4
 80039be:	4638      	mov	r0, r7
 80039c0:	f7ff ff8e 	bl	80038e0 <_malloc_r>
 80039c4:	4605      	mov	r5, r0
 80039c6:	2800      	cmp	r0, #0
 80039c8:	d0f2      	beq.n	80039b0 <_realloc_r+0x1c>
 80039ca:	4631      	mov	r1, r6
 80039cc:	4622      	mov	r2, r4
 80039ce:	f7ff fc11 	bl	80031f4 <memcpy>
 80039d2:	4631      	mov	r1, r6
 80039d4:	4638      	mov	r0, r7
 80039d6:	f7ff ff35 	bl	8003844 <_free_r>
 80039da:	e7e9      	b.n	80039b0 <_realloc_r+0x1c>
 80039dc:	4635      	mov	r5, r6
 80039de:	e7e7      	b.n	80039b0 <_realloc_r+0x1c>

080039e0 <_sbrk_r>:
 80039e0:	b538      	push	{r3, r4, r5, lr}
 80039e2:	4c06      	ldr	r4, [pc, #24]	; (80039fc <_sbrk_r+0x1c>)
 80039e4:	2300      	movs	r3, #0
 80039e6:	4605      	mov	r5, r0
 80039e8:	4608      	mov	r0, r1
 80039ea:	6023      	str	r3, [r4, #0]
 80039ec:	f7ff f9e8 	bl	8002dc0 <_sbrk>
 80039f0:	1c43      	adds	r3, r0, #1
 80039f2:	d102      	bne.n	80039fa <_sbrk_r+0x1a>
 80039f4:	6823      	ldr	r3, [r4, #0]
 80039f6:	b103      	cbz	r3, 80039fa <_sbrk_r+0x1a>
 80039f8:	602b      	str	r3, [r5, #0]
 80039fa:	bd38      	pop	{r3, r4, r5, pc}
 80039fc:	20012e58 	.word	0x20012e58

08003a00 <__malloc_lock>:
 8003a00:	4770      	bx	lr

08003a02 <__malloc_unlock>:
 8003a02:	4770      	bx	lr

08003a04 <_malloc_usable_size_r>:
 8003a04:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a08:	1f18      	subs	r0, r3, #4
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	bfbc      	itt	lt
 8003a0e:	580b      	ldrlt	r3, [r1, r0]
 8003a10:	18c0      	addlt	r0, r0, r3
 8003a12:	4770      	bx	lr

08003a14 <_init>:
 8003a14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a16:	bf00      	nop
 8003a18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a1a:	bc08      	pop	{r3}
 8003a1c:	469e      	mov	lr, r3
 8003a1e:	4770      	bx	lr

08003a20 <_fini>:
 8003a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003a22:	bf00      	nop
 8003a24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003a26:	bc08      	pop	{r3}
 8003a28:	469e      	mov	lr, r3
 8003a2a:	4770      	bx	lr
